dplyr::select(name, zone, access, telemetry, cameras, remains, starts_with('status')) %>%
group_by(name) %>% mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
distinct()
sites <- dt %>% mutate(score=0, score=case_when(
telemetry == 1 ~ score + 4,
TRUE ~ score
)) %>%
mutate(score=case_when(
cameras == 1 ~ score + 3,
TRUE ~ score
)) %>%
mutate(score=case_when(
remains == 1 ~ score + 2,
TRUE ~ score
)) %>%
mutate(score=case_when(
zone == 'cs' ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
status.2018 > 0 & status.2019 > 0 ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
access %in% c('h', 'b', 'q') ~ score - 11,
TRUE ~ score
)) %>%
filter(score > 0) %>%
arrange(desc(score))
View(sites)
sites <- dt %>% mutate(score=0, score=case_when(
telemetry == 1 ~ score + 4,
TRUE ~ score
)) %>%
mutate(score=case_when(
cameras == 1 ~ score + 3,
TRUE ~ score
)) %>%
mutate(score=case_when(
remains == 1 ~ score + 2,
TRUE ~ score
)) %>%
mutate(score=case_when(
zone == 'cs' ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
status.2018 > 0 & status.2019 > 0 ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
access %in% c('h', 'b', 'q') ~ score - 11,
TRUE ~ score
)) %>%
filter(score > 0 | remains == 1) %>%
arrange(desc(score))
sites <- dt %>% mutate(score=0, score=case_when(
telemetry == 1 ~ score + 4,
TRUE ~ score
)) %>%
mutate(score=case_when(
cameras == 1 ~ score + 3,
TRUE ~ score
)) %>%
mutate(score=case_when(
remains == 1 ~ score + 2,
TRUE ~ score
)) %>%
mutate(score=case_when(
zone == 'cs' ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
status.2018 > 0 & status.2019 > 0 ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
access %in% c('h', 'b', 'q') ~ score - 11,
TRUE ~ score
)) %>%
filter(score > 0 | remains == 1) %>%
dplyr::select(name, score, everything()) %>%
arrange(desc(score))
kable(sites, caption='Summary of available data for South Coast sites',
col.names=
c('Site', 'Priority', 'Zone', 'Access', 'Telemetry', 'Cameras', 'Phys. remains', '2013', '2014', '2015', '2016', '2017', '2018', '2019'))
library(knitr)
kable(sites, caption='Summary of available data for South Coast sites',
col.names=
c('Site', 'Priority', 'Zone', 'Access', 'Telemetry', 'Cameras', 'Phys. remains', '2013', '2014', '2015', '2016', '2017', '2018', '2019'))
# dt <- read.csv('../data/raw/total_data_twisted.csv', stringsAsFactors=FALSE) %>%
replace(is.na(.), ' ')
# dt <- read.csv('../data/raw/total_data_twisted.csv', stringsAsFactors=FALSE) %>%
#  replace(is.na(.), ' ')
dt <- read_csv('../data/interim/the_big_list_of_nests.csv') %>%
dplyr::select(-starts_with('X')) %>%
rename(status.2013=Occup2013, status.2014=Occup2014) %>%
dplyr::select(name, zone, access, telemetry, cameras, remains, starts_with('status')) %>%
group_by(name) %>% mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
distinct()
sites <- dt %>% mutate(score=0, score=case_when(
telemetry == 1 ~ score + 4,
TRUE ~ score
)) %>%
mutate(score=case_when(
cameras == 1 ~ score + 3,
TRUE ~ score
)) %>%
mutate(score=case_when(
remains == 1 ~ score + 2,
TRUE ~ score
)) %>%
mutate(score=case_when(
zone == 'cs' ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
status.2018 > 0 & status.2019 > 0 ~ score + 1,
TRUE ~ score
)) %>%
mutate(score=case_when(
access %in% c('h', 'b', 'q') ~ score - 11,
TRUE ~ score
)) %>%
filter(score > 0 | remains == 1) %>%
dplyr::select(name, score, everything()) %>%
arrange(desc(score))
kable(sites, 'latex', booktabs=T, caption='Summary of available data for South Coast sites',
table.envir = "capctable",
col.names=
c('Site', 'Priority', 'Zone', 'Access', 'Telemetry', 'Cameras', 'Phys. remains', '2013', '2014', '2015', '2016', '2017', '2018', '2019')) %>%
kable_styling(latex_options=c('scale_down', 'striped')) %>%
footnote(general='Zone: tz=transition, cs=coastal; Access: t=truck, b=boat, h=helicopter.') %>%
footnote(general='Additional physical remains may be available from 2018 and from Vancouver Island') %>%
add_header_above(c(' '=4, 'Movement'=1, 'Diet - 2019 only'=2, 'Occupancy'=7)) %>%
landscape(margin = c('1cm'))
library(kableExtra)
kable(sites, 'latex', booktabs=T, caption='Summary of available data for South Coast sites',
table.envir = "capctable",
col.names=
c('Site', 'Priority', 'Zone', 'Access', 'Telemetry', 'Cameras', 'Phys. remains', '2013', '2014', '2015', '2016', '2017', '2018', '2019')) %>%
kable_styling(latex_options=c('scale_down', 'striped')) %>%
footnote(general='Zone: tz=transition, cs=coastal; Access: t=truck, b=boat, h=helicopter.') %>%
footnote(general='Additional physical remains may be available from 2018 and from Vancouver Island') %>%
add_header_above(c(' '=4, 'Movement'=1, 'Diet - 2019 only'=2, 'Occupancy'=7)) %>%
landscape(margin = c('1cm'))
# Load up some libraries.
library('tidyverse')
# Load in the data.
df <- read_csv('../data/processed/the_big_list_of_nests.csv')
# Load in the data.
df <- read_csv('processed/the_big_list_of_nests.csv')
# Load in the data.
df <- read_csv('/processed/the_big_list_of_nests.csv')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load in the data.
df <- read_csv('../data/processed/the_big_list_of_nests.csv')
# Collapse multiple nests into a single value by generating a nest centroid, etc.
sites <- df %>% group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
select(-nest, -NOTES) %>%
distinct()
write_csv(sites, '../data/interim/all_sc_sites_centroids.csv')
data.sites <- sites %>% filter(status.2018 > 0 & status.2019 | remains > 0)
write_csv(sites, '../data/interim/sc_sites_data.csv')
write_csv(data.sites, '../data/interim/sc_sites_data.csv')
occ.sites <- sites %>% filter(status.2018 > 0 & status.2019)
write_csv(occ.sites, '../data/interim/sc_sites_occ.csv')
rem.sites <- sites %>% filter(remains > 0)
write_csv(rem.sites, '../data/interim/sc_sites_rems.csv')
cam.sites <- sites %>% filter(cameras > 0)
write_csv(cam.sites, '../data/interim/sc_sites_cams.csv')
tel.sites <- sites %>% filter(telemetry > 0)
write_csv(tel.sites, '../data/interim/sc_sites_tel.csv')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library('raster')
# Load some libraries.
library('raster')
library('tidyverse')
# Load some libraries.
library('raster')
library('tidyverse')
```
library('landscapemetrics')
library('tidyverse')
# Bring in diet data.
dd <- df <- read_csv('../data/interim/camera_corrected.csv')
class(dd$datetime)
# Bring in diet data.
dd <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
View(items)
# There's one stray Tamiasciurus sp. that I'm just going to change for ease.
items <- items %>% mutate(species=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'douglasii',
TRUE ~ species
))
squirrel.mass <- dd %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus')
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus')
squirrel.mass %>% distinct(species)
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass))
View(squirrel.mass)
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), prop.sq=amount.sq/total)
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), prop.sq=amount.sq/total) %>%
select(site, prop.sq)
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), prop.sq=amount.sq/total) %>%
select(site, prop.sq) %>% distinct()
# Import BEC raster created previously.
bec.raster <- raster('../data/interim/bec_raster_SC.tif')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library('raster')
library('tidyverse')
library('landscapemetrics')
# Bring in diet data.
dd <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
# Calculate proportion of squirrel biomass per site.
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), prop.sq=amount.sq/total) %>%
select(site, prop.sq) %>% distinct()
squirrel.mass
# Import BEC raster created previously.
bec.raster <- raster('../data/interim/bec_raster_SC.tif')
# Double-check that it's ok.
check_raster(bec.raster)
# Double-check that it's ok.
check_landscape(bec.raster)
sites <- read_csv('../data/processed/the_big_list_of_nests.csv')
sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
filter(cameras > 0)
View(sites)
sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
View(sites)
extract_lsm(bec.raster, y=sites, what='lsm_p_area')
# Make site table a spatial object and make it UTMs.
sites.sf <- st_as_sf(sites, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
library('sf')
# Make site table a spatial object and make it UTMs.
sites.sf <- st_as_sf(sites, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
extract_lsm(bec.raster, y=sites.sf, what='lsm_p_area')
# Convert area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
sample_lsm(bec.raster, points=sites.sf, size=r.hr.m, what='lsm_l_shdi',
shape='circle')
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_l_shdi',
shape='circle')
test <- sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_l_shdi',
shape='circle')
plot(test)
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle')
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
pivot_wider(id_cols=plot_id, names_from=class, values_from=value)
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
mutate(class=as.numeric(class)) %>%
pivot_wider(id_cols=plot_id, names_from=class, values_from=value)
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
mutate(class=as.character(class)) %>%
pivot_wider(id_cols=plot_id, names_from=class, values_from=value)
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
mutate(class=as.character(class)) %>%
pivot_wider(id_cols=plot_id, names_from=class, values_from=value, values_fill=0)
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
mutate(class=as.character(class)) %>%
pivot_wider(id_cols=plot_id, names_from=class, values_from=value,
values_fill=list(0))
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
mutate(class=as.character(class)) %>%
pivot_wider(id_cols=plot_id, names_from=class, values_from=value,
values_fill=list(value=0))
test <- sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
mutate(class=as.character(class)) %>%
pivot_wider(id_cols=plot_id, names_from=class, values_from=value,
values_fill=list(value=0))
levels(r.bec)
levels(bec.r)
levels(bec.raster)
sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
left_join(levels(bec.raster), by=c('class'='ID'))
test<- sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle')# %>%
test
bec.levels <- levels(bec.raster)
left_join(bec.levels, by=c('class'='ID'))
left_join(test, bec.levels)
bec.levels <- data.frame(levels(bec.raster))
View(bec.levels)
left_join(test, bec.levels)
left_join(test, bec.levels, by=c('class'='ID'))
test2 <_ bec.levels <- data.frame(levels(bec.raster))
test2 <- left_join(test, bec.levels, by=c('class'='ID'))
View(test2)
test2 <- left_join(test, data.frame(levels(bec.raster)), by=c('class'='ID'))
View(test2)
test <- sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
left_join(data.frame(levels(bec.raster)), by=c('class'='ID'))
View(test)
test <- sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
left_join(data.frame(levels(bec.raster)), by=c('class'='ID')) %>%
pivot_wider(id_cols=plot_id, names_from=category, values_from=value,
values_fill=list(value=0))
View(test)
View(sites)
View(sites)
# Calculate area per class per site.
class.area <- sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(bec.raster)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=category, values_from=value,
values_fill=list(value=0))
select(sites, name)
select(sites, name) %>% rownames_to_column()
View(class.area)
select(sites, name) %>% rownames_to_column() %>%
right_join(class.area, by=c('rowname'='plot_id'))
class(class.area$plot_id)
test <- select(sites, name) %>% rownames_to_column() %>%
right_join(class.area, by=c('rowname'='plot_id'))
test <- select(sites, name) %>% rownames_to_column() #%>%
class(test$rowname)
select(sites, name) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
select(sites, site) %>% rownames_to_column() #%>%
select(sites, lat) %>% rownames_to_column() #%>%
select(sites, site, -name) %>% rownames_to_column() #%>%
select(sites, site) %>% rownames_to_column() #%>%
select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
# Amend with site names.
class.area <- select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
class.area
class.area <- class.area %>% mutate(amt.tz=CWHds1+CWHms1)
View(class.area)
View(squirrel.mass)
View(squirrel.mass)
class.area <- left_join(class.area, squirrel.mass)
sq.x.tz <- lm(prop.sq ~ amt.tz, data=class.area)
plot(class.area, x=amt.tz, y=prop.sq)
library('ggplot2')
ggplot(class.area, aes(x=amt.tz, y=prop.sq)) +
geom_point() +
theme_classic()
ggplot(class.area, aes(x=amt.tz, y=prop.sq, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
summary(sq.x.tz)
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.sq=sum(mass), prop.sq=amount.sq/total) %>%
select(site, prop.sq) %>% distinct()
mammal.mass
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.sq=sum(mass), prop.ml=amount.sq/total) %>%
select(site, prop.sq) %>% distinct()
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.sq=sum(mass), prop.ml=amount.sq/total) %>%
select(site, prop.ml) %>% distinct()
mammal.mass
# Add to the main data set.
class.area <- left_join(class.area, mammal.mass)
# Try another model.
ml.x.tz <- lm(prop.ml ~ amt.tz, data=class.area)
# Look at it.
summary(ml.x.tz)
ggplot(class.area, aes(x=amt.tz, y=prop.ml, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library('raster')
library('tidyverse')
library('sf')
library('landscapemetrics')
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
# Calculate proportion of squirrel biomass per site.
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), prop.sq=amount.sq/total) %>%
select(site, prop.sq) %>% distinct()
squirrel.mass
# Import BEC raster created previously.
bec.raster <- raster('../data/interim/bec_raster_SC.tif')
# Double-check that it's ok.
check_landscape(bec.raster)
# Import data and get centroids for camera nests.
sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Make site table a spatial object and make it UTMs.
sites.sf <- st_as_sf(sites, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Calculate area per class per site.
class.area <- sample_lsm(bec.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(bec.raster)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=category, values_from=value,
values_fill=list(value=0))
# Amend with site names.
class.area <- select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
class.area
class.area <- class.area %>% mutate(amt.tz=CWHds1+CWHms1)
# Add proportion of biomass that is squirrel.
class.area <- left_join(class.area, squirrel.mass)
# Make a model.
sq.x.tz <- lm(prop.sq ~ amt.tz, data=class.area)
# Look at it.
summary(sq.x.tz)
# Calculate proportion of mammalian biomass.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.sq=sum(mass), prop.ml=amount.sq/total) %>%
select(site, prop.ml) %>% distinct()
# Add to the main data set.
class.area <- left_join(class.area, mammal.mass)
# Try another model.
ml.x.tz <- lm(prop.ml ~ amt.tz, data=class.area)
# Look at it.
summary(ml.x.tz)
