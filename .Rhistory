mutate(variable='hsi edge density')
# HSI contagion.
proportion.squirrel.by.hsi.contagion <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ hsi.contagion, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='hsi contagion')
# Proportion suitable.
proportion.squirrel.by.proportion.suitable <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ proportion.suitable, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion suitable')
# Suitable habitat edge density.
proportion.squirrel.by.suitable.edge.density <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ suitable.edge.density, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='suitable habitat edge density')
# Bind it all together.
proportion.squirrel.statistics <- bind_rows(proportion.squirrel.by.bec.diversity,
proportion.squirrel.by.proportion.cover.mature,
proportion.squirrel.by.cover.edge.density,
proportion.squirrel.by.cover.contagion,
proportion.squirrel.by.cover.diversity,
proportion.squirrel.by.cover.evenness,
proportion.squirrel.by.cover.richness,
proportion.squirrel.by.gap.edge.density,
proportion.squirrel.by.canopy.cover,
proportion.squirrel.by.hsi.edge.density,
proportion.squirrel.by.hsi.contagion,
proportion.squirrel.by.proportion.suitable,
proportion.squirrel.by.suitable.edge.density)
proportion.squirrel.statistics <- proportion.squirrel.statistics %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.1 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
))
proportion.squirrel.statistics %>% select(size, sig, variable) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(variable, PFA, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
# Add productivity to dataset.
data <- camera.sites.2019 %>% select(nest, n_fledge) %>% full_join(data, by=c('nest'))
# Make a bunch of models.
# Diet diversity.
productivity.by.diet.diversity <- data %>%
split(.$size) %>%
map(~lm(n_fledge ~ diet.diversity, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='diet diversity')
# Proportion squirrel.
productivity.by.proportion.squirrel <- data %>%
split(.$size) %>%
map(~lm(n_fledge ~ proportion.squirrel, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion squirrel')
# Bind it all together.
productivity.diet.statistics <- bind_rows(productivity.by.diet.diversity,
productivity.by.proportion.squirrel)
productivity.diet.statistics <- productivity.diet.statistics %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.1 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
))
productivity.diet.statistics %>% select(size, sig, variable) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(variable, PFA, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
# Forest type diversity.
productivity.by.bec.diversity <- data %>%
drop_na(n_fledge) %>%
split(.$size) %>%
map(~lm(n_fledge ~ bec.diversity, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='forest type diversity')
# Proportion older forest.
productivity.by.proportion.cover.mature <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ proportion.cover.mature, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion older forest')
# Landcover edge density.
productivity.by.cover.edge.density <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ cover.edge.density, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover edge density')
# Landcover contagion.
productivity.by.cover.contagion <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ cover.contagion, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover contagion')
# Landcover diversity.
productivity.by.cover.diversity <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ cover.diversity, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover diversity')
# Landcover evenness.
productivity.by.cover.evenness <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ cover.evenness, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover evenness')
# Landcover richness.
productivity.by.cover.richness <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ cover.richness, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover richness')
# Gap edge density.
productivity.by.gap.edge.density <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ gap.edge.density, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='gap edge density')
# Proportion high canopy cover.
productivity.by.canopy.cover <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ canopy.high, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion high canopy cover')
# HSI edge density.
productivity.by.hsi.edge.density <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ hsi.edge.density, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='hsi edge density')
# HSI contagion.
productivity.by.hsi.contagion <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ hsi.contagion, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='hsi contagion')
# Proportion suitable.
productivity.by.proportion.suitable <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ proportion.suitable, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion suitable')
# Suitable habitat edge density.
productivity.by.suitable.edge.density <- data %>%
drop_na(n_fledge) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(n_fledge ~ suitable.edge.density, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size') %>%
mutate(variable='suitable habitat edge density')
# Bind it all together.
productivity.landscape.statistics <- bind_rows(productivity.by.bec.diversity,
productivity.by.proportion.cover.mature,
productivity.by.cover.edge.density,
productivity.by.cover.contagion,
productivity.by.cover.diversity,
productivity.by.cover.evenness,
productivity.by.cover.richness,
productivity.by.gap.edge.density,
productivity.by.canopy.cover,
productivity.by.hsi.edge.density,
productivity.by.hsi.contagion,
productivity.by.proportion.suitable,
productivity.by.suitable.edge.density)
productivity.landscape.statistics <- productivity.landscape.statistics %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.1 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
))
productivity.landscape.statistics %>% select(size, sig, variable) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(variable, PFA, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
# Forest type diversity.
proportion.squirrel.by.bec.diversity <- data %>%
drop_na(proportion.squirrel) %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ bec.diversity, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='forest type diversity', x=1)
# Proportion older forest.
proportion.squirrel.by.proportion.cover.mature <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ proportion.cover.mature, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion older forest', x=2)
# Landcover edge density.
proportion.squirrel.by.cover.edge.density <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ cover.edge.density, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover edge density', x=3)
# Landcover contagion.
proportion.squirrel.by.cover.contagion <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ cover.contagion, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover contagion', x=4)
# Landcover diversity.
proportion.squirrel.by.cover.diversity <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ cover.diversity, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover diversity', x=5)
# Landcover evenness.
proportion.squirrel.by.cover.evenness <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ cover.evenness, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover evenness', x=6)
# Landcover richness.
proportion.squirrel.by.cover.richness <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ cover.richness, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='landcover richness', x=7)
# Gap edge density.
proportion.squirrel.by.gap.edge.density <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ gap.edge.density, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='gap edge density', x=8)
# Proportion high canopy cover.
proportion.squirrel.by.canopy.cover <- data %>%
drop_na(diet.diversity) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(diet.diversity ~ canopy.high, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion high canopy cover', x=9)
# HSI edge density.
proportion.squirrel.by.hsi.edge.density <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ hsi.edge.density, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='hsi edge density', x=10)
# HSI contagion.
proportion.squirrel.by.hsi.contagion <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ hsi.contagion, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='hsi contagion', x=11)
# Proportion suitable.
proportion.squirrel.by.proportion.suitable <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ proportion.suitable, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='proportion suitable', x=12)
# Suitable habitat edge density.
proportion.squirrel.by.suitable.edge.density <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ suitable.edge.density, data=.x)) %>%
map(tidy) %>%
bind_rows(.id='size') %>%
mutate(variable='suitable habitat edge density', x=13)
install.packages('jtools')
library(jtools)
proportion.squirrel.by.bec.diversity
proportion.squirrel.by.bec.diversity <- data %>%
drop_na(proportion.squirrel) %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ bec.diversity, data=.x))
proportion.squirrel.by.bec.diversity
proportion.squirrel.by.bec.diversity[1]
plot.summs(proportion.squirrel.by.bec.diversity[1])
library(jtools)
plot_summs(proportion.squirrel.by.bec.diversity[1])
install.packages('ggstance')
library(ggstance)
plot_summs(proportion.squirrel.by.bec.diversity[1])
proportion.squirrel.by.bec.diversity %>%
map(~plot.summs())
proportion.squirrel.by.bec.diversity %>%
map(~plot_summs())
plot_summs(proportion.squirrel.by.bec.diversity[1], proportion.squirrel.by.canopy.cover[1])
install.packages('broom.mixed')
library(broom.mixed)
plot_summs(proportion.squirrel.by.bec.diversity[1], proportion.squirrel.by.canopy.cover[1])
plot_summs(proportion.squirrel.by.bec.diversity[1], proportion.squirrel.by.canopy.cover[1], scale=TRUE)
proportion.squirrel.by.proportion.cover.mature <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ proportion.cover.mature, data=.x))
plot_summs(proportion.squirrel.by.bec.diversity[1], proportion.squirrel.by.canopy.cover[1], scale=TRUE)
plot_summs(proportion.squirrel.by.canopy.cover[1], scale=TRUE)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(extrafont)
data <- loadRDS('../data/interim/diet_landscape_data.rds')
data <- readRDS('../data/interim/diet_landscape_data.rds')
# Forest type diversity.
proportion.squirrel.by.bec.diversity <- data %>%
drop_na(proportion.squirrel) %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ bec.diversity, data=.x)) #%>%
proportion.squirrel.by.bec.diversity
proportion.squirrel.by.bec.diversity[1]
library(jtools)
library(ggstance)
library(broom.mixed)
plot_summs(proportion.squirrel.by.bec.diversity[1])
# Proportion older forest.
proportion.squirrel.by.proportion.cover.mature <- data %>%
drop_na(proportion.squirrel) %>%
filter(nest != 'TCR2019') %>%
split(.$size) %>%
map(~lm(proportion.squirrel ~ proportion.cover.mature, data=.x)) #%>%
plot_summs(proportion.squirrel.by.bec.diversity[1],
proportion.squirrel.by.proportion.cover.mature[1])
fit <- lm(proportion.squirrel ~ bec.diversity, data=data))
fit <- lm(proportion.squirrel ~ bec.diversity, data=data)
plot_summs(fit)
fit <- lm(proportion.squirrel ~ bec.diversity + proportion.cover.mature, data=data)
plot_summs(fit)
pfa <- filter(data, size == 'PFA')
fit <- lm(proportion.squirrel ~ bec.diversity + proportion.cover.mature, data=pfa)
plot_summs(fit)
fit.pfa <- lm(proportion.squirrel ~ bec.diversity +
proportion.cover.mature,
cover.edge.density,
cover.contagion,
cover.diversity,
cover.evenness,
cover.richness,
gap.edge.density,
canopy.high,
hsi.edge.density,
hsi.contagion,
proportion.suitable,
suitable.edge.density,
data=pfa)
View(data)
pfa <- filter(data, size == 'PFA' & site != 'TCR')
pfa <- filter(data, size == 'PFA' & nest != 'TCR')
fit.pfa <- lm(proportion.squirrel ~ bec.diversity +
proportion.cover.mature,
cover.edge.density,
cover.contagion,
cover.diversity,
cover.evenness,
cover.richness,
gap.edge.density,
canopy.high,
hsi.edge.density,
hsi.contagion,
proportion.suitable,
suitable.edge.density,
data=pfa)
fit.pfa <- lm(proportion.squirrel ~ bec.diversity +
proportion.cover.mature,
cover.edge.density,
cover.contagion,
cover.diversity,
cover.evenness,
cover.richness,
gap.edge.density,
canopy.high,
hsi.edge.density,
hsi.contagion,
proportion.suitable,
suitable.edge.density,
data=pfa)
fit.pfa <- lm(proportion.squirrel ~ bec.diversity +
proportion.cover.mature,
cover.edge.density,
cover.contagion,
cover.diversity,
cover.evenness,
cover.richness,
canopy.high,
hsi.edge.density,
hsi.contagion,
proportion.suitable,
suitable.edge.density,
data=pfa)
fit.pfa <- lm(proportion.squirrel ~ bec.diversity +
proportion.cover.mature +
cover.edge.density +
cover.contagion +
cover.diversity +
cover.evenness +
cover.richness +
gap.edge.density +
canopy.high +
hsi.edge.density +
hsi.contagion +
proportion.suitable +
suitable.edge.density,
data=pfa)
plot_summs(fit)
plot_summs(fit.pfa)
fit.pfa
max.range <- pfa <- filter(data, size == 'maximum range' & nest != 'TCR')
max.range <- pfa <- filter(data, size == 'maximum range' & nest != 'TCR')
fit.max <- lm(proportion.squirrel ~ bec.diversity +
proportion.cover.mature +
cover.edge.density +
cover.contagion +
cover.diversity +
cover.evenness +
cover.richness +
gap.edge.density +
canopy.high +
hsi.edge.density +
hsi.contagion +
proportion.suitable +
suitable.edge.density,
data=max.range)
plot_summs(fit.max)
