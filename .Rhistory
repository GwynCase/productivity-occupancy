ns %>% mutate(can.glance=map(can.models, broom::glance)) %>%
unnest(can.glance)
# Let's get some model quality metrics.
ns %>% mutate(can.glance=map(can.models, broom::glance)) %>%
unnest(can.glance, .drop=TRUE)
# Let's get some model quality metrics.
ns %>% mutate(can.glance=map(can.models, broom::glance)) %>%
unnest(can.glance, .drop=TRUE) %>% view()
# Create model-fitting function.
canopy.model <- function(df) {
lm(n.fledge ~ canopy.high, data=df)
}
# Nest data.
ns <- df %>% group_by(size) %>% nest()
# Or add it into data frame.
ns <- ns %>%
mutate(canopy.models=map(data, canopy.model))
# Look at it.
ns
# Make another model function.
cover.model <- function(df) {
lm(n.fledge ~ cover.diversity, data=df)
}
# Add it to the data frame.
ns <- ns %>%
mutate(cover.models=map(data, cover.model))
View(ns)
# Nest data.
ns <- df %>% group_by(size) %>% nest()
# Or add it into data frame.
ns <- ns %>%
mutate(canopy=map(data, canopy.model))
# Add it to the data frame.
ns <- ns %>%
mutate(cover=map(data, cover.model))
# Twist the data frame.
pivot_longer(!c(size, data), names_to='modname', values_to='model')
# Twist the data frame.
pivot_longer(!1:2, names_to='modname', values_to='model')
# Twist the data frame.
pivot_longer(cols=(canopy, cover), names_to='modname', values_to='model')
# Twist the data frame.
pivot_longer(cols=2:3, names_to='modname', values_to='model')
# Twist the data frame.
pivot_longer(c(size, data), names_to='modname', values_to='model')
# Twist the data frame.
ns %>% pivot_longer(c(size, data), names_to='modname', values_to='model')
# Twist the data frame.
ns %>% pivot_longer(-c(size, data), names_to='modname', values_to='model')
# Twist the data frame.
ns.long <- ns %>% pivot_longer(-c(size, data), names_to='modname', values_to='model')
# Can we get quality metrics?
ns.long %>% map(model, glance)
# Can we get quality metrics?
ns.long %>% map(glance)
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance))
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE)
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE) %>%
arrange(adj.r.squared)
# Create model-fitting function.
canopy.model <- function(df) {
lmer(n.fledge ~ canopy.high + (1|site), data=df)
}
# Nest data.
ns <- df %>% group_by(size) %>% nest()
# Create model-fitting function.
canopy.model <- function(df) {
lmer(n.fledge ~ canopy.high + (1|site), data=df)
}
# Or add it into data frame.
ns <- ns %>%
mutate(canopy=map(data, canopy.model))
# Make another model function.
cover.model <- function(df) {
lmer(n.fledge ~ cover.diversity + (1|site), data=df)
}
# Add it to the data frame.
ns <- ns %>%
mutate(cover=map(data, cover.model))
# Twist the data frame.
ns.long <- ns %>% pivot_longer(-c(size, data), names_to='modname', values_to='model')
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE) %>%
arrange(adj.r.squared)
View(ns.long)
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) #%>%
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE) #%>%
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE) %>%
arrange(AIC)
# Can I use an external function to extract something else?
ns
# Can I use an external function to extract something else?
ns$cover
# Can I use an external function to extract something else?
ns$cover[[1]]
library(MuMIn)
r.squaredGLMM(ns$cover[[1]])
ns.long$model
# On many models.
r.squaredGLMM(ns.long$model)
# On many models.
map(ns.long$model, r.squaredGLMM)
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM))
ns.long %>% mutate(glance=map(model, broom::glance))
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
unnest(rsq, .drop=TRUE)
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
unnest(rsq, .drop=TRUE) %>%
rename(R2m=`rsq[,1]`, R2c=`[,2]`)
# On many models.
test <- ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
unnest(rsq, .drop=TRUE)
test
test %>% rename(R2m=`rsq[,1]`, R2c=`[,2]`)
test %>% rename(R2m=rsq[,1], R2c=[,2])
colnames(test)
test %>% select(rsq)
class(test$rsq)
# On many models.
test <- ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) #%>%
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) #%>%
test %>% select(rsq)
test %>% ungroup() %>% select(rsq)
test %>% ungroup() %>% select(rsq) %>%
as.data.frame()
test %>% ungroup() %>% select(rsq) %>%
as_tibble()
test2 <- test %>% ungroup() %>% select(rsq) %>%
as_tibble()
test2
colnames(test2)
View(test2)
View(test)
View(test2)
unnest(test2)
test3 <- unnest(test2, cols=c(rsq))
test3
test3 <- unnest(test2)
test3
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) #%>%
test2
test2[[1]]
test2[1]
test2[,1]
test2[1, ]
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(lme4)
library(broom)
library(modelr)
# Load in the habitat variables prepped earlier.
ls <- read_csv('../data/processed/landscape_metrics_full.csv')
# And load in the productivity data.
pd <- read_csv('../data/raw/productivity.csv')
# Join them together, keeping just sites with productivity data.
df <- left_join(pd, ls)
# Nest data.
ns <- df %>% group_by(size) %>% nest()
# Create model-fitting function.
canopy.model <- function(df) {
lmer(n.fledge ~ canopy.high + (1|site), data=df)
}
# Or add it into data frame.
ns <- ns %>%
mutate(canopy=map(data, canopy.model))
# Make another model function.
cover.model <- function(df) {
lmer(n.fledge ~ cover.diversity + (1|site), data=df)
}
# Add it to the data frame.
ns <- ns %>%
mutate(cover=map(data, cover.model))
# Twist the data frame.
ns.long <- ns %>% pivot_longer(-c(size, data), names_to='modname', values_to='model')
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE) %>%
arrange(AIC)
# Pull out one model.
ns$cover[[1]]
# Try it.
r.squaredGLMM(ns$cover[[1]])
library(MuMIn)
# Try it.
r.squaredGLMM(ns$cover[[1]])
# Can we get quality metrics?
ns.long %>% mutate(rsq=map(model, modelr::rsquare)) %>%
unnest(glance, .drop=TRUE) %>%
arrange(AIC)
# Can we get quality metrics?
ns.long %>% mutate(rsq=map(model, modelr::rsquare)) %>%
unnest(glance, .drop=TRUE)
# Twist the data frame.
ns.long <- ns %>% pivot_longer(-c(size, data), names_to='modname', values_to='model')
# Can we get quality metrics?
ns.long %>% mutate(rsq=map(model, modelr::rsquare)) %>%
unnest(glance, .drop=TRUE)
View(ns.long)
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE) %>%
arrange(AIC)
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE)
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, rsquare)) %>%
unnest(glance, .drop=TRUE)
# Try it.
r.squaredGLMM(ns$cover[[1]])
# Try it.
onemod <- r.squaredGLMM(ns$cover[[1]])
class(onemod)
t(onemod)
test <- t(onemod)
class(test)
data.frame(t(onemod))
test <- data.frame(t(onemod))
class(test)
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM))
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=t(rsq))
# On many models.
ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=t(rsq)) %>%
mutate(rsq=data.frame(rsq))
# On many models.
tt <- ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=t(rsq)) %>%
mutate(rsq=data.frame(rsq))
View(tt)
# On many models.
tt <- ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=t(rsq)) #%>%
test <- data.frame(t(onemod))
View(test)
# On many models.
tt <- ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=data.frame(t(rsq))) #%>%
as.data.frame(onemod)
ttdf <- as.data.frame(onemod)
View(ttdf)
# On many models.
tt <- ns.long %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=as.data.frame(rsq)) #%>%
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=as.data.frame(rsq)) #%>%
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
rowwise() %>%
mutate(rsq=as.data.frame(rsq)) #%>%
View(ttdf)
View(onemod)
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) #%>%
View(tt)
r.squaredGLMM(ns$cover[[1]])
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) #%>%
ttdf <- as.data.frame(onemod)
class(tt$rsq)
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
rowwise() %>%
mutate(rsq=as.data.frame(rsq)) #%>%
View(ns.long)
# Try it.
r.squaredGLMM(ns$cover[[1]])
# Pull out one model.
ns$cover[[1]]
View(ns.long)
View(ns)
# Pull out one model.
ns.long$model[[1]]
# Try it.
r.squaredGLMM(ns.long$model[[1]])
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
#rowwise() %>%
mutate(rsq=as.data.frame(rsq))
View(tt)
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) #%>%
View(ns.long)
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) #%>%
View(tt)
# On many models.
tt <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
#rowwise() %>%
mutate(rsq=as.data.frame(rsq))
View(tt)
t3 <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
#rowwise() %>%
mutate(rsq=map(rsq, as.data.frame))
View(t3)
View(t3[[5]][[1]])
# Can we get quality metrics?
ns.long %>% mutate(glance=map(model, broom::glance)) %>% view()
t3 <- ns.long %>% ungroup() %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=map(rsq, as.data.frame)) %>%
unnest(rsq)
View(t3)
View(df)
# Nest the data frame.
nf <- df %>% group_by(size) %>% nest()
# Cover diversity
landcover.model <- function(df) {
lmer(n.fledge ~ civer.diversity + (1|site), data=df)
}
# High canopy cover
canopy.model <- function(df) {
lmer(n.fledge ~ canopy.high + (1|site), data=df)
}
# BEC diversity
bec.model <- function(df) {
lmer(n.fledge ~ bec model + (1|site), data=df)
# Cover diversity
landcover.model <- function(df) {
lmer(n.fledge ~ civer.diversity + (1|site), data=df)
}
# High canopy cover
canopy.model <- function(df) {
lmer(n.fledge ~ canopy.high + (1|site), data=df)
}
# BEC diversity
bec.model <- function(df) {
lmer(n.fledge ~ bec.diversity + (1|site), data=df)
}
# Proportion suitable
suitable.model <- function(df) {
lmer(n.fledge ~ proportion.suitable + (1|site), data=df)
}
# Gap edge density
gap.model <- function(df) {
lmer(n.fledge ~ gap.edge.density + (1|site), data=df)
}
# Nest the data frame.
nf <- df %>% group_by(size) %>% nest()
# Apply the functions.
nf <- nf %>%
mutate(
landcover=map(data, landcover.model),
canopy=map(data, canopy.model),
bec=map(data, bec.model),
suitable=map(data, suitable.model),
gap=map(data, gap.model)
)
# Cover diversity
landcover.model <- function(df) {
lmer(n.fledge ~ cover.diversity + (1|site), data=df)
}
# Nest the data frame.
nf <- df %>% group_by(size) %>% nest()
# Apply the functions.
nf <- nf %>%
mutate(
landcover=map(data, landcover.model),
canopy=map(data, canopy.model),
bec=map(data, bec.model),
suitable=map(data, suitable.model),
gap=map(data, gap.model)
)
nf.long <- nf %>%
pivot_longer(-c(size, data), names_to='modname', values_to='model') %>%
mutate(glance=map(model, glance)) %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=map(rsq, as.data.frame))
View(nf.long)
nf.long %>% unnest(glance)
nf.long %>% unnest(glance) %>% view()
nf.long %>% unnest(glance) %>%
unnest(rsq) %>% view()
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(!model, !data)
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(-model, -data)
# Take a look.
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(-model, -data)
# Take a look.
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(-model, -data) %>%
arrange(AIC)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(lme4)
library(broom)
library(modelr)
library(MuMIn)
# Load in the habitat variables prepped earlier.
ls <- read_csv('../data/processed/landscape_metrics_full.csv')
# And load in the productivity data.
pd <- read_csv('../data/raw/productivity.csv')
# Join them together, keeping just sites with productivity data.
df <- left_join(pd, ls)
# Cover diversity
landcover.model <- function(df) {
lmer(n.fledge ~ cover.diversity + (1|site), data=df)
}
# High canopy cover
canopy.model <- function(df) {
lmer(n.fledge ~ canopy.high + (1|site), data=df)
}
# BEC diversity
bec.model <- function(df) {
lmer(n.fledge ~ bec.diversity + (1|site), data=df)
}
# Proportion suitable
suitable.model <- function(df) {
lmer(n.fledge ~ proportion.suitable + (1|site), data=df)
}
# Gap edge density
gap.model <- function(df) {
lmer(n.fledge ~ gap.edge.density + (1|site), data=df)
}
# Nest the data frame.
nf <- df %>% group_by(size) %>% nest()
# Apply the functions.
nf <- nf %>%
mutate(
landcover=map(data, landcover.model),
canopy=map(data, canopy.model),
bec=map(data, bec.model),
suitable=map(data, suitable.model),
gap=map(data, gap.model)
)
# Twist and assess.
nf.long <- nf %>%
pivot_longer(-c(size, data), names_to='modname', values_to='model') %>%
mutate(glance=map(model, glance)) %>%
mutate(rsq=map(model, r.squaredGLMM)) %>%
mutate(rsq=map(rsq, as.data.frame))
# Take a look.
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(-model, -data) %>%
arrange(AIC)
library(knitr)
# Take a look.
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(-model, -data) %>%
arrange(AIC) %>%
kable()
# Take a look.
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(-model, -data) %>%
arrange(AIC) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
library(kableExtra)
# Take a look.
nf.long %>% unnest(glance) %>%
unnest(rsq) %>%
select(-model, -data) %>%
arrange(AIC) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
