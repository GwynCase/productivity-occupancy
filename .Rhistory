ggplot(aes(x=pred, y=res)) +
geom_point() +
theme_classic()
data.frame(pred=predict(top.model, type='response'),
res=residuals(top.model, type='response')) %>%
rownames_to_column() %>%
ggplot(aes(x=pred, y=res)) +
geom_point() +
theme_classic()
data.frame(pred=predict(top.model, type='response'),
res=residuals(top.model, type='response')) %>%
rownames_to_column() %>%
ggplot(aes(x=pred, y=res)) +
geom_point() +
theme_classic()
data.frame(pred=predict(top.model, type='response'),
res=residuals(top.model, type='response')) %>%
ggplot(aes(x=pred, y=res)) +
geom_point() +
theme_classic()
# Look at predicted values vs residuals.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=pred, y=res)) +
geom_point() +
theme_classic()
# Look at predicted values vs residuals.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
theme_classic()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(ggplot2)
library(raster)
library(sf)
library(landscapemetrics)
library(knitr)
library(kableExtra)
library(broom)
library(AICcmodavg)
library(modelr)
# Load in the processed data from last time.
data <- read_csv('../data/processed/landscape_metrics_index.csv')
# Remove problematic TCR.
df <- data %>% filter(site != 'TCR')
# Load HSI raster.
r.hsi <- raster('../data/processed/foraging_sc.tif')
# Define levels.
hsi.levels <- data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3),
class.name=c('ocean', 'freshwater', 'river',
'nil', 'low', 'moderate', 'high'))
# Add levels to raster.
levels(r.hsi) <- hsi.levels
# Assign crs to raster.
crs(r.hsi) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# Define landscape sizes.
landscape <- data.frame(
size=c('PFA', 'breeding area', 'home range', 'maximum range'),
area=c(60, 200, 3800, 15600)
)
# Convert area in hectares to radii in meters.
landscape <- landscape %>% mutate(radius=sqrt(area*10000/pi))
# Read in the data.
nests <- read_csv('../data/processed/sc_nests.csv')
# Calculate a centroid for each site, and keep only ones with a quality index.
centroids <- nests %>% group_by(site) %>%
mutate(mean.x=mean(xcoord), mean.y=mean(ycoord)) %>%
distinct(site, name, mean.x, mean.y)
sites <- semi_join(centroids, data, by=c('site', 'name')) %>%
rename(xcoord=mean.x, ycoord=mean.y)
# Make it a spatial object for later.
sites.sf <- sites %>%
st_as_sf(coords=c('xcoord', 'ycoord')) %>%
st_set_crs('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs') %>%
st_as_sf()
# Also make a list of site names for later.
site.names <- sites.sf$site
# Make a list of metrics to calculate.
hsi.metrics <- c('lsm_l_sidi')
# Make a function to do the calculations and formatting.
calc.hsi.metrics <- function(x) {
sample_lsm(r.hsi, y=sites.sf, size=x, plot_id=site.names, shape='circle',
what=hsi.metrics) %>%
left_join(hsi.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x) %>%
rename(hsi.inside=percentage_inside)
}
# Run the function for each sample size.
hsi.landscape.metrics <- map_df(landscape$radius, calc.hsi.metrics)
# Do some cleanup
hsi.landscape.metrics <- hsi.landscape.metrics %>%
select(radius, hsi.inside, nest=plot_id, hsi.diversity=sidi)
hsi.landscape.metrics <- select(landscape, radius, size) %>% right_join(hsi.landscape.metrics, by=c('radius'))
# Join to data frame.
df <- left_join(df, hsi.landscape.metrics, by=c('site'='nest', 'size', 'radius', 'hsi.inside'))
# Proportion suitable
proportion.suitable.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.suitable, data=df, family=binomial(logit))
}
# Proportion suitable + HSI diversity
suitable.diversity.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.suitable + hsi.diversity, data=df, family=binomial(logit))
}
# Proportion suitable + suitable edge density
suitable.edge.density.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.suitable + suitable.edge.density, data=df, family=binomial(logit))
}
# Proportion suitable + HSI diversity + suitable edge density
suitable.sink.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.suitable +
suitable.edge.density + hsi.diversity, data=df, family=binomial(logit))
}
# Proportion mature forest
proportion.mature.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.cover.mature, data=df, family=binomial(logit))
}
# Proportion mature + landcover diversity
mature.diversity.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.cover.mature + cover.diversity, data=df, family=binomial(logit))
}
# Proportion mature + gap edge density
mature.edge.density.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.cover.mature + gap.edge.density, data=df, family=binomial(logit))
}
# Proportion mature + gap edge density + landcover diversity
mature.sink.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ proportion.cover.mature +
gap.edge.density + cover.diversity, data=df, family=binomial(logit))
}
# Null
null.model <- function(df) {
glm(cbind(years.detect, years.no.detect) ~ 1, data=df, family=binomial(logit))
}
# Nest the data frame.
nf <- df %>% group_by(size) %>% nest()
# Apply the functions.
nf <- nf %>%
mutate(
m.proportion.suitable=map(data, proportion.suitable.model),
m.suitable.diversity=map(data, suitable.diversity.model),
m.suitable.edge.density=map(data, suitable.edge.density.model),
m.suitable.sink=map(data, suitable.sink.model),
m.proportion.mature=map(data, proportion.mature.model),
m.mature.diversity=map(data, mature.diversity.model),
m.mature.edge.density=map(data, mature.edge.density.model),
m.mature.sink=map(data, mature.sink.model),
m.null=map(data, null.model)
)
pfa.models <- nf %>% filter(size == 'PFA') %>%
pivot_longer(-c(size, data), names_to='modname', values_to='model')
ba.models <- nf %>% filter(size == 'breeding area') %>%
pivot_longer(-c(size, data), names_to='modname', values_to='model')
hr.models <- nf %>% filter(size == 'home range') %>%
pivot_longer(-c(size, data), names_to='modname', values_to='model')
mr.models <- nf %>% filter(size == 'maximum range') %>%
pivot_longer(-c(size, data), names_to='modname', values_to='model')
aictab(pfa.models$model, modnames=pfa.models$modname) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
# Separate out the data.
pfa.data <- df %>% filter(size == 'PFA')
# Re-write the top model on its own.
top.model <- glm(cbind(years.detect, years.no.detect) ~ proportion.cover.mature +
gap.edge.density, data=pfa.data, family=binomial(logit))
# Create a grid and add predictions.
fake <- data_grid(pfa.data, gap.edge.density, .model=top.model) %>%
mutate(pred=predict(top.model, newdata=., type='response'))
# Grab the inverse link function from the model.
inv <- family(top.model)$linkinv
# Add fit and SE data.
fake <- bind_cols(fake, setNames(as_tibble(predict(top.model, fake, se.fit = TRUE)[1:2]),
c('fit.link','se.link')))
# Create confidence interval.
fake <- fake %>% mutate(fit.resp  = inv(fit.link),
right.upr = inv(fit.link + (2 * se.link)),
right.lwr = inv(fit.link - (2 * se.link)))
# Plot them?
ggplot(fake, aes(x=gap.edge.density, y=pred)) +
geom_line() +
geom_ribbon(aes(ymin=right.lwr, ymax=right.upr), alpha=0.1) +
geom_point(data=pfa.data, aes(x=gap.edge.density, y=quality.index)) +
theme_classic()
# Look at predicted values vs residuals.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
theme_classic()
aictab(ba.models$model, modnames=pfa.models$modname) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
aictab(hr.models$model, modnames=pfa.models$modname) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
aictab(mr.models$model, modnames=pfa.models$modname) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
summary(top.model)
visreg(top.model)
# Look at predicted values vs residuals.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
theme_classic()
plot(top.model)
# Look at some diagnostics.
plot(top.model)
# Look at some diagnostics.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
theme_classic()
data.frame(predicted=fitted(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
theme_classic()
plot(fitted(top.model), residuals(top.model), xlab = 'Fitted Values', ylab = 'Residuals')
abline(h=0, lty=2)
lines(smooth.spline(fitted(top.model), residuals(top.model)))
# Look at some diagnostics.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
geom_hline(yintercept=0, linetype='dashed') +
geom_smooth(se=FALSE) +
theme_classic()
# Look at some diagnostics.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
geom_hline(yintercept=0, linetype='dashed') +
geom_smooth(se=FALSE) +
theme_classic()
# Look at some diagnostics.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
geom_hline(yintercept=0, linetype='dashed') +
geom_smooth(method='lm', se=FALSE) +
theme_classic()
# Look at some diagnostics.
data.frame(predicted=predict(top.model, type='response'),
residuals=residuals(top.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
geom_hline(yintercept=0, linetype='dashed') +
geom_smooth(method='lm', se=FALSE, color='black') +
theme_classic()
44/40
44.184/40
pfa.models
select(pfa.models, model)
select(pfa.models, model)[1]
select(pfa.models, model)[,1]
select(pfa.models, model)[1,]
map(pfa.models$model, summary)
pfa.models$model[1]
summary(pfa.models$model[1])
pfa.models$model[1]
pfa.models$model[1] %>% summary()
summary(top.model)
pfa.models$model[2]
pfa.models$model[3]
pfa.models$model[4]
ls()
pfa.models$model[3]
summary(top.model)
glm.summary()
pfa.models
pfa.models %>% filter(modname=m.mature.edge.density)
pfa.models %>% filter(modname == 'm.mature.edge.density')
pfa.models %>% filter(modname == 'm.mature.edge.density') %>%
summary()
pfa.models %>% filter(modname == 'm.mature.edge.density') %>%
summary(model)
map(pfa.models$model, summary)
pfa.models %>% map(model, glance)
map(pfa.models$model, glance)
pfa.models %>% mutate(glance=map(model, glance))
pfa.models %>% mutate(glance=map(model, glance)) %>%
unnest(glance)
pfa.models %>% mutate(glance=map(model, glance)) %>%
unnest(glance) %>%
select(!c(size, data, model))
aictab(pfa.models$model, modnames=pfa.models$modname) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
pfa.models %>% mutate(tidy=map(model, tidy))
pfa.models %>% mutate(tidy=map(model, tidy)) %>%
unnest(tidy)
pfa.models %>% mutate(tidy=map(model, tidy)) %>%
unnest(tidy) %>% ungroup()
pfa.models %>% mutate(tidy=map(model, tidy)) %>%
unnest(tidy) %>% ungroup() %>%
select(!c(size, data, model))
pfa.models %>% mutate(tidy=map(model, tidy)) %>%
unnest(tidy) %>% ungroup() %>%
select(!c(size, data, model)) %>%
filter(term != '(Intercept')
pfa.models %>% mutate(tidy=map(model, tidy)) %>%
unnest(tidy) %>% ungroup() %>%
select(!c(size, data, model)) %>%
filter(term != '(Intercept'))
pfa.models %>% mutate(tidy=map(model, tidy)) %>%
unnest(tidy) %>% ungroup() %>%
select(!c(size, data, model)) %>%
filter(term != '(Intercept)')
pfa.models %>% mutate(glance=map(model, glance)) %>%
unnest(glance) %>%
select(!c(size, data, model))
pfa.models %>% mutate(tidy=map(model, tidy)) %>%
unnest(tidy) %>% ungroup() %>%
select(!c(size, data, model)) %>%
filter(term != '(Intercept)')
pfa.models %>% mutate(inv=family(model)$linkinv)
pfa.models %>% rowwise() %>% mutate(inv=family(model)$linkinv)
map(pfa.models$model, glance)
map(pfa.models$model, family)
library('tidyverse')
library('exiftoolr')
library('lubridate')
library('purrr')
# Fill in these three things:
# Where are the pictures now?
path.in <- 'E:/RECONYX/Pinecone_2020/100RECNX_Pinecone 2020/'
# What site is it?
site <- 'PNC'
# Where are the pictures going?
# END WITH A FORWARD SLASH
path.out <- 'E:/'
# What year is the data from?
year <- '2020'
# Make a new directory for the files.
site.dir <- paste0(path.out, site, year)
dir.create(site.dir)
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', order='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, year, '_photos_all.csv'),
row.names=FALSE)
# Fill in these three things:
# Where are the pictures now?
path.in <- 'E:/RECONYX/Pinecone_2020/101RECNX_Pinecone 2020/'
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', order='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, year, '_photos_101.csv'),
row.names=FALSE)
# Fill in these three things:
# Where are the pictures now?
path.in <- 'E:/RECONYX/Pinecone_2020/102RECNX_Pinecone 2020/'
# Get a list of the photos.
photo.list <- list.files(path.in, full.names=TRUE) %>%
exif_read(tags=c('filename', 'CreateDate', 'SerialNumber'))
# Create a data frame.
photo.df <- photo.list %>%
dplyr::select(filename=FileName, datetime=CreateDate,
serial=SerialNumber) %>%
mutate(site=site, datetime=ymd_hms(datetime)) %>%
add_column(interest='', live.chicks='', class='', order='', family='',
genus='', species='', common='', size='', comments='')
# Save a csv with all the photos.
write.csv(photo.df,
file=paste0(site.dir, '/', site, year, '_photos_102.csv'),
row.names=FALSE)
library(sf)
pts <- matrix(1:10, , 2)
pts
(ls1 = st_linestring(pts))
plot(ls1)
pts <- matrix(1:20, , 4)
outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(1,1,1,2,2,2,2,1,1,1),ncol=2, byrow=TRUE)
hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
pts = list(outer, hole1, hole2)
(pl1 = st_polygon(pts))
plot(pl1)
(pl1 = st_polygon(outer))
pts = list(outer)
(pl1 = st_polygon(outer))
pts = list(outer, hole1, hole2)
pts3 = lapply(pts, function(x) cbind(x, 0))
(pl2 = st_polygon(pts3))
plot(pl2)
plot(pl2)
(pl3 = st_polygon(pts3, "XYM"))
plot(pl3)
df <- data.frame(
lon = c(119.4, 119.4, 119.4, 119.5, 119.5),
lat = c(-5.192, -5.192, -5.187, -5.187, -5.191)
)
polygon <- df %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON")
polygon
plot(polygon)
df <- data.frame(
lon = c(119.4, 119.4, 119.4, 119.5, 119.5),
lat = c(-5.192, -5.192, -5.167, -5.167, -5.191)
)
polygon <- df %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("POLYGON")
plot(polygon)
pts <- data.frame(
lon = c(119.45, 119.49, 119.47),
lat = c(-5.172, -5.190, -5.183)
)
df2 <- data.frame(
lon = c(119.45, 119.49, 119.47),
lat = c(-5.172, -5.190, -5.183)
)
points <- df2 %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326) %>%
summarise(geometry = st_combine(geometry)) %>%
st_cast("MULTIPOINT")
plot(points)
plot(polygon, add=TRUE)
plot(points)
plot(polygon)
plot(points, add=TRUE)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
list.files(path='../data/raw')
list.files(path='../data/raw', pattern='photos')
file.list <- list.files(path='../data/raw', pattern='photos')
map(file.list, read_csv)
file.list <- list.files(path='../data/raw', pattern='photos', full.names=TRUE)
map(file.list, read_csv)
df <- map(file.list, read_csv)
View(df)
df %>% bind_rows()
View(df)
df %>% map(live.chicks, sum
df %>% map(live.chicks, sum
)
4+5
df %>% map(live.chicks, sum)
# Open all the files in the list and add to a data frame.
df <- map(file.list, read_csv, col_types='col_character')
# Open all the files in the list and add to a data frame.
df <- map(file.list, read_csv, col_types=list(col_character))
file.list %>% map(read_csv, col_types = list(col_character()))
head(file.list)
file.list %>% map(read_csv, col_types = list(col_character()))
file.list %>% map(read_csv, col_types = cols(.default = "c"))
# Open all the files in the list and add to a data frame.
df <- file.list %>% map(read_csv, col_types = cols(.default = "c"))
df %>% bind_rows()
# Open all the files in the list and add to a data frame.
df <- file.list %>% map(read_csv, col_types = cols(.default = "c")) %>%
bind_rows()
View(df)
df %>% drop_na(interest) %>% view()
df %>% filter(class != is.na())
df %>% filter(class != is_na())
df %>% filter(is_na(class))
df %>% filter(is.na(class))
df %>% filter(!is.na(class))
df %>% filter(!is.na(class)) %>% view()
df %>% filter(site == 'FMT')
df %>% filter(site == 'FMT') %>% select(-c(filename, datetime, serial))
df %>% filter(site == 'FMT') %>% select(-c(filename, datetime, serial)) %>%
distinct()
df %>% filter(site == 'GRV') %>% select(-c(filename, datetime, serial)) %>%
distinct()
df %>% filter(site == 'MTF') %>% select(-c(filename, datetime, serial)) %>%
distinct()
df %>% filter(site == 'GOW') %>% select(-c(filename, datetime, serial)) %>%
distinct()
gow <- read_csv('../data/raw/GOW2020_photos_all_completed.csv')
View(gow)
gow %>% #filter(site == 'GOW') %>%
select(-c(filename, datetime, serial)) %>%
distinct()
mtf <- read_csv('../data/raw/MTF2020_photos_all_completed.csv')
mtf %>% #filter(site == 'GOW') %>%
select(-c(filename, datetime, serial)) %>%
distinct()
View(mtf)
