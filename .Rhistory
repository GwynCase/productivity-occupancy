'Picoides', # woodpeckers
'Colaptes', # flicker
'Dryocopus', # PIWO
'Perisoreus', # gray jay
'Turdus', # robins
'Ixoreus', # thrushes
'Cetophaga', # some warblers
'Pipilo' # towhee
))
birds.avail <- semi_join(sk, birds.want)%>% distinct(GEN, SP, SPENA) %>%
arrange(GEN, SP)
birds.avail
specs.avail <- bind_rows(mammals.avail, birds.avail)
short.list <- semi_join(sk, specs.avail) %>% filter(distinct(GEN, SP, SPENA)) %>%
arrange(GEN, SP)
short.list <- semi_join(sk, specs.avail) %>% distinct(GEN, SP, SPENA, .keep_all=TRUE) %>%
arrange(GEN, SP)
short.list
# I only need mallard ducks.
short.list %>% filter(-genus == 'Anas')
# I only need mallard ducks.
short.list %>% filter(genus != 'Anas')
# I only need mallard ducks.
short.list %>% filter(GEN != 'Anas')
View(short.list)
# Import nests and calculate centroids.
cam.sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
# Drop TCR, ungroup.
cam.sites <- cam.sites %>% filter(site != 'TCR') %>%
ungroup() %>%
rownames_to_column(var='plot_id') %>%
mutate(plot_id=as.integer(plot_id))
# Make site table a spatial object and make it UTMs.
cam.sites.sf <- ungroup(cam.sites) %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
library(sf)
library(sf)
library(raster)
# Make site table a spatial object and make it UTMs.
cam.sites.sf <- ungroup(cam.sites) %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
library(landscapemetrics)
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Import the BEC raster.
r.bec <- raster('../data/interim/bec_raster_SC.tif')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
levels(r.bec)
# Import the original shapefile.
shp.bec <- st_read('../data/processed/BEC_annual-homerange_clipped.shp')
# Get BEC levels.
bec.levels <- data.frame((shp.bec[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
bec.levels
# Build sample.
my.plots <- data.frame(construct_buffer(coords=cam.sites.sf, shape='circle',
size=r.hr.m, return_sp=FALSE))
View(my.plots)
# Pull out a toy known to be a problem.
utz.coord <- cam.sites.sf %>% filter(site == 'UTZ')
# Make a plot out of it.
utz.plot <- data.frame(construct_buffer(coords=utz.coord, shape='circle',
size=r.hr.m, return_sp=FALSE))
# Make the graph.
bec.plot <- raster::as.data.frame(r.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_map_label)))
# Can I graph it like this?
bec.plot +
geom_polygon(data=utz.plot, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
r.bec
# Convert raster to dataframe for plotting.
df.bec <- raster::as.data.frame(r.bec, xy=TRUE)
View(df.bec)
levels(r.bec)
# Make the graph.
bec.plot <- raster::as.data.frame(r.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_category)))
# Add sample polygons.
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
utz.plot
ext(utz.coord)
class(utz.coord)
bad.bec <- r.bec
levels(bad.bed) <- bec.levels
levels(bad.bec) <- bec.levels
# Build sample.
my.plots <- data.frame(construct_buffer(coords=cam.sites.sf, shape='circle',
size=r.hr.m, return_sp=FALSE))
# Make the graph.
bec.plot <- raster::as.data.frame(r.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_category)))
# Add sample polygons.
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
# Build sample.
my.plots <- data.frame(construct_buffer(coords=cam.sites.sf, shape='circle',
size=r.hr.m, return_sp=FALSE))
# Make the graph.
bec.plot <- raster::as.data.frame(r.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_category)))
# Add sample polygons.
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
levels(bad.bec) <- bec.levels
bad.plot <- raster::as.data.frame(bad.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_category)))
# Add sample polygons.
bad.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
raster::as.data.frame(bad.bec, xy=TRUE) %>% head()
bad.plot <- raster::as.data.frame(bad.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_map_label)))
# Add sample polygons.
bad.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
bbox(utz.plot)
st_bbox(utz.plot)
class(utz.coord)
utz.coord
class(utz.plot)
View(utz.coord)
st_bbox(utz.coord)
st_bbox(utz.coord)[1]
# Get bounding coordinates for site.
st_bbox(utz.coord)[1] %>% class
# Get bounding coordinates for site.
toy <- st_bbox(utz.coord)[1] %>% class
toy
# Get bounding coordinates for site.
toy <- st_bbox(utz.coord)[1]
toy
toy + 2
# Get bounding coordinates for site.
xmin <- st_bbox(utz.coord)[1] - r.hr.m
xmin
xmax <- st_bbox(utz.coord)[3] - r.hr.m
xmax
# Get bounding coordinates for site.
xmin <- st_bbox(utz.coord)[1] - r.hr.m
ymin <- st_bbox(utz.coord)[2] - r.hr.m
xmax <- st_bbox(utz.coord)[3] + r.hr.m
ymax <- st_bbox(utz.coord)[4] + r.hr.m
xmin
xmax
ymin
ymax
# Add to graph.
bec.plot +
geom_polygon(data=utz.plot, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(xmin, xmax) +
ylim(ymin, ymax)
# Get bounding coordinates for site.
utzmin <- st_bbox(utz.coord)[1] - r.hr.m
# Get bounding coordinates for site.
utzxmin <- st_bbox(utz.coord)[1] - r.hr.m
utzymin <- st_bbox(utz.coord)[2] - r.hr.m
utzxmax <- st_bbox(utz.coord)[3] + r.hr.m
utzxmax <- st_bbox(utz.coord)[3] + r.hr.m
ymax <- st_bbox(utz.coord)[4] + r.hr.m
utzyymax <- st_bbox(utz.coord)[4] + r.hr.m
# Add to graph.
bec.plot +
geom_polygon(data=utz.plot, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(utzxmin, utzxmax) +
ylim(utzymin, utzymax)
utzymax <- st_bbox(utz.coord)[4] + r.hr.m
# Add to graph.
bec.plot +
geom_polygon(data=utz.plot, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(utzxmin, utzxmax) +
ylim(utzymin, utzymax)
# Add to graph.
bec.plot +
geom_polygon(data=utz.plot, aes(x = utz.plot[, 1],
y = utz.plot[, 2],
group = utz.plot[, 3]),
col = "black", fill = NA) +
xlim(utzxmin, utzxmax) +
ylim(utzymin, utzymax)
# Using bad bec.
bad.plot +
geom_polygon(data=utz.plot, aes(x = utz.plot[, 1],
y = utz.plot[, 2],
group = utz.plot[, 3]),
col = "black", fill = NA) +
xlim(utzxmin, utzxmax) +
ylim(utzymin, utzymax)
cam.sites.sf[,1]
cam.sites.sf[1, ]
st_bbox(cam.sites.sf[1, ])
apply(cam.sites.sf, st_bbox())
apply(cam.sites.sf, 1, st_bbox)
cam.sites.sf[1, ]
st_bbox(cam.sites.sf[1, ])
st_bbox(cam.sites.sf[1, ])[1]
st_bbox(cam.sites.sf[1, ])[1] - r.hr.m
bad.plot +
geom_polygon(data=utz.plot, aes(x = utz.plot[, 1],
y = utz.plot[, 2],
group = utz.plot[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[1, ])[1] - r.hr.m, st_bbox(cam.sites.sf[1, ])[3] - r.hr.m) +
ylim(utzymin, utzymax)
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[1, ])[1] - r.hr.m, st_bbox(cam.sites.sf[1, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[1, ])[2] - r.hr.m, st_bbox(cam.sites.sf[1, ])[4] + r.hr.m)
View(cam.sites.sf)
# Site 1
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[1, ])[1] - r.hr.m, st_bbox(cam.sites.sf[1, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[1, ])[2] - r.hr.m, st_bbox(cam.sites.sf[1, ])[4] + r.hr.m) +
theme_classic + labs(title='MTF')
# Site 1
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[1, ])[1] - r.hr.m, st_bbox(cam.sites.sf[1, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[1, ])[2] - r.hr.m, st_bbox(cam.sites.sf[1, ])[4] + r.hr.m) +
theme_classic() + labs(title='MTF')
# Site 2
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[2, ])[1] - r.hr.m, st_bbox(cam.sites.sf[2, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[2, ])[2] - r.hr.m, st_bbox(cam.sites.sf[2, ])[4] + r.hr.m) +
theme_classic() + labs(title='MTC')
# Site 3
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[3, ])[1] - r.hr.m, st_bbox(cam.sites.sf[3, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[3, ])[2] - r.hr.m, st_bbox(cam.sites.sf[3, ])[4] + r.hr.m) +
theme_classic() + labs(title='RLK')
# Site 4
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[4, ])[1] - r.hr.m, st_bbox(cam.sites.sf[4, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[4, ])[2] - r.hr.m, st_bbox(cam.sites.sf[4, ])[4] + r.hr.m) +
theme_classic() + labs(title='TMC')
# Site 5
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[5, ])[1] - r.hr.m, st_bbox(cam.sites.sf[5, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[5, ])[2] - r.hr.m, st_bbox(cam.sites.sf[5, ])[4] + r.hr.m) +
theme_classic() + labs(title='UTZ')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load up some libraries.
library(tidyverse)
library(sf)
library(raster)
library(landscapemetrics)
# Import nests and calculate centroids.
cam.sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Drop TCR, ungroup.
cam.sites <- cam.sites %>% filter(site != 'TCR') %>%
ungroup() %>%
rownames_to_column(var='plot_id') %>%
mutate(plot_id=as.integer(plot_id))
# Make site table a spatial object and make it UTMs.
cam.sites.sf <- ungroup(cam.sites) %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Import the BEC raster.
r.bec <- raster('../data/interim/bec_raster_SC.tif')
levels(r.bec)
# Import the original shapefile.
shp.bec <- st_read('../data/processed/BEC_annual-homerange_clipped.shp')
# Get BEC levels.
bec.levels <- data.frame((shp.bec[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
bec.levels
# Build sample.
my.plots <- data.frame(construct_buffer(coords=cam.sites.sf, shape='circle',
size=r.hr.m, return_sp=FALSE))
# Make the graph.
bec.plot <- raster::as.data.frame(r.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_category)))
# Add sample polygons.
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
bad.bec <- r.bec
levels(bad.bec) <- bec.levels
bad.plot <- raster::as.data.frame(bad.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_map_label)))
# Add sample polygons.
bad.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
# Pull out a toy known to be a problem.
utz.coord <- cam.sites.sf %>% filter(site == 'UTZ')
utz.plot <- data.frame(construct_buffer(coords=utz.plot, shape='circle',
size=r.hr.m, return_sp=FALSE))
utz.plot <- data.frame(construct_buffer(coords=utz.coord, shape='circle',
size=r.hr.m, return_sp=FALSE))
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load up some libraries.
library(tidyverse)
library(sf)
library(raster)
library(landscapemetrics)
# Import nests and calculate centroids.
cam.sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Drop TCR, ungroup.
cam.sites <- cam.sites %>% filter(site != 'TCR') %>%
ungroup() %>%
rownames_to_column(var='plot_id') %>%
mutate(plot_id=as.integer(plot_id))
# Make site table a spatial object and make it UTMs.
cam.sites.sf <- ungroup(cam.sites) %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Import the BEC raster.
r.bec <- raster('../data/interim/bec_raster_SC.tif')
levels(r.bec)
# Import the original shapefile.
shp.bec <- st_read('../data/processed/BEC_annual-homerange_clipped.shp')
# Get BEC levels.
bec.levels <- data.frame((shp.bec[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
bec.levels
# Build sample.
my.plots <- data.frame(construct_buffer(coords=cam.sites.sf, shape='circle',
size=r.hr.m, return_sp=FALSE))
# Make the graph.
bec.plot <- raster::as.data.frame(r.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_category)))
# Add sample polygons.
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
bad.bec <- r.bec
levels(bad.bec) <- bec.levels
bad.plot <- raster::as.data.frame(bad.bec, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=factor(bec_raster_SC_map_label)))
# Add sample polygons.
bad.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA)
# Pull out a toy known to be a problem.
utz.coord <- cam.sites.sf %>% filter(site == 'UTZ')
utz.plot <- data.frame(construct_buffer(coords=utz.coord, shape='circle',
size=r.hr.m, return_sp=FALSE))
# Get bounding coordinates for site.
utzxmin <- st_bbox(utz.coord)[1] - r.hr.m
utzymin <- st_bbox(utz.coord)[2] - r.hr.m
utzxmax <- st_bbox(utz.coord)[3] + r.hr.m
utzymax <- st_bbox(utz.coord)[4] + r.hr.m
# Add to graph.
bec.plot +
geom_polygon(data=utz.plot, aes(x = utz.plot[, 1],
y = utz.plot[, 2],
group = utz.plot[, 3]),
col = "black", fill = NA) +
xlim(utzxmin, utzxmax) +
ylim(utzymin, utzymax)
# Using bad bec.
bad.plot +
geom_polygon(data=utz.plot, aes(x = utz.plot[, 1],
y = utz.plot[, 2],
group = utz.plot[, 3]),
col = "black", fill = NA) +
xlim(utzxmin, utzxmax) +
ylim(utzymin, utzymax)
# Site 1
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[1, ])[1] - r.hr.m, st_bbox(cam.sites.sf[1, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[1, ])[2] - r.hr.m, st_bbox(cam.sites.sf[1, ])[4] + r.hr.m) +
theme_classic() + labs(title='MTF')
# Site 2
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[2, ])[1] - r.hr.m, st_bbox(cam.sites.sf[2, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[2, ])[2] - r.hr.m, st_bbox(cam.sites.sf[2, ])[4] + r.hr.m) +
theme_classic() + labs(title='MTC')
# Site 3
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[3, ])[1] - r.hr.m, st_bbox(cam.sites.sf[3, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[3, ])[2] - r.hr.m, st_bbox(cam.sites.sf[3, ])[4] + r.hr.m) +
theme_classic() + labs(title='RLK')
# Site 4
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[4, ])[1] - r.hr.m, st_bbox(cam.sites.sf[4, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[4, ])[2] - r.hr.m, st_bbox(cam.sites.sf[4, ])[4] + r.hr.m) +
theme_classic() + labs(title='TMC')
# Site 5
bec.plot +
geom_polygon(data=my.plots, aes(x = my.plots[, 1],
y = my.plots[, 2],
group = my.plots[, 3]),
col = "black", fill = NA) +
xlim(st_bbox(cam.sites.sf[5, ])[1] - r.hr.m, st_bbox(cam.sites.sf[5, ])[3] + r.hr.m) +
ylim(st_bbox(cam.sites.sf[5, ])[2] - r.hr.m, st_bbox(cam.sites.sf[5, ])[4] + r.hr.m) +
theme_classic() + labs(title='UTZ')
