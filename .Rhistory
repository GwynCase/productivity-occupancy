pivot_wider(names_from=common, values_from=count, values_fill=list(count=0))
# Twist and reorganize the data.
by.site <- items %>% group_by(site, common) %>%
summarize(count=n()) %>%
dplyr::select(site, common, count) %>%
distinct() %>%
pivot_wider(names_from=common, values_from=count, values_fill=list(count=0))
# Twist and reorganize the data.
by.site <- items %>% group_by(site, common) %>%
dplyr::mutate(count=n()) %>%
dplyr::select(site, common, count) %>%
distinct() %>%
pivot_wider(names_from=common, values_from=count, values_fill=list(count=0))
install.packages('conflicted')
library(conflicted)
# Resolve conflicts.
conflict_prefer('mutate', 'dplyr')
conflict_prefer('select', 'dplyr')
# Twist and reorganize the data.
by.site <- items %>% group_by(site, common) %>%
mutate(count=n()) %>%
dplyr::select(site, common, count) %>%
distinct() %>%
pivot_wider(names_from=common, values_from=count, values_fill=list(count=0))
# Twist and reorganize the data.
by.site <- items %>% group_by(site, common) %>%
mutate(count=n()) %>%
select(site, common, count) %>%
distinct() %>%
pivot_wider(names_from=common, values_from=count, values_fill=list(count=0))
# Look at it.
by.site
# Convert site names to row names.
by.site <- by.site %>% column_to_rownames(var='site')
# Make the PCA.
diet.pca <- prcomp(by.site, center=TRUE, scale=TRUE)
# How'd it come out?
summary(diet.pca)
str(diet.pca)
ggbiplot(diet.pca, labels=rownames(by.site)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
head(items)
by.site %>% select(-`average small item`)
by.site %>% select(-`average small item`, -`average medium item`)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
source('../src/prey_attributes.R')
conflict_prefer('arrange', 'dplyr')
source('../src/prey_attributes.R')
conflict_prefer('filter', 'dplyr')
source('../src/prey_attributes.R')
conflict_prefer('summarise', 'dplyr')
source('../src/prey_attributes.R')
conflict_prefer('summarize', 'dplyr')
source('../src/prey_attributes.R')
head(items)
items <- items %>% mutate(common=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'Douglas squirrel',
TRUE ~ common
))
# Twist and reorganize the data.
by.site <- items %>% group_by(site, common) %>%
mutate(count=n()) %>%
select(site, common, count) %>%
distinct() %>%
pivot_wider(names_from=common, values_from=count, values_fill=list(count=0))
# Look at it.
by.site
# Convert site names to row names.
by.site <- by.site %>% column_to_rownames(var='site')
# Make the PCA.
diet.pca <- prcomp(by.site, center=TRUE, scale=TRUE)
# How'd it come out?
summary(diet.pca)
str(diet.pca)
ggbiplot(diet.pca, labels=rownames(by.site)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
# Make a new PCA.
diet.pca.2 <- prcomp(by.site.2, center=TRUE, scale=TRUE)
# Remove unidentified items.
by.site.2 <- by.site %>% select(-`average small item`, `average medium item`)
# Make a new PCA.
diet.pca.2 <- prcomp(by.site.2, center=TRUE, scale=TRUE)
# Plot the new PCA.
ggbiplot(diet.pca, labels=rownames(by.site)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
# Plot the new PCA.
ggbiplot(diet.pca.2, labels=rownames(by.site)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
View(diet.pca)
diet.pca.2
str(diet.pca.2)
str(diet.pca.2)$x
diet.pca.2$x
size <- items %>% filter(class != 'Unknown') %>%
group_by(site, group) %>%
mutate(count=n()) %>%
select(site, group, count) %>%
distinct() %>%
pivot_wider(names_from=group, values_from=count, values_fill=list(count=0))
View(size)
size <- size %>% column_to_rownames(var='site')
size.pca <- prcomp(size, center=TRUE, scale=TRUE)
ggbiplot(size.pca, labels=rownames(size)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=names, values_from=count, values_fill=list(count=0))
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count, values_fill=list(count=0))
View(to.genus)
to.genus <- to.genus %>% column_to_rownames(var='site')
genus.pca <- prcomp(to.genus, center=TRUE, scale=TRUE)
ggbiplot(genus.pca, labels=rownames(size)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
# Select only items identified at least to genus.
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count, values_fill=list(count=0))
# Make site names row names.
to.genus <- to.genus %>% column_to_rownames(var='site')
# Make the PCA.
genus.pca <- prcomp(to.genus, center=TRUE, scale=TRUE)
# Check it out.
ggbiplot(genus.pca, labels=rownames(size)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
# Check it out.
ggbiplot(genus.pca, labels=rownames(size)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
ggbiplot(genus.pca, labels=rownames(size)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
summary(genus.pca)
36+24
29
29+26
str(diet.pca.2)
summary(diet.pca.2)
30+25
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load up some libraries.
library(tidyverse)
library(ggplot2)
library(ggbiplot) # This is experimental and must be installed from GitHub.
library(conflicted)
library(sf)
library(raster)
# Resolve conflicts.
conflict_prefer('mutate', 'dplyr')
conflict_prefer('select', 'dplyr')
conflict_prefer('arrange', 'dplyr')
conflict_prefer('filter', 'dplyr')
conflict_prefer('summarise', 'dplyr')
conflict_prefer('summarize', 'dplyr')
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
source('../src/prey_attributes.R')
head(items)
items <- items %>% mutate(common=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'Douglas squirrel',
TRUE ~ common
))
# Twist and reorganize the data.
by.site <- items %>% group_by(site, common) %>%
mutate(count=n()) %>%
select(site, common, count) %>%
distinct() %>%
pivot_wider(names_from=common, values_from=count, values_fill=list(count=0))
# Look at it.
by.site
# Convert site names to row names.
by.site <- by.site %>% column_to_rownames(var='site')
# Make the PCA.
diet.pca <- prcomp(by.site, center=TRUE, scale=TRUE)
# How'd it come out?
summary(diet.pca)
str(diet.pca)
ggbiplot(diet.pca, labels=rownames(by.site)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
# Remove unidentified items.
by.site.2 <- by.site %>% select(-`average small item`, `average medium item`)
# Make a new PCA.
diet.pca.2 <- prcomp(by.site.2, center=TRUE, scale=TRUE)
# Plot the new PCA.
ggbiplot(diet.pca.2, labels=rownames(by.site)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
# Fix that pesky squirrel.
items <- items %>% mutate(species=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'douglasii',
TRUE ~ species
))
# Select only items identified at least to genus.
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count, values_fill=list(count=0))
# Make site names row names.
to.genus <- to.genus %>% column_to_rownames(var='site')
# Make the PCA.
genus.pca <- prcomp(to.genus, center=TRUE, scale=TRUE)
# Check it out.
ggbiplot(genus.pca, labels=rownames(to.genus)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
summary(genus.pca)
pca.species <- genus.pca$rotation[,1:2] %>% data.frame()
pca.species %>% arrange(PC1)
pca.species %>% arrange(PC2)
# Import habitat HSI shapefile
f.hsi <- st_read('../data/external/foraging_sc.shp')
# Define levels for the raster.
f.hsi.levels <- c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high')
# Set raster extent based on HSI shapefile.
ext <- extent(f.hsi)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Populate BEC polygon data onto empty raster grid.
r.f.hsi <- rasterize(f.hsi, r, 'gridcode')
# Add the levels to the raster.
levels(r.f.hsi) <- f.hsi.levels
# Define levels for the raster.
f.hsi.levels <- list('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high')
# Add the levels to the raster.
levels(r.f.hsi) <- f.hsi.levels
# Define levels for the raster.
f.hsi.levels <- data.frame('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high')
f.hsi.levels
# Save the raster image.
writeRaster(r.f.hsi, '../data/interim/foraging_sc.tif', format='GTiff')
install.packages(rgdal)
install.packages("rgdal")
library(rgdal)
# Save the raster image.
writeRaster(r.f.hsi, '../data/interim/foraging_sc.tif', format='GTiff')
# Save the raster image.
writeRaster(r.f.hsi, '../data/processed/foraging_sc.tif', format='GTiff')
levels(r.f.hsi)
warnings()
levels(r.f.hsi) <- f.hsi.levels
data.frame(c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'), c(-10, -2, 0, 1, 2, 3))
data.frame(c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'), c(-10, -2, -1, 0, 1, 2, 3))
data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3), class.name=c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'))
# Define levels for the raster.
f.hsi.levels <- data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3),
class.name=c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'))
# Add the levels to the raster.
levels(r.f.hsi) <- f.hsi.levels
levels(r.f.hsi)
# Import nests and calculate centroids.
sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Drop TCR, ungroup.
sites <- sites %>% filter(site != 'TCR') %>%
ungroup()
# Make site table a spatial object and make it UTMs.
sites.sf <- ungroup(sites) %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
install.packages("landscapemetrics")
library(landscapemetrics)
# Calculate area per class per site.
class.area <- sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with habitat class name.
left_join(data.frame(levels(r.f.hsi)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=category, values_from=value,
values_fill=list(value=0))
# Calculate area per class per site.
class.area <- sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') #%>%
View(class.area)
# Calculate area per class per site.
class.area <- sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with habitat class name.
left_join(data.frame(levels(r.f.hsi)), by=c('class'='ID')) #%>%
# Calculate area per class per site.
class.area <- sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with habitat class name.
left_join(data.frame(levels(r.f.hsi)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=class.name, values_from=value,
values_fill=list(value=0))
# Amend with site names.
class.area <- dplyr::select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
class.area
View(genus.pca)
genus.pca$x
genus.pca$x[1:2]
genus.pca$x[,1:2]
genus.pca$x[,1:2] %>% rownames_to_column()
genus.pca$x[,1:2] %>% data.frame()
genus.pca$x[,1:2] %>% data.frame() %>% str()
genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column()
genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column(var='site')
genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column(var='site') %>% right_join(class.area)
# Join PCA and HSI data together.
class.area <- genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column(var='site') %>%
right_join(class.area)
View(class.area)
# Plot it.
ggplot(class.area, aes(x=PC1, y=PC2, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5)
# Plot it.
ggplot(class.area, aes(x=PC1, y=PC2, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Plot it.
ggplot(class.area, aes(x=PC1, y=PC2, label=site, size=high)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Plot it.
ggplot(class.area, aes(x=PC1, y=PC2, label=site, size=high)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Plot it.
ggplot(class.area, aes(x=PC1, y=PC2, label=site, size=high)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Make the model.
PC1.x.class <- lm(PC1 ~ high, data=class.area)
# Look at it.
summary(PC1.x.class)
# Look at it.
summary(PC1.x.class)
landscape.edge <- sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_l_te',
shape='circle')
warnings()
View(landscape.edge)
sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_l_contag',
shape='circle')
landscape.edge <- dplyr::select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
landscape.edge <- dplyr::select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(landscape.edge, by=c('rowname'='plot_id'))
landscape.edge
View(sites)
landscape.edge <- sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_l_te',
shape='circle')
landscape.edge
right_join(landscape.edge, by=c('site'='plot_id'))
dplyr::select(sites, site) %>%
right_join(landscape.edge, by=c('site'='plot_id'))
dplyr::select(sites, site) %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(landscape.edge, by=c('rowname'='plot_id'))
dplyr::select(sites, site)
dplyr::select(sites, site) %>% class()
dplyr::select(sites, site) %>% class(site)
landscape.edge %>% mutate(site=sites$site)
# Add PCA data.
landscape.edge <- genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column(var='site') %>%
right_join(landscape edge)
# Add PCA data.
landscape.edge <- genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column(var='site') %>%
right_join(landscape.edge)
landscape.edge
# Amend with site names.
landscape.edge <- landscape.edge %>% mutate(site=sites$site)
# Amend with site names.
landscape.edge
# Add PCA data.
landscape.edge <- genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column(var='site') %>%
right_join(landscape.edge)
# Look at it.
landscape.edge
# Plot it.
ggplot(landscape.edge, aes(x=PC1, y=PC2, label=site, size=value)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Make the model.
PC1.x.edge <- lm(PC1 ~ value, data=landscape.edge)
# Look at it.
summary(PC1.x.edge)
all.metrics <- right_join(class.area, landscape.edge)
all.metrics
View(all.metrics)
# Have a look.
ggplot(all.metrics, aes(x=value, y=high, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Calculate edge.
landscape.edge <- sample_lsm(r.f.hsi, y=sites.sf, size=r.hr.m, what='lsm_l_ed',
shape='circle')
# Amend with site names.
landscape.edge <- landscape.edge %>% mutate(site=sites$site)
# Add PCA data.
landscape.edge <- genus.pca$x[,1:2] %>% data.frame() %>% rownames_to_column(var='site') %>%
right_join(landscape.edge)
# Look at it.
landscape.edge
# Plot it.
ggplot(landscape.edge, aes(x=PC1, y=PC2, label=site, size=value)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Make the model.
PC1.x.edge <- lm(PC1 ~ value, data=landscape.edge)
# Look at it.
summary(PC1.x.edge)
# Stuff everything into one (very messy) object.
all.metrics <- right_join(class.area, landscape.edge)
# Have a look.
ggplot(all.metrics, aes(x=value, y=high, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Have a look.
ggplot(all.metrics, aes(x=value, y=high, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Stuff everything into one (very messy) object.
all.metrics <- right_join(class.area, landscape.edge)
# Have a look.
ggplot(all.metrics, aes(x=value, y=high, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
library(sf)
library(raster)
library(rgdal)
# Import habitat HSI shapefile
n.hsi <- st_read('"C:/Users/gwync/sfuvault/map/external/habitat_model/nesting_sc.shp"')
# Import habitat HSI shapefile
n.hsi <- st_read('C:/Users/gwync/sfuvault/map/external/habitat_model/nesting_sc.shp')
# Set raster extent based on HSI shapefile.
ext <- extent(n.hsi)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
n.hsi.levels <- data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3),
class.name=c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'))
# Populate BEC polygon data onto empty raster grid.
r.n.hsi <- rasterize(n.hsi, r, 'gridcode')
# Add the levels to the raster.
levels(r.n.hsi) <- n.hsi.levels
# Save the raster image.
writeRaster(r.n.hsi, '../data/processed/nesting_sc.tif', format='GTiff')
# Save the raster image.
writeRaster(r.n.hsi, 'C:/Users/gwync/sfuvault/productivity-occupancy/data/processed/nesting_sc.tif', format='GTiff')
# Import the raster.
test <- raster('../data/processed/nesting_sc.tif')
raster(test)
rasterImage(test)
spplot()
spplot(test)
levels(test)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
