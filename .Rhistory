sites.sf <- st_as_sf(sites, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Import BEC raster created previously.
bec <- st_read('../data/processed/new_transition_zone.shp')
# Import BEC raster created previously.
tz <- st_read('../data/processed/new_transition_zone.shp')
ggplot() +
geom_sf(data=tz) +
theme_classic()
# Set raster extent based on BEC shapefile.
ext <- extent(tz)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Populate BEC polygon data onto empty raster grid.
r.tz <- rasterize(tz, r, 'MAP_LABEL')
levels(bec[["MAP_LABEL"]])
r.tz
plot(r.tz)
bec.levels <- data.frame(levels(bec[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
tz.levels <- data.frame(levels(tz[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
# Add them to the raster.
levels(r.tz) <- tz.levels
# Save the raster image.
writeRaster(r.bec, '../data/interim/tz_raster_SC.tif', format='GTiff')
# Save the raster image.
writeRaster(r.tz, '../data/interim/tz_raster_SC.tif', format='GTiff')
# Calculate area per class per site.
class.area <- sample_lsm(tz.raster, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(tz.raster)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=category, values_from=value,
values_fill=list(value=0))
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(tz.raster)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=category, values_from=value,
values_fill=list(value=0))
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=category, values_from=value,
values_fill=list(value=0))
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID'))# %>%
View(class.area)
View(sites.sf)
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle')# %>%
View(class.area)
levels(r.tz)
tz[["MAP_LABEL"]]
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID'))# %>%
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') #%>%
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID'))# %>%
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=class, values_from=value,
values_fill=list(value=0))
# Amend with site names.
class.area <- select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
# Amend with site names.
class.area <- dplyr::select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
View(mammal.mass)
ml.tz <- left_join(mammal.mass, avian.mass)
View(ml.tz)
ml.tz <- left_join(mammal.mass, avian.mass) %>%
left_join(class.area)
# Do some cleaning.
ml.tz dplyr::select()
# Do some cleaning.
ml.tz %>% mutate(amt.tz=sum(1,2))
# Do some cleaning.
ml.tz %>% mutate(amt.tz=sum(1,2), ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, amt.tz)
# Do some cleaning.
ml.tz %>% mutate(amt.tz=sum(1,2), ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
# Do some cleaning.
ml.tz %>% mutate(amt.tz=sum('1', '2'), ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
# Do some cleaning.
ml.tz %>% mutate(amt.tz=sum(6:7), ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
# Do some cleaning.
ml.tz %>% mutate(amt.tz=1+2, ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID')) #%>%
View(class.area)
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=map_label, values_from=value,
values_fill=list(value=0))
# Amend with site names.
class.area <- dplyr::select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
# Join everything together.
ml.tz <- left_join(mammal.mass, avian.mass) %>%
left_join(class.area)
# Do some cleaning.
ml.tz %>% mutate(amt.tz=CWHds1 + CWHms1, ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
# Do some cleaning.
ml.tz <- ml.tz %>% mutate(amt.tz=CWHds1 + CWHms1, ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
ml.tz
plot(ml.tz$ratio)
plot(log(ml.tz$ratio))
hist(log(ml.tz$ratio))
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
ggplot(ml.tz, aes(x=amt.tz, y=log(ratio), label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
ratio.x.tz <- lm(ratio ~ amt.tz, data=ml.tz)
# Look at it.
summary(sq.x.tz)
# Look at it.
summary(ratio.x.tz)
View(ml.tz)
lm(prop.ml ~ amt.tz, data=ml.tz) %>% summary()
lm(prop.av ~ amt.tz, data=ml.tz) %>% summary()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library(tidyverse)
library(landscapemetrics)
library(raster)
library(sf)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
head(items)
# Calculate proportion of mammal biomass per site.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.ml=sum(mass), prop.ml=amount.ml/total) %>%
select(site, prop.ml) %>% distinct()
# Load some libraries.
library(tidyverse)
library(landscapemetrics)
library(raster)
library(sf)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
head(items)
# Calculate proportion of mammal biomass per site.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.ml=sum(mass), prop.ml=amount.ml/total) %>%
select(site, prop.ml) %>% distinct()
# Load some libraries.
library(tidyverse)
library(landscapemetrics)
library(raster)
library(sf)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
head(items)
# Calculate proportion of mammal biomass per site.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.ml=sum(mass), prop.ml=amount.ml/total) %>%
dplyr::select(site, prop.ml) %>% distinct()
mammal.mass
# Calculate proportion of mammal biomass per site.
avian.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Aves') %>%
mutate(amount.av=sum(mass), prop.av=amount.av/total) %>%
dplyr::select(site, prop.av) %>% distinct()
avian.mass
# Import transition zone shapefile.
tz <- st_read('../data/processed/new_transition_zone.shp')
# Look at it.
ggplot() +
geom_sf(data=tz) +
theme_classic()
# Set raster extent based on tz shapefile.
# ext <- extent(tz)
# Make an empty raster to populate with values.
# r <- raster(ext, res=c(100, 100))
# Populate BEC polygon data onto empty raster grid.
# r.tz <- rasterize(tz, r, 'MAP_LABEL')
# Get labels from the original shapefile.
tz.levels <- data.frame(levels(tz[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
# Add them to the raster.
# levels(r.tz) <- tz.levels
# Save the raster image.
# writeRaster(r.tz, '../data/interim/tz_raster_SC.tif', format='GTiff')
# Import data and get centroids for camera nests.
sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Make site table a spatial object and make it UTMs.
sites.sf <- st_as_sf(sites, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=map_label, values_from=value,
values_fill=list(value=0))
# Set raster extent based on tz shapefile.
ext <- extent(tz)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Populate BEC polygon data onto empty raster grid.
r.tz <- rasterize(tz, r, 'MAP_LABEL')
# Get labels from the original shapefile.
tz.levels <- data.frame(levels(tz[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
# Add them to the raster.
levels(r.tz) <- tz.levels
# Save the raster image.
# writeRaster(r.tz, '../data/interim/tz_raster_SC.tif', format='GTiff')
# Import data and get centroids for camera nests.
sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Make site table a spatial object and make it UTMs.
sites.sf <- st_as_sf(sites, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=map_label, values_from=value,
values_fill=list(value=0))
# Amend with site names.
class.area <- dplyr::select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
class.area
# Join everything together.
ml.tz <- left_join(mammal.mass, avian.mass) %>%
left_join(class.area)
# Do some cleaning.
ml.tz <- ml.tz %>% mutate(amt.tz=CWHds1 + CWHms1, ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
ml.tz
# Make the model.
ratio.x.tz <- lm(ratio ~ amt.tz, data=ml.tz)
# Look at it.
summary(ratio.x.tz)
plot(ratio.x.tz)
glm.ratio.x.tz <- glm(ratio ~ amt.tz, data=ml.tz)
summary(glm.ratio.x.tz)
View(items)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load some libraries.
library(tidyverse)
library(landscapemetrics)
library(raster)
library(sf)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
head(items)
# Calculate proportion of mammal biomass per site.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.ml=sum(mass), prop.ml=amount.ml/total) %>%
dplyr::select(site, prop.ml) %>% distinct()
mammal.mass
# Calculate proportion of mammal biomass per site.
avian.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Aves') %>%
mutate(amount.av=sum(mass), prop.av=amount.av/total) %>%
dplyr::select(site, prop.av) %>% distinct()
avian.mass
# Import transition zone shapefile.
tz <- st_read('../data/processed/new_transition_zone.shp')
# Look at it.
ggplot() +
geom_sf(data=tz) +
theme_classic()
# Set raster extent based on tz shapefile.
ext <- extent(tz)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Populate BEC polygon data onto empty raster grid.
r.tz <- rasterize(tz, r, 'MAP_LABEL')
# Get labels from the original shapefile.
tz.levels <- data.frame(levels(tz[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
# Add them to the raster.
levels(r.tz) <- tz.levels
# Save the raster image.
# writeRaster(r.tz, '../data/interim/tz_raster_SC.tif', format='GTiff')
# Import data and get centroids for camera nests.
sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Make site table a spatial object and make it UTMs.
sites.sf <- st_as_sf(sites, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Calculate area per class per site.
class.area <- sample_lsm(r.tz, y=sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with BEC name.
left_join(data.frame(levels(r.tz)), by=c('class'='ID')) %>%
# Reorganize by site.
pivot_wider(id_cols=plot_id, names_from=map_label, values_from=value,
values_fill=list(value=0))
# Amend with site names.
class.area <- dplyr::select(sites, site) %>% rownames_to_column() %>%
mutate(rowname=as.integer(rowname)) %>%
right_join(class.area, by=c('rowname'='plot_id'))
class.area
# Join everything together.
ml.tz <- left_join(mammal.mass, avian.mass) %>%
left_join(class.area)
# Do some cleaning.
ml.tz <- ml.tz %>% mutate(amt.tz=CWHds1 + CWHms1, ratio=prop.ml/prop.av) %>%
dplyr::select(site, name, prop.ml, prop.av, ratio, amt.tz)
ml.tz
# Make the model.
ratio.x.tz <- lm(ratio ~ amt.tz, data=ml.tz)
# Look at it.
summary(ratio.x.tz)
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Make the model.
ratio.x.tz <- lm(ratio ~ amt.tz, data=ml.tz)
# Look at it.
summary(ratio.x.tz)
# Look at it differently.
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Plot it.
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
# Make the model.
ratio.x.tz <- lm(ratio ~ amt.tz, data=ml.tz)
# Look at it.
summary(ratio.x.tz)
plot(ratio.x.tz)
anova(ratio.x.tz)
confint(ratio.x.tz)
pr.ml.tz <- predict(ratio.x.tz)
plot(pr.ml.tz)
mammal.mass
residuals(ratio.x.tz)
residuals(ratio.x.tz) %>% plot()
# Plot it.
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
geom_smooth(method=’lm’, se=FALSE) +
# Plot it.
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
geom_smooth(method='lm', se=FALSE) +
theme_classic()
# Plot it.
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
geom_smooth(method='lm', se=FALSE, color='black') +
theme_classic()
# Plot it.
ggplot(ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
geom_smooth(method='lm', se=FALSE, color='black', linetype='dashed') +
theme_classic()
tz.ml.tz <- ml.tz %>% filter(amt.tz > 1000)
# Pick just the sites with more than 1000 ha of tz-type habitats.
tz.ml.tz <- ml.tz %>% filter(amt.tz > 1000)
# Plot it.
ggplot(tz.ml.tz, aes(x=amt.tz, y=ratio, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
geom_smooth(method='lm', se=FALSE, color='black', linetype='dashed') +
theme_classic()
# And model it.
lm(ratio ~ amt.tz, data=tz.ml.tz) %>% summary()
View(df)
# Load some libraries.
library(tidyverse)
library(landscapemetrics)
library(raster)
library(sf)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv')
source('../src/prey_attributes.R')
head(items)
# Calculate proportion of mammal biomass per site.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.ml=sum(mass), prop.ml=amount.ml/total) %>%
dplyr::select(site, prop.ml) %>% distinct()
mammal.mass
# Calculate proportion of mammal biomass per site.
avian.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Aves') %>%
mutate(amount.av=sum(mass), prop.av=amount.av/total) %>%
dplyr::select(site, prop.av) %>% distinct()
avian.mass
