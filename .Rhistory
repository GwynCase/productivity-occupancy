pivot_wider(names_from=binomial, values_from=count, values_fill=list(count = 0))
# Diversity per nest.
nest.diversity <- plyr::ddply(nest.count, ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Bring in productivity data.
productivity <- read_csv('../data/raw/productivity.csv')
# Make a happy data set for the models to use.
model.data <- productivity %>% mutate(nest=paste(site, year, sep='')) %>%
left_join(nest.diversity, by=c('nest')) %>%
left_join(nest.mass, by=c('nest')) %>%
select(site, year, nest, n.fledge, diet.diversity, Tamiasciurus) %>%
filter_all(all_vars(!is.na(.)))
model.data
# All the data together.
ggplot(model.data, aes(x=Tamiasciurus, y=n.fledge, color=site, shape=as.factor(year))) +
geom_point(size=4) +
theme_classic()
# 2019.
model.data %>% filter(year == 2019) %>%
ggplot(aes(x=Tamiasciurus, y=n.fledge, color=site)) +
geom_point(size=4) +
ylim(0, 3) +
theme_classic()
# 2020.
model.data %>% filter(year == 2020) %>%
ggplot(aes(x=Tamiasciurus, y=n.fledge, color=site)) +
geom_point(size=4) +
ylim(0, 3) +
theme_classic()
# Start with just squirrels.
squirrel.model <- lmer(n.fledge ~ Tamiasciurus + (1|year), data=model.data)
# Look at it.
summary(squirrel.model)
# Look at some diagnostics.
data.frame(predicted=predict(squirrel.model, type='response'),
residuals=residuals(squirrel.model, type='response')) %>%
ggplot(aes(x=predicted, y=residuals)) +
geom_point() +
geom_hline(yintercept=0, linetype='dashed') +
geom_smooth(method='lm', formula='y~x', se=FALSE, color='black') +
theme_classic()
View(old.items)
old.items <- old.items %>% filter(method == 'camera')
View(old.items)
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass))
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(genus) %>%
summarise(genus.mass=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass)
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass))# %>%
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>% view()
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(genus) %>%
summarise(genus.mass=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>% view()
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(genus) %>%
summarise(genus.mass=sum(mass)) %>% view()
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
summarize(genus.mass=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass)
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>% view()
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>% view()
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
summarize(genus.mass=sum(mass)) %>% view()
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass)) %>% view()
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass)
old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass), prop.mass=genus.mass/total.mass) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass, prop.mass)
diet.items
diet.items %>% filter(year == 2019) %>%
group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass), prop.mass=genus.mass/total.mass) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass, prop.mass)
diet.items %>% filter(year == 2019 & source == 'C') %>%
group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass), prop.mass=genus.mass/total.mass) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass, prop.mass)
old <- old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass), prop.mass=genus.mass/total.mass) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass, prop.mass)
new <- diet.items %>% filter(year == 2019 & source == 'C') %>%
group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass), prop.mass=genus.mass/total.mass) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(nest, total.mass, genus.mass, prop.mass)
old
new
ggplot() +
geom_point(data=new, aes(x=nest, y=prop.mass)) +
geom_point(data=old, aes(x=nest, y=prop.mass))
ggplot() +
geom_point(data=new, aes(x=nest, y=prop.mass)) +
geom_point(data=old, aes(x=nest, y=prop.mass)) +
theme_classic()
ggplot() +
geom_point(data=new, aes(x=nest, y=prop.mass), color='red') +
geom_point(data=old, aes(x=nest, y=prop.mass)) +
theme_classic()
ggplot() +
geom_point(data=new, aes(x=nest, y=prop.mass), color='red') +
geom_point(data=old, aes(x=nest, y=prop.mass), color='blue') +
theme_classic()
ggplot() +
geom_point(data=new, aes(x=nest, y=total.mass), color='red') +
geom_point(data=old, aes(x=nest, y=total.mass), color='blue') +
theme_classic()
ggplot() +
geom_point(data=new, aes(x=nest, y=genus.mass), color='red') +
geom_point(data=old, aes(x=nest, y=genus.mass), color='blue') +
theme_classic()
View(old.items)
old.items %>% distinct(genus, species, mass)
diet.items %>% distinct(genus, species, mass)
diet.items %>% filter(source == 'C') %>% distinct(genus, species, mass)
old.items %>% distinct(genus, species, mass)
diet.items %>% filter(source == 'C') %>% distinct(genus, species, mass) %>% print(n=35)
new.mod.dat <- left_join(new, old, productivity, by=c('nest'))
new.mod.dat
new.mod.dat %>% view()
ggplot(data=new.mod.dat) +
geom_point(aes(x=prop.mass.x, y=productivity)) +
theme_classic()
ggplot() +
geom_point(data=new.mod.dat, aes(x=prop.mass.x, y=productivity)) +
theme_classic()
new.mod.dat
View(productivity)
old <- old.items %>% group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass), prop.mass=genus.mass/total.mass) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(site, nest, total.mass, genus.mass, prop.mass)
new <- diet.items %>% filter(year == 2019 & source == 'C') %>%
group_by(nest) %>%
mutate(total.mass=sum(mass)) %>%
group_by(nest, genus) %>%
mutate(genus.mass=sum(mass), prop.mass=genus.mass/total.mass) %>%
filter(genus == 'Tamiasciurus') %>%
distinct(site, nest, total.mass, genus.mass, prop.mass)
new.mod.dat <- select(productivity, site, year, n.fledge) %>%
left_join(., old.items, by=c('site', 'year'))
new.mod.dat
new.mod.dat <- select(productivity, site, year, n.fledge) %>%
left_join(., old, by=c('site', 'year'))
View(old)
new.mod.dat <- select(productivity, site, year, n.fledge) %>%
left_join(., old, by=c('site'))
new.mod.dat
new.mod.dat <- select(productivity, site, year, n.fledge) %>%
filter(year == 2019) %>%
left_join(., old, by=c('site'))
new.mod.dat
new.mod.dat <- select(productivity, site, year, n.fledge) %>%
filter(year == 2019) %>%
left_join(., old, by=c('site')) %>%
left_join(., new, by=c('site'))
new.mod.dat
ggplot() +
geom_point(data=new.mod.dat, aes(x=prop.mass.x, y=productivity)) +
theme_classic()
ggplot() +
geom_point(data=new.mod.at, aes(x=site, y=n.fledge)) +
theme_classic()
ggplot() +
geom_point(data=new.mod.dat, aes(x=site, y=n.fledge)) +
theme_classic()
new.mod.dat %>% view()
ggplot() +
geom_point(data=new.mod.dat, aes(x=site, y=genus.mass.x)) +
theme_classic()
ggplot() +
geom_point(data=new.mod.dat, aes(x=site, y=genus.mass.x)) +
geom_point(data=new.mod.dat, aes(x=site, y=genus.mass.y)) +
theme_classic()
ggplot() +
geom_point(data=new.mod.dat, aes(x=genus.mass.x, y=n.fledge)) +
geom_point(data=new.mod.dat, aes(x=genus.mass.y, y=n.fledge)) +
theme_classic()
ggplot() +
geom_point(data=new.mod.dat, aes(x=genus.mass.x, y=n.fledge), color='blue') +
geom_point(data=new.mod.dat, aes(x=genus.mass.y, y=n.fledge), color='red') +
theme_classic()
model.data
model.data %>% filter(nest != MTF2019) %>% lm(n.fledge ~ Tamiasciurus, data=.)
model.data %>% filter(nest != 'MTF2019') %>% lm(n.fledge ~ Tamiasciurus, data=.)
# Try it without MTF in 2019.
model.data %>% filter(nest != 'MTF2019') %>% lm(n.fledge ~ Tamiasciurus, data=.) %>% summary()
# Try it without MTF in 2020.
model.data %>% filter(nest != 'MTF2019') %>% lm(n.fledge ~ Tamiasciurus, data=.) %>% summary()
# Try it with both.
model.data %>% lm(n.fledge ~ Tamiasciurus, data=.) %>% summary()
# Try it without MTF in 2019.
mod1 <- model.data %>% filter(nest != 'MTF2019') %>% lm(n.fledge ~ Tamiasciurus, data=.) %>% summary()
# Try it without MTF in 2020.
mod2 <- model.data %>% filter(nest != 'MTF2019') %>% lm(n.fledge ~ Tamiasciurus, data=.) %>% summary()
# Try it with both.
mod3 <- model.data %>% lm(n.fledge ~ Tamiasciurus, data=.) %>% summary()
data.frame(name=c('mod1', 'mod2', 'mod3'),
model=c(mod1, mod2, mod3))
as.data.frame(name=c('mod1', 'mod2', 'mod3'),
model=c(mod1, mod2, mod3))
tibble(name=c('mod1', 'mod2', 'mod3'),
model=c(mod1, mod2, mod3))
tribble(~name, ~model,
'mod1', mod1)
# Try it without MTF in 2019.
mod1 <- model.data %>% filter(nest != 'MTF2019') %>% lm(n.fledge ~ Tamiasciurus, data=.)
# Try it without MTF in 2020.
mod2 <- model.data %>% filter(nest != 'MTF2019') %>% lm(n.fledge ~ Tamiasciurus, data=.)
# Try it with both.
mod3 <- model.data %>% lm(n.fledge ~ Tamiasciurus, data=.)
tribble(~name, ~model,
'mod1', mod1,
'mod2', mod2,
'mod3', mod3)
mods <- tribble(~name, ~model,
'mod1', mod1,
'mod2', mod2,
'mod3', mod3)
mods %>% mutate(gl=map(model, glance))
mods %>% mutate(gl=map(model, glance)) %>% unnest(gl)
mods %>% mutate(gl=map(model, tidy)) %>% unnest(gl)
mods %>% mutate(gl=map(model, glance), td=map(model, tidy))
mods %>% mutate(gl=map(model, glance), td=map(model, tidy)) %>%
unnest(gl)
mods %>% mutate(gl=map(model, glance), td=map(model, tidy)) %>%
unnest(gl) %>%
unnest(td)
mods %>% mutate(gl=map(model, glance), td=map(model, tidy)) %>%
unnest(gl) %>%
unnest(td, names_repair='universal')
mods %>% mutate(gl=map(model, glance), td=map(model, tidy)) %>%
unnest(gl) %>%
unnest(td, names_repair='universal') %>% view()
mods %>% unnest(gl)
# Calculate some stuff.
mods <- mods %>% mutate(gl=map(model, glance), td=map(model, tidy))
# Look at them.
mods %>% unnest(gl)
mods %>% unnest(td)
model.data %>% filter(year == 2019) %>% lm(n.fledge ~ Tamiasciurus, data=.)
model.data %>% filter(year == 2019) %>% lm(n.fledge ~ Tamiasciurus, data=.) %>% summary()
mods %>% unnest(td) %>% arrange(term, name)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(lubridate)
# Get a list of all the camera data files.
file.list <- list.files(path='../data/raw', pattern='photos', full.names=TRUE)
# Open all the files in the list and add to a data frame.
df <- file.list %>% map(read_csv, col_types = cols(.default = "c")) %>%
bind_rows()
# Try to fix all of the different datetime formats.
df$datetime <- parse_date_time(df$datetime, c('ymd HMS', 'mdy HMS', 'dmy HMS', 'mdy HM'))
# Typos in the "interest" column.
df %>% distinct(interest)
# Fix the two typos in 'interest'.
df <- df %>% mutate(interest=case_when(
interest == 'Delivery' ~ 'delivery',
interest == 'preu' ~ 'prey',
TRUE ~ interest
))
# Typos in 'class'?
df %>% distinct(class)
# Replace Us with Unknown.
df <- df %>% mutate(class=case_when(
class == 'U' ~ 'Unknown',
TRUE ~ class
))
# Typos in 'order'?
df %>% distinct(order)
df <- df %>% mutate(order=case_when(
order == 'Passerofprmes' ~ 'Passeriformes',
order == 'Passiformes' ~ 'Passeriformes',
order == 'U' ~ 'Unknown',
TRUE ~ order
))
df %>% distinct(family)
# Fix the typos in 'family.'
df <- df %>% mutate(family=case_when(
family == 'Sciruidae' ~ 'Sciuridae',
family == 'Lepus' ~ 'Leporidae',
family == 'Dendragapus' ~ 'Phasianidae',
family == 'Neotoma' ~ 'Cricetidae',
family == 'U' ~ 'Unknown',
TRUE ~ family
))
# Typos in 'genus'?
df %>% distinct(genus)
# What's the squirrel?
df %>% filter(genus == 'Tamias') %>% select(genus, species)
# What's the squirrel?
df %>% filter(genus == 'Tamias') %>% select(genus, species)
# What's the grouse?
df %>% filter(genus == 'Phasianidae') %>% select(genus, species)
# Fix the typos.
df <- df %>% mutate(genus=case_when(
genus == 'Tamasciurus' ~ 'Tamiasciurus',
genus == 'Tamasciuris' ~ 'Tamiasciurus',
genus == 'Leuconotopicus' ~ 'Dryobates',
genus == 'Turdidae' ~ 'Turdus',
genus == 'Patagoienas' ~ 'Patagioenas',
genus == 'Leporidae' ~ 'Lepus',
genus == 'Tamias' ~ 'Neotamias',
genus == 'Phasianidae' ~ 'Dendragapus',
genus == 'Cricetidae' ~ 'Neotoma',
genus == 'Drycopus' ~ 'Dryocopus',
genus == 'U' ~ 'Unknown',
TRUE ~ genus
))
# Typos in species?
df %>% distinct(species)
# Fix the typos in 'species'.
df <- df %>% mutate(species=case_when(
species == 'fulignosus' ~ 'fuliginosus',
genus == 'Sorex' ~ 'sp',
genus == 'Myotis' ~ 'sp',
species == 'spp' ~ 'sp',
species == 'U' ~ 'unknown',
TRUE ~ species
))
# How about common names?
df %>% distinct(common)
# Make everything lowercase.
df$common <- df$common <- str_to_lower(df$common)
# Split on the periods to make separate words.
df$common <- gsub('\\.', ' ', df$common)
# Find the problem children.
df %>% filter(common == 'm') %>% select(genus, species, common)
# Fix the typos.
df <- df %>% mutate(common=case_when(
common == 'bad-tailed pigeon' ~ 'band-tailed pigeon',    # HAHAHAHA I love this one!
common == 'chimpunk' ~ 'chipmunk',
common == 'northern flying squirrel' ~ 'flying squirrel',
common == 'stellers jay' ~ 'steller\'s jay',
common == 'swainsons thrush' ~ 'swainson\'s thrush',
common == 'townsends chipmunk' ~ 'townsend\'s chipmunk',
common == 'm' & species == 'douglasii' ~ 'douglas squirrel',
common == 'm' & genus == 'Rattus' ~ 'rat',
genus == 'Sorex' ~ 'shrew',
genus == 'Myotis' ~ 'bat',
common == 'u' ~ 'unknown',
TRUE ~ common
))
# Lastly, see if anything is wonky in 'size'.
df %>% distinct(size)
# Bring in a list of all known prey.
prey.list <- read_csv('../data/interim/prey_attributes.csv')
# Join the camera data to the list of diet items.
df <- prey.list %>% select(order.list=order, genus, species, common) %>%
right_join(df, by=c('genus', 'species', 'common')) %>%
arrange(site, datetime) %>%
mutate(order=case_when(
is.na(order) ~ order.list,
TRUE ~ order
))
df %>% select(class, order, family, genus, species, common) %>% distinct() %>%
arrange(class, order, family, genus, species, common)
# Fill in the last typos.
df <- df %>% mutate(family=case_when(
genus == 'Turdus' & is.na(family) ~ 'Turdidae',
TRUE ~ family
),
order=case_when(
genus == 'Lepus' ~ 'Lagomorpha',
TRUE ~ order
))
# Fill in the NAs.
df <- df %>% mutate_at(c('order', 'family', 'genus'), funs(case_when(
is.na(.) & class != 'Unknown' ~ 'Unknown',
TRUE ~ .
)))
df <- df %>% mutate(species=case_when(
genus == 'Tamiasciurus' & species == 'unknown' ~ 'douglasii',
genus == 'Neotamias' & species == 'townsendii' ~ 'sp',
genus == 'Turdus' & species == 'unknown' ~ 'migratorius',
family == 'Phasianidae' & species == 'unknown' ~ 'fuliginosus',
TRUE ~ species
),
genus=case_when(
family == 'Phasianidae' & species == 'fuliginosus' ~ 'Dendragapus',
TRUE ~ genus
),
common=case_when(
genus == 'Tamiasciurus' & species == 'douglasii' ~ 'douglas squirrel',
genus == 'Neotamias' ~ 'chipmunk',
genus == 'Turdus' ~ 'american robin',
genus == 'Dendragapus' ~ 'sooty grouse',
TRUE ~ common
))
df %>% select(class, order, family, genus, species, common, size) %>% distinct() %>%
arrange(class, order, family, genus, species, common, size)
# Are the small grouse chicks?
df %>% filter(family == 'Phasianidae' & size == 'S')
# Yes. Leave them alone.
# And the steller's jays?
df %>% filter(genus == 'Cyanocitta' & size == 'S')
# Yes, also juveniles.
# Robins?
df %>% filter(genus == 'Turdus' & size == 'S')
# Yes, also juveniles.
# Woodrats?
df %>% filter(genus == 'Neotoma' & size == 'S')
# No, that's a typo, should be M.
# Rats?
df %>% filter(genus == 'Rattus' & species == 'sp')
# Change from unknown rat to mountain beaver.
df <- df %>%
mutate(family=case_when(genus == 'Rattus' & !is.na(comments) & size == 'L' ~ 'Aplodontiidae',
TRUE ~ family),
genus=case_when(genus == 'Rattus' & !is.na(comments) & size == 'L' ~ 'Aplodontia',
TRUE ~ genus),
species=case_when(genus == 'Aplodontia' & !is.na(comments) & size == 'L' ~ 'rufa',
TRUE ~ species),
common=case_when(genus == 'Aplodontia' & !is.na(comments) & size == 'L' ~ 'mountain beaver',
TRUE ~ common))
# Let's keep going.
# What's up with the unsized squirrel?
df %>% filter(genus == 'Tamiasciurus' & is.na(size))
# Just a typo.
# Ok, let's fix all of these.
df <- df %>% mutate(size=case_when(
genus == 'Catharus' ~ 'S',
species == 'pubescens' ~ 'S',
species == 'villosus' ~ 'M',
genus == 'Lepus' & is.na(size) ~ 'L',
genus == 'Neotoma' ~ 'M',
genus == 'Rattus' ~ 'M',
genus == 'Neotamias' ~ 'S',
genus == 'Tamiasciurus' & is.na(size) ~ 'M',
TRUE ~ size
))
# Mark things with 'juvenile' in the comments as J, otherwise U for unknown.
df <- df %>% mutate(age=case_when(
str_detect(comments, 'juv|Juv') ~ 'J',
str_detect(comments, 'baby|Baby') & !is.na(class) ~ 'J',
TRUE ~ 'U'
))
# And one last check.
df %>% select(class, order, family, genus, species, common, size) %>% distinct() %>%
arrange(class, order, family, genus, species, common, size)
df
# Tidy up the data set.
df <- df %>% select(filename, serial, datetime,
site, interest, live.chicks,
class, order, family, genus, species, common,
size, age, comments, sex) %>%
arrange(site, datetime)
df %>% group_by(site, year(datetime))
df %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=min(datetime), n=n())
df %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), n=n())
df %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), length=difftime(first, last), n=n())
df %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), length=difftime(first, last), n=n()) %>% view()
df %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), length=difftime(first, last), n=n()) %>%
arrange(year, site) %>% view()
df %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), length=difftime(first, last), n=n()) %>%
arrange(year(datetime), site) %>% view()
df %>% group_by(site, year=year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), length=difftime(first, last), n=n()) %>%
arrange(year, site) %>% view()
df %>% group_by(site, year=year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), length=difftime(last, first), n=n()) %>%
arrange(year, site) %>% view()
