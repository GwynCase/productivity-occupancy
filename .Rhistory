occupancy.by.hsi.edge.density,
occupancy.by.hsi.contagion,
occupancy.by.proportion.suitable,
occupancy.by.suitable.edge.density)
# Make the models so we can have some p-values. THESE ARE WITH RECONSTRUCTED DATA
original.by.bec.diversity <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ bec.diversity, data=.x,
family=binomial(logit)))
original.by.proportion.cover.mature <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ proportion.cover.mature, data=.x,
family=binomial(logit)))
original.by.cover.edge.density <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ cover.edge.density, data=.x,
family=binomial(logit)))
original.by.cover.contagion <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ cover.contagion, data=.x,
family=binomial(logit)))
original.by.cover.diversity <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ cover.diversity, data=.x,
family=binomial(logit)))
original.by.cover.richness <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ cover.richness, data=.x,
family=binomial(logit)))
original.by.cover.evenness <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ cover.evenness, data=.x,
family=binomial(logit)))
original.by.gap.edge.density <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ gap.edge.density, data=.x,
family=binomial(logit)))
original.by.canopy.cover <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ canopy.high, data=.x,
family=binomial(logit)))
original.by.hsi.edge.density <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ hsi.edge.density, data=.x,
family=binomial(logit)))
original.by.hsi.contagion <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ hsi.contagion, data=.x,
family=binomial(logit)))
original.by.proportion.suitable <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ proportion.suitable, data=.x,
family=binomial(logit)))
original.by.suitable.edge.density <- original.data %>%
split(.$size) %>%
map(~glm(cbind(years.detect, years.no.detect) ~ suitable.edge.density, data=.x,
family=binomial(logit)))
# Bind it all together.
original.occupancy.models <- c(original.by.bec.diversity,
original.by.proportion.cover.mature,
original.by.cover.edge.density,
original.by.cover.contagion,
original.by.cover.diversity,
original.by.cover.evenness,
original.by.cover.richness,
original.by.gap.edge.density,
original.by.canopy.cover,
original.by.hsi.edge.density,
original.by.hsi.contagion,
original.by.proportion.suitable,
original.by.suitable.edge.density)
# Get the p-values.
occupancy.models %>% map(tidy) %>%
bind_rows(.id='size') %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.05 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
)) %>%
filter(term != '(Intercept)') %>%
select(size, sig, term) %>%
filter(sig <= 0.2) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(term, PFA, `breeding area`, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
# Get the significant terms and their standardized effect sizes.
new.sig <- occupancy.models %>% map(tidy) %>%
bind_rows(.id='size') %>%
filter(p.value >= 0.05) %>%
filter(term != '(Intercept)')
occupancy.models %>%
map(lm.beta) %>%
bind_rows(.id='size') %>%
pivot_longer(!size, names_to='term', values_to='coef') %>%
drop_na() %>%
anti_join(new.sig, by=c('size', 'term')) %>%
pivot_wider(names_from=size, values_from=coef) %>%
select(term, PFA, `breeding area`, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
# Get the p-values.
original.occupancy.models %>% map(tidy) %>%
bind_rows(.id='size') %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value <= 0.05 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
)) %>%
filter(term != '(Intercept)') %>%
select(size, sig, term) %>%
filter(sig <= 0.1) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(term, PFA, `breeding area`, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
old.sig <- original.occupancy.models %>% map(tidy) %>%
bind_rows(.id='size') %>%
filter(p.value >= 0.05) %>%
filter(term != '(Intercept)')
original.occupancy.models %>%
map(lm.beta) %>%
bind_rows(.id='size') %>%
pivot_longer(!size, names_to='term', values_to='coef') %>%
drop_na() %>%
anti_join(old.sig, by=c('size', 'term')) %>%
pivot_wider(names_from=size, values_from=coef) %>%
select(term, PFA, `breeding area`, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
ggplot(data) +
geom_histogram(aes(x=years.surveyed), binwidth=1, color='white', fill='darkolivegreen3') +
labs(title='New dataset') +
theme_classic()
ggplot(original.data) +
geom_histogram(aes(x=years.surveyed), binwidth=1, color='white', fill='coral3') +
labs(title='Reconstructed dataset') +
theme_classic()
ggplot(data, aes(x=years.detect, y=years.no.detect)) +
geom_point(color='darkolivegreen3', position='jitter') +
xlim(0, 6) +
labs(title='New dataset') +
theme_classic()
ggplot(original.data, aes(x=years.detect, y=years.no.detect)) +
geom_point(color='coral3', position='jitter') +
labs(title='Reconstructed dataset') +
xlim(0, 6) +
theme_classic()
vars <- data %>% select(bec.diversity, cover.diversity, cover.evenness, cover.richness, gap.edge.density, proportion.suitable, suitable.edge.density) %>% names()
# Bring in a list of nests and calculate a centroid for each territory.
centroids <- read_csv('../data/processed/sc_nests.csv') %>%
group_by(site) %>%
mutate(mean.x=mean(xcoord), mean.y=mean(ycoord)) %>%
distinct(site, name, mean.x, mean.y)
# Make it spatial.
centroids.sf <- centroids %>% rename(xcoord=mean.x, ycoord=mean.y)
centroids.sf <- centroids.sf %>% st_as_sf(coords=c('xcoord', 'ycoord')) %>%
st_set_crs('+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs')
# Define some radii.
hr <- 3477.8982
mr <- 7046.7256
# Load suitable habitat raster.
r.suitable <- raster('../data/processed/foraging_sc_suitable.tif')
# Define levels.
suitable.levels <- data.frame(ID=c(0, 4),
class.name=c('unsuitable', 'suitable'))
# Add to the raster.
levels(r.suitable) <- suitable.levels
# Pull one site.
gmt <- centroids.sf %>% filter(site == 'GMT')
# Convert to polygon with max range radius.
gmt.mr <- st_buffer(gmt$geometry, mr) %>% st_sf()
# Also make a smaller one with home range radius.
gmt.hr <- st_buffer(gmt$geometry, hr) %>% st_sf()
# Crop raster to larger extent.
gmt.suitable <- crop(r.suitable, gmt.mr)
# Plot it.
raster::as.data.frame(gmt.suitable, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=foraging_sc_suitable_class.name)) +
geom_sf(data=gmt.hr, fill=NA) +
labs(title='Granite Mountain suitable habitat (home range)') +
theme_void()
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=proportion.suitable), binwidth=10, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset') +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=proportion.suitable), binwidth=10, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Reconstructed dataset') +
theme_classic()
data %>% filter(proportion.suitable < 10 & size == 'breeding area')
occupancy.by.proportion.suitable %>% map(tidy)
original.by.proportion.suitable %>% map(tidy)
# Load landcover raster.
r.landcover <- raster('../data/processed/vri_sc_all-sites.tif')
# Define levels.
landcover.levels <- data.frame(ID=0:11, class.name=
c('undefined', 'rock', 'ocean', 'freshwater',
'alpine', 'wetland',
'shrub', 'deciduous', 'regen',
'young', 'mature', 'old'))
# Add to the raster.
levels(r.landcover) <- landcover.levels
# Crop raster to larger extent.
gmt.landcover <- crop(r.landcover, gmt.mr)
# Plot it.
raster::as.data.frame(gmt.landcover, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=vri_sc_all.sites_class.name)) +
geom_sf(data=gmt.hr, fill=NA) +
labs(title='Granite Mountain landcover (home range)') +
theme_void()
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.diversity), binwidth=0.1, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset - Landcover diversity') +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.diversity), binwidth=0.1, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Reconstructed dataset - Landcover diversity') +
theme_classic()
occupancy.by.cover.diversity %>% map(tidy)
original.by.cover.diversity %>% map(tidy)
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.evenness), binwidth=0.1, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset - Landcover evenness') +
ylim(0, 25) +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.evenness), binwidth=0.1, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Reconstructed dataset - Landcover evenness') +
ylim(0, 25) +
theme_classic()
occupancy.by.cover.evenness %>% map(tidy)
original.by.cover.evenness %>% map(tidy)
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.richness), binwidth=0.5, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset - Landcover richness') +
ylim(0, 45) +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.richness), binwidth=0.5, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Reconstructed dataset - Landcover richness') +
ylim(0, 45) +
theme_classic()
occupancy.by.cover.richness %>% map(tidy)
original.by.cover.richness %>% map(tidy)
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.contagion), binwidth=5, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset - Landcover contagion') +
ylim(0, 20) +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=cover.contagion), binwidth=5, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Reconstructed dataset - Landcover contagion') +
ylim(0, 20) +
theme_classic()
occupancy.by.cover.contagion %>% map(tidy)
original.by.cover.contagion %>% map(tidy)
# Load gap raster.
r.gaps <- raster('../data/processed/gaps_sc_100.tif')
# Define levels.
gap.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'gap'))
# Add to the raster.
levels(r.gaps) <- gap.levels
# Clip raster to larger extent.
gmt.gaps <- crop(r.gaps, gmt.mr)
# Plot it.
raster::as.data.frame(gmt.gaps, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=gaps_sc_100_class.name)) +
geom_sf(data=gmt.hr, fill=NA) +
labs(title='Granite Mountain gaps (home range)') +
theme_void()
# Pull out another site.
mtc <- centroids.sf %>% filter(site == 'MTC')
# Make a maximum range polygon.
mtc.mr <- st_buffer(mtc$geometry, mr) %>% st_sf()
# And a home range polygon.
mtc.hr <- st_buffer(mtc$geometry, hr) %>% st_sf()
# Clip raster to larger extent.
mtc.gaps <- crop(r.gaps, mtc.mr)
# Plot it.
raster::as.data.frame(mtc.gaps, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=gaps_sc_100_class.name)) +
geom_sf(data=mtc.hr, fill=NA) +
labs(title='Mount Currie gaps (home range)') +
theme_void()
# Plot it.
raster::as.data.frame(mtc.gaps, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=gaps_sc_100_class.name)) +
geom_sf(data=mtc.mr, fill=NA) +
labs(title='Mount Currie gaps (maximum range)') +
theme_void()
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=gap.edge.density), binwidth=5, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset - Gap edge density') +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=gap.edge.density), binwidth=5, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Original dataset - Gap edge density') +
theme_classic()
occupancy.by.gap.edge.density %>% map(tidy)
original.by.gap.edge.density %>% map(tidy)
# Plot it.
raster::as.data.frame(gmt.suitable, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=foraging_sc_suitable_class.name)) +
geom_sf(data=gmt.hr, fill=NA) +
labs(title='Granite Mountain suitable habitat (home range)') +
theme_void()
# Load suitable habitat raster.
r.hsi <- raster('../data/processed/foraging_sc.tif')
# Define levels.
hsi.levels <- data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3),
class.name=c('ocean', 'freshwater', 'river',
'nil', 'low', 'moderate', 'high'))
# Add to the raster.
levels(r.hsi) <- hsi.levels
# Clip raster to larger extent.
gmt.hsi <- crop(r.hsi, gmt.mr)
# Plot it.
raster::as.data.frame(gmt.hsi, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=foraging_sc_class.name)) +
geom_sf(data=gmt.hr, fill=NA) +
labs(title='Granite Mountain HSI (home range)') +
theme_void()
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=suitable.edge.density), binwidth=5, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset - Suitable habitat edge density') +
ylim(0, 20) +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=suitable.edge.density), binwidth=5, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Reconstructed dataset - Suitable habitat edge density') +
ylim(0, 20) +
theme_classic()
occupancy.by.suitable.edge.density %>% map(tidy)
original.by.suitable.edge.density %>% map(tidy)
# Load mature cover raster.
r.older <- raster('../data/processed/older_sc_100.tif')
# Define levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to the raster.
levels(r.older) <- older.levels
# Clip raster to larger extent.
gmt.older <- crop(r.older, gmt.mr)
# Plot it.
raster::as.data.frame(gmt.older, xy=TRUE) %>%
ggplot() +
geom_raster(aes(x=x, y=y, fill=older_sc_100_class.name)) +
geom_sf(data=gmt.hr, fill=NA) +
labs(title='Granite Mountain older forest cover (home range)') +
theme_void()
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=proportion.cover.mature), binwidth=5, color='white', fill='darkolivegreen3') +
facet_wrap(~size) +
labs(title='New dataset - Proportion mature forest cover') +
ylim(0, 10) +
theme_classic()
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range')))) +
geom_histogram(aes(x=proportion.cover.mature), binwidth=5, color='white', fill='coral3') +
facet_wrap(~size) +
labs(title='Reconstructed dataset - Proportion mature forest cover') +
ylim(0, 10) +
theme_classic()
occupancy.by.proportion.cover.mature %>% map(tidy)
original.by.proportion.cover.mature %>% map(tidy)
cover.vars <- data %>% select(cover.diversity, cover.evenness, cover.richness) %>% names()
data %>% select(site, size, cover.vars) %>%
pivot_longer(!c(site, size), names_to='variable', values_to='value') %>%
mutate(var=paste(size, variable)) %>%
select(site, value, var) %>%
pivot_wider(names_from=var, values_from=value) %>%
select(-site) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5)
# Shape the data into a correlation-ready format.
vars <- data %>% select(proportion.cover.mature, cover.diversity, cover.contagion, gap.edge.density, proportion.suitable, suitable.edge.density) %>%
names()
data %>% select(site, size, vars) %>%
pivot_longer(!c(site, size), names_to='variable', values_to='value') %>%
mutate(var=paste(size, variable)) %>%
select(site, value, var) %>%
pivot_wider(names_from=var, values_from=value) %>%
select(-site) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5)
View(data)
ggplot(data, aes(proportion.cover.mature, quality.index)) +
geom_point() +
theme_classic()
ggplot(data, aes(proportion.cover.mature, quality.index)) +
geom_point() +
labs(title='Proportion mature forest cover')
ggplot(data, aes(proportion.cover.mature, quality.index)) +
geom_point() +
labs(title='Proportion mature forest cover') +
theme_classic()
ggplot(data, aes(proportion.suitable, quality.index)) +
geom_point() +
labs(title='Proportion mature forest cover') +
theme_classic()
ggplot(original.data, aes(proportion.cover.mature, quality.index)) +
geom_point('coral3') +
labs(title='New dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
ggplot(data, aes(proportion.suitable, quality.index)) +
geom_point() +
labs(title='Proportion mature forest cover') +
theme_classic()
ggplot(data, aes(proportion.cover.mature, quality.index)) +
geom_point('darkolivegreen3') +
labs(title='New dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
ggplot(data, aes(proportion.cover.mature, quality.index)) +
geom_point('darkolivegreen3') +
labs(title='New dataset - Proportion mature forest cover') +
theme_classic() #+
ggplot(data, aes(proportion.cover.mature, quality.index)) +
geom_point(color='darkolivegreen3') +
labs(title='New dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
ggplot(original.data, aes(proportion.cover.mature, quality.index)) +
geom_point(color='coral3') +
labs(title='New dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
# Proportion mature canopy cover.
ggplot(data, aes(proportion.cover.mature, quality.index)) +
geom_point(color='darkolivegreen3') +
labs(title='New dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
ggplot(original.data, aes(proportion.cover.mature, quality.index)) +
geom_point(color='coral3') +
labs(title='Reconstructed dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
ggplot(data, aes(proportion.suitable, quality.index)) +
geom_point(color='darkolivegreen3') +
labs(title='New dataset - Proportion suitable habitat') +
theme_classic() +
facet_wrap(~size)
ggplot(original.data, aes(proportion.suitable, quality.index)) +
geom_point(color='coral3') +
labs(title='Reconstructed dataset - Proportion suitable habitat') +
theme_classic() +
facet_wrap(~size)
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range'))), aes(proportion.suitable, quality.index)) +
geom_point(color='darkolivegreen3') +
labs(title='New dataset - Proportion suitable habitat') +
theme_classic() +
facet_wrap(~size)
# Proportion mature canopy cover.
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range'))), aes(proportion.cover.mature, quality.index)) +
geom_point(color='darkolivegreen3') +
labs(title='New dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range'))), aes(proportion.cover.mature, quality.index)) +
geom_point(color='coral3') +
labs(title='Reconstructed dataset - Proportion mature forest cover') +
theme_classic() +
facet_wrap(~size)
ggplot(transform(data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range'))), aes(proportion.suitable, quality.index)) +
geom_point(color='darkolivegreen3') +
labs(title='New dataset - Proportion suitable habitat') +
theme_classic() +
facet_wrap(~size)
ggplot(transform(original.data,
size=factor(size, levels=c('PFA', 'breeding area', 'home range', 'maximum range'))), aes(proportion.suitable, quality.index)) +
geom_point(color='coral3') +
labs(title='Reconstructed dataset - Proportion suitable habitat') +
theme_classic() +
facet_wrap(~size)
