filter(nest != 'TCR2019') %>%
ggplot(aes(x=factor(radius), y=hsi.interspersion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Contagions of HSI classes', caption='Contagion captures the mixing and clumping of classes. IJI is another very similar metric.')
# Interspersion of HSI.
select(hsi.landscape.metrics, nest, radius, hsi.contagion) %>%
filter(nest != 'TCR2019') %>%
ggplot(aes(x=factor(radius), y=hsi.contagion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Contagions of HSI classes', caption='Contagion captures the mixing and clumping of classes. IJI is another very similar metric.')
View(landcover.landscape.metrics)
View(data)
View(hsi.landscape.metrics)
# Richness of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.richness) %>%
ggplot(aes(x=factor(radius), y=bec.richness, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Richness density of forest types',
caption='Patch richness density controls for plot size. Alternately, absolute richness could be used.')
data %>% filter(size == 'PFA') %>%
select(-site, -nest, -year, -radius, -size, -mature, -old, -rock, -young, -shrub, -regen, -deciduous,
-freshwater, -undefined, -ocean, -hsi.freshwater, -hsi.ocean, -hsi.river,
-diet.diversity, -proportion.squirrel, -n.fledglings, -nil, -moderate, -high, -low, -area) %>%
select(amount.suitable, starts_with(hsi))
data %>% filter(size == 'PFA') %>%
select(-site, -nest, -year, -radius, -size, -mature, -old, -rock, -young, -shrub, -regen, -deciduous,
-freshwater, -undefined, -ocean, -hsi.freshwater, -hsi.ocean, -hsi.river,
-diet.diversity, -proportion.squirrel, -n.fledglings, -nil, -moderate, -high, -low, -area) %>%
select(amount.suitable, starts_with('hsi'))
data %>% filter(size == 'PFA') %>%
select(-site, -nest, -year, -radius, -size, -mature, -old, -rock, -young, -shrub, -regen, -deciduous,
-freshwater, -undefined, -ocean, -hsi.freshwater, -hsi.ocean, -hsi.river,
-diet.diversity, -proportion.squirrel, -n.fledglings, -nil, -moderate, -high, -low, -area) %>%
select(amount.suitable, starts_with('hsi')) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5)
date1 <- '2020-06-12'
library(lubridate)
date1 <- date('2020-06-12')
date1
class(date1)
date1 <- ymd('2020-06-12')
class(date1)
date1 <- ymd_hms('2020-06-12 12:01:25')
class(date1)
date2 <- ymd_hms('2020-06-25 10:16:12')
median(date1, date2)
data.frame(id=c('A', 'B', 'C'),
T1=c(ymd_hms('2020-06-12 12:01:25'), ymd_hms('2020-06-25 10:16:12'), ymd_hms('2020-05-23 8:2:15')),
T2=c(ymd_hms('2020-06-14 12:01:25'), ymd_hms('2020-06-27 10:16:12'), ymd_hms('2020-05-25 8:2:15'))
)
df <- data.frame(id=c('A', 'B', 'C'),
T1=c(ymd_hms('2020-06-12 12:01:25'), ymd_hms('2020-06-25 10:16:12'), ymd_hms('2020-05-23 8:2:15')),
T2=c(ymd_hms('2020-06-14 12:01:25'), ymd_hms('2020-06-27 10:16:12'), ymd_hms('2020-05-25 8:2:15'))
)
df
df[2,2]
df[2,3]
median(df[2,2], df[2,3])
mean(df[2,2], df[2,3])
mean(df[2,2], df[2,3], trim=1)
df %>% mutate(med=median(T1, T2))
library(tidyverse)
df %>% mutate(med=median(T1, T2))
df %>% rowwise() %>%
mutate(med=median(T1, T2))
df %>% rowwise() %>%
mutate(med=summarize(median(T1, T2)))
mutate(med=(median(T1, T2))
df %>% rowwise() %>%
df %>% rowwise() %>%
mutate(med=median(T1, T2))
df %>% rowwise() %>%
mutate(med=mean(T1, T2))
df %>% rowwise() %>%
mutate(med=mean(T1, T2, trim=1))
df %>% rowwise() %>%
mutate(med=meanDate(T1, T2))
df %>% rowwise() %>%
mutate(med=mean.Date(T1, T2))
df %>% rowwise() %>%
mutate(med=mean.Date(T1, T2, trim=1))
df %>% mutate(med=T2-T2)
df %>% mutate(med=T2-T1)
df %>% mutate(med=(T2-T1)/2)
df %>% mutate(med_dif=(T2-T1)/2) %>%
mutate(med=T2 + med_dif)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(raster)
library(sf)
library(landscapemetrics)
library(vegan)
library(AICcmodavg)
library(lubridate)
library(vegan)
library(broom)
library(knitr)
library(kableExtra)
library(ggplot2)
library(rnaturalearth)
library(rgeos)
library(GGally)
library(ggridges)
library(stringr)
# Load in camera sites from 2019 and 2020.
camera.sites.2019 <- read_csv('../data/raw/camera_nests_2019.csv')
camera.sites.2020 <- read_csv('../data/raw/camera_nests_2020.csv')
# Join together to get total camera site set.
camera.sites <- bind_rows(camera.sites.2019, camera.sites.2020) %>% mutate(method='camera + remains')
# Temporarily, use just 2019 data.
# camera.sites <- camera.sites.2019 %>% mutate(method='camera')
# Load in remains sites from 2019 and 2020.
remains.sites.2019 <- read_csv('../data/interim/remains_sites_2019.csv')
# remains.sites.2020 <- read_csv('../data/raw/remains_sites_2020.csv')
# Join them together to get total remains site set.
# remains.sites <- bind_rows(remains.sites.2019, remains.sites.2020) %>% mutate(method='rem')
# Temporarily, use just 2019 data.
remains.sites <- remains.sites.2019 %>% mutate(method='remains only')
# Join them together for the full site set.
sites <- bind_rows(camera.sites, remains.sites) %>%
arrange(year, site, desc(method == 'camera + remains')) %>%
distinct(nest, .keep_all=TRUE)
# Make site table a spatial object and make it UTMs.
sites.sf <-sites %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# For now, also make a spatial object of camera sites only.
cameras.sf <-camera.sites.2019 %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# How many sites in each category for each year?
# Note that "cam" really means both cameras and remains, since all camera sites have remains but not all remains sites have cameras.
sites %>% group_by(year, method) %>%
summarize(`number of sites`=n()) %>% kable() %>%
kable_styling()
# Start with numbers from the literature on Vancouver Island.
# Area is in hectares.
landscape <- data.frame(
size=c('PFA', 'breeding area', 'breeding home range'),
area=c(60, 175, 3800)
)
# Convert area in hectares to radii in meters.
landscape <- landscape %>% mutate(radius=sqrt(area*10000/pi))
# As an additional, larger size, use the maximum distance birds are observed to travel, using telemetry data.
# Load in the telemetry data.
telemetry <- read_csv('../data/processed/telemetry_2018-2019.csv') %>%  drop_na('lat')
# Convert telemetry data to a spatial object.
telemetry <- st_as_sf(telemetry, coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Define the dates of the breeding season.
# Incubation starts about April 15 and fledglings leave the nest area around September 1.
# These dates come from Vancouver Island again.
breeding.2018 <- interval(ymd(20180415), ymd(20180901))
breeding.2019 <- interval(ymd(20190415), ymd(20190901))
# Which birds are males?
# Since males do the foraging, it makes sense to define maximum foraging area by male, not female, movement.
tagged.males <- c('HAR07', 'HAR09', 'HAR04', 'HAR05')
# Filter telemetry locations to those from males during the breeding season.
telemetry <- telemetry %>% filter(datetime %within% breeding.2018 | breeding.2019) %>%
filter(id %in% tagged.males) %>%
mutate(nest=paste(site, year(datetime), sep=''))
# Break the geometry column into separate x and y coordinates.
telemetry <- st_coordinates(telemetry) %>% data.frame() %>%
bind_cols(telemetry)
# Load the locations of the telemetry nests.
telemetry.sites <- read_csv('../data/raw/telemetry_sites.csv') %>%
select(nest, x_coord, y_coord)
# Join the data sets together and do some math.
telemetry <- left_join(telemetry, telemetry.sites, by='nest') %>%
mutate(distance=sqrt((x_coord-X)^2 + (y_coord-Y)^2)) %>%
group_by(nest) %>%
arrange(desc(distance)) %>% slice(1)
# Add the mean distance to the landscapes data frame.
landscape <- data.frame(size='maximum range', area=NA, radius=mean(telemetry$distance)) %>%
bind_rows(landscape) %>%
arrange(radius)
# Calculate area of maximum range.
landscape[4,2] <- (pi*landscape[4,3]^2)*0.0001
landscape %>% kable(col.names=c('size', 'area (ha)', 'radius (m)')) %>% kable_styling()
# Load in diet data from cameras.
source('../src/prey_attributes_revised.R')
# Take only items identified to genus and twist to a wide format.
diet.wide <- diet.items %>% filter(genus != 'Unknown') %>%
group_by(nest, genus, species) %>%
mutate(count=n()) %>%
dplyr::select(nest, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count,
values_fill=list(count = 0)) %>%
drop_na()
# Calculate diet diversity.
diet.diversity <- plyr::ddply(diet.wide, ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Calculate diet richness
# Can't seem to calculate this right now, given my sample size.
# Can do n spp just for something to do.
diet.richness <- diet.items %>% filter(genus != 'Unknown') %>%
select(nest, binomial) %>%
distinct() %>%
group_by(nest) %>%
summarize(n=n())
# Calculate diet evenness
diet.evenness <- plyr::ddply(diet.wide, ~nest, function(x) {
data.frame(diet.evenness=diversity(x[-1], index='simpson')/log(sum(x[-1]>0)))
})
# Proportion of diet made up of squirrel, by biomass.
proportion.squirrel <-diet.items %>% mutate(mass=as.numeric(mass)) %>%
group_by(nest) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), proportion.squirrel=amount.sq/total) %>%
select(nest, proportion.squirrel) %>% distinct()
# Proportion of diet made up of mammal, by biomass.
proportion.mammal <-diet.items %>% mutate(mass=as.numeric(mass)) %>%
group_by(nest) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.mm=sum(mass), proportion.mammal=amount.mm/total) %>%
select(nest, proportion.mammal) %>% distinct()
# Proportion of diet made up of bird, by biomass.
proportion.bird <-diet.items %>% mutate(mass=as.numeric(mass)) %>%
group_by(nest) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Aves') %>%
mutate(amount.av=sum(mass), proportion.bird=amount.av/total) %>%
select(nest, proportion.bird) %>% distinct()
# Proportion of diet made up of grouse, by biomass.
proportion.grouse <-diet.items %>% mutate(mass=as.numeric(mass)) %>%
group_by(nest) %>%
mutate(total=sum(mass)) %>%
filter(family == 'Phasianidae') %>%
mutate(amount.av=sum(mass), proportion.grouse=amount.av/total) %>%
select(nest, proportion.grouse) %>% distinct()
# Join together.
diet.variables <- full_join(diet.diversity, proportion.squirrel) %>%
full_join(proportion.mammal) %>%
full_join(proportion.bird) %>%
full_join(proportion.grouse) %>%
#full_join(diet.richness) %>%
full_join(diet.evenness)
diet.variables %>% pivot_longer(-nest, names_to='variable', values_to='value') %>%
ggplot(aes(x=value, y=variable, fill=variable)) +
geom_density_ridges() +
theme_ridges() +
scale_fill_brewer(palette='Set2') +
theme_classic()
diet.variables %>%
select(-nest) %>%
ggcorr(nbreaks=5, hjust=0.75, layout.exp=1, label=TRUE)
# Create a function to calculate n.
give.n <- function(x){
return(c(y = mean(x), label = length(x)))
}
# Calculate diet diversity separately for camera and remains methods.
camera.only.diversity <- diet.items %>% filter(genus != 'Unknown') %>%
group_by(nest, binomial, method) %>%
mutate(count=n()) %>%
dplyr::select(nest, binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0)) %>%
drop_na() %>%
filter(method == 'camera') %>% ungroup() %>%
select(-method) %>%
plyr::ddply(., ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
}) %>%
mutate(method='camera')
remains.only.diversity <- diet.items %>% filter(genus != 'Unknown') %>%
group_by(nest, binomial, method) %>%
mutate(count=n()) %>%
dplyr::select(nest, binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0)) %>%
drop_na() %>%
filter(method == 'remains') %>% ungroup() %>%
select(-method) %>%
plyr::ddply(., ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
}) %>%
mutate(method='remains')
# Calculate proportion squirrel separately for camera and remains methods.
method.split.proportion <- diet.items %>% mutate(mass=as.numeric(mass)) %>%
group_by(method, nest) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), proportion.squirrel=amount.sq/total) %>%
select(nest, method, proportion.squirrel) %>% distinct()
# Join together and graph.
full_join(remains.only.diversity, camera.only.diversity, by=c('nest', 'diet.diversity', 'method')) %>%
full_join(method.split.proportion, by=c('nest', 'method')) %>%
pivot_longer(-c(method, nest), names_to='variable', values_to='value') %>%
ggplot(aes(x=method, y=value, fill=variable)) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
facet_wrap(~variable) +
stat_summary(fun.data = give.n, geom = "text")
# Number of fledglings.
n.fledglings <- camera.sites %>%
select(nest, n_fledge) %>% rename(n.fledglings=n_fledge)
n.fledglings %>% drop_na() %>%
ggplot(aes(x=n.fledglings)) +
geom_histogram(binwidth=1, color='white', fill='lightblue') +
theme_classic() +
labs(x='n chicks fledged', y='n nests')
# Number of years occupied/number of years surveyed.
years.occupied <- read_csv('../data/processed/occupancy_sc.csv')
years.occupied <- years.occupied %>% pivot_longer(-c(site, name), names_to='year', values_to='status') %>%
filter(status > 0) %>%
group_by(site, status) %>%
add_tally() %>%
distinct(site, status, .keep_all=TRUE) %>%
select(-year) %>%
pivot_wider(names_from=status, values_from=n, values_fill=0) %>%
ungroup() %>% rowwise(site, name) %>%
mutate(years.surveyed=sum(c(`3`, `2`, `1`)),
years.occupied=sum(c(`3`, `2`)),
proportion.occupied=years.occupied/years.surveyed) %>%
select(site, name, years.surveyed, years.occupied, proportion.occupied) %>%
arrange(desc(years.surveyed, years.occupied))
years.occupied$index <- 1:nrow(years.occupied)
years.occupied %>%
mutate(years.empty=years.surveyed-years.occupied) %>%
pivot_longer(-c(site, name, index), names_to='metric', values_to='value') %>%
filter(metric %in% c('years.occupied', 'years.empty')) %>%
ggplot(aes(x=index, y=value, fill=metric)) +
geom_bar(stat='identity', position='stack', color='white') +
theme_classic() +
coord_flip() +
labs(x='site', y='number of years surveyed') +
scale_fill_brewer(palette='Set2')
load(file='../data/interim/bec_landscape_metrics.rda')
load(file='../data/interim/landcover_landscape_metrics.rda')
load(file='../data/interim/hsi_landscape_metrics.rda')
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='nest') %>%
left_join(proportion.squirrel, by='nest') %>%
left_join(n.fledglings, by='nest') %>%
right_join(landscape, by=c('radius', 'size'))
data %>% filter(size == 'PFA') %>%
select(-site, -nest, -year, -radius, -size, -mature, -old, -rock, -young, -shrub, -regen, -deciduous,
-freshwater, -undefined, -ocean, -hsi.freshwater, -hsi.ocean, -hsi.river,
-diet.diversity, -proportion.squirrel, -n.fledglings, -nil, -moderate, -high, -low, -area) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5)
data %>% filter(size == 'maximum range') %>%
select(-site, -nest, -year, -radius, -size, -mature, -old, -rock, -young, -shrub, -regen, -deciduous,
-freshwater, -undefined, -ocean, -hsi.freshwater, -hsi.ocean, -hsi.river,
-diet.diversity, -proportion.squirrel, -n.fledglings, -nil, -moderate, -high, -low, -area) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5)
# Dominant forest type of territory.
bec.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, radius, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n()) %>%
ggplot(aes(x=dominant.bec, y=count, fill=size)) +
geom_bar(stat='identity') +
facet_wrap(~size) +
scale_fill_brewer(palette='Set2') +
theme_classic() +
theme(legend.position='none') +
coord_flip()
# Diversity of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.diversity) %>%
ggplot(aes(x=factor(radius), y=bec.diversity, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Diversity of forest types')
# Evenness of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.evenness) %>%
ggplot(aes(x=factor(radius), y=bec.evenness, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')+
labs(title='Evenness of forest types')
landcover.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
filter(nest != 'TCR2019') %>%
select(nest, size, undefined, rock, ocean, freshwater,
shrub, deciduous, regen,
young, mature, old) %>%
pivot_longer(-c(nest, size), names_to='metric', values_to='values') %>%
ggplot(aes(x=metric, y=values, fill=size)) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
facet_wrap(~size) +
theme(legend.position='none') +
coord_flip() +
labs(title='Proportion of landcover classes')
# Interspersion of land cover.
select(landcover.landscape.metrics, nest, radius, cover.contagion) %>%
filter(nest != 'TCR2019') %>%
ggplot(aes(x=factor(radius), y=cover.contagion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Landcover contagion', caption='Contagion measures mixing and clumping. IJI is a very similar metric that could be used instead.')
# Amount of mature forest.
select(landcover.landscape.metrics, nest, radius, amount.cover.mature) %>%
filter(nest != 'TCR2019') %>%
ggplot(aes(x=factor(radius), y=amount.cover.mature, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Proportion of site in older forest')
# Amount of high or moderate habitat under the HSI.
select(hsi.landscape.metrics, nest, radius, amount.suitable) %>%
filter(nest != 'TCR2019') %>%
ggplot(aes(x=factor(radius), y=amount.suitable, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Proportion of site in suitable habitat', caption='Suitable habitat is forest scored 2 or 3 by the model.')
# Edge density of HSI.
select(hsi.landscape.metrics, nest, radius, hsi.edge.density) %>%
filter(nest != 'TCR2019') %>%
ggplot(aes(x=factor(radius), y=hsi.edge.density, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Edge density between HSI classes')
# Interspersion of HSI.
select(hsi.landscape.metrics, nest, radius, hsi.contagion) %>%
filter(nest != 'TCR2019') %>%
ggplot(aes(x=factor(radius), y=hsi.contagion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none') +
labs(title='Contagion of HSI classes', caption='Contagion captures the mixing and clumping of classes. IJI is another very similar metric.')
diet.variables %>% pivot_longer(-nest, names_to='variable', values_to='value') %>%
ggplot(aes(x=value, y=variable, fill=variable)) +
geom_density_ridges() +
theme_ridges() +
scale_fill_brewer(palette='Set2') +
theme_classic()
diet.variables %>% pivot_longer(-nest, names_to='variable', values_to='value') %>%
ggplot(aes(x=value, y=variable, fill=variable)) +
geom_density_ridges() +
theme_ridges() +
scale_fill_brewer(palette='Set2') +
xlim(0, 1) +
theme_classic()
diet.variables %>% pivot_longer(-nest, names_to='variable', values_to='value') %>%
ggplot(aes(x=value, y=variable, fill=variable)) +
geom_density_ridges() +
theme_ridges() +
xlim(0, 1) +
scale_fill_brewer(palette='Set2') +
theme_classic()
diet.variables %>% pivot_longer(-nest, names_to='variable', values_to='value') %>%
ggplot(aes(x=value, y=variable, fill=variable)) +
geom_density_ridges() +
theme_ridges() +
xlim(0, 1) +
scale_fill_brewer(palette='Set2') +
theme_classic()
