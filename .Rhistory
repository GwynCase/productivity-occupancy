mutate(total.count=n()) %>%
group_by(common) %>%
mutate(sp.count=n(), p.count=sp.count/total.count) %>%
distinct(common, source, sp.count) %>%
rename(target=common, value=sp.count) %>%
mutate(source=case_when(
source == 'R' ~ 'remains',
source == 'P' ~ 'pellets',
source == 'C' ~ 'cameras'
)) %>%
data.frame()
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique())
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
group.quant.pellets <- pellets %>% mutate(total.count=n(), total.mass=sum(mass)) %>%
group_by(group) %>%
mutate(group.count=n(), group.mass=sum(mass),
proportion.count=group.count/total.count*100,
proportion.mass=group.mass/total.mass*100,
source='pellets') %>%
distinct(group, group.count, proportion.count, group.mass, proportion.mass, source) %>%
ungroup()
ggplot(group.quant.pellets, aes(x=group, y=proportion.count, fill=group)) +
geom_bar(stat='identity', color='white') +
scale_fill_brewer(palette = "Set1") +
labs(x='prey group', y='proportion of items', title='proportion of prey items identified from pellets') +
theme_classic()
group.quant.combined <- diet.items %>%
filter(method == 'remains') %>%
mutate(total.count=n(), total.mass=sum(mass)) %>%
group_by(group) %>%
mutate(group.count=n(), group.mass=sum(mass),
proportion.count=group.count/total.count*100,
proportion.mass=group.mass/total.mass*100,
source='combined') %>%
distinct(group, group.count, proportion.count, group.mass, proportion.mass, source) %>%
ungroup()
ggplot(group.quant.combined, aes(x=group, y=proportion.count, fill=group)) +
geom_bar(stat='identity', color='white') +
scale_fill_manual(values=c(bird, corvid, grouse,
hare, mammal, squirrel,
thrush, unknown)) +
labs(x='prey group', y='proportion of items',
title='proportion of prey items identified from combined pellets and remains') +
theme_classic()
group.quant.camera <- cameras %>% mutate(total.count=n(), total.mass=sum(mass)) %>%
group_by(group) %>%
mutate(group.count=n(), group.mass=sum(mass),
proportion.count=group.count/total.count*100,
proportion.mass=group.mass/total.mass*100,
source='cameras') %>%
distinct(group, group.count, proportion.count, group.mass, proportion.mass, source) %>%
ungroup()
ggplot(group.quant.camera, aes(x=group, y=proportion.count, fill=group)) +
geom_bar(stat='identity', color='white') +
scale_fill_manual(values=c(bird, corvid, grouse,
hare, mammal, squirrel,
thrush, unknown)) +
labs(y='Proportion of items', title='Prey items identified from nest cameras') +
theme_classic() +
theme(text=element_text(family="Lato Semibold"), axis.title.x=element_blank(),
legend.position='none')
# Take only items identified to genus and twist to a wide format.
camera.diet.wide <- diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
group_by(nest, genus, species) %>%
mutate(count=n()) %>% ungroup() %>%
dplyr::select(nest, binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
# Calculate diet diversity.
camera.diet.diversity <- plyr::ddply(camera.diet.wide, ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Do it again with groupings.
camera.groups.wide <- diet.items %>% filter(class != 'Unknown' & method == 'camera') %>%
group_by(nest, group) %>%
mutate(count=n()) %>% ungroup() %>%
dplyr::select(nest, group, count) %>%
distinct() %>%
pivot_wider(names_from=group, values_from=count,
values_fill=list(count = 0))
# Calculate diet diversity.
camera.groups.diversity <- plyr::ddply(camera.groups.wide, ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
camera.groups.wide.rn <- column_to_rownames(camera.groups.wide, var='nest')
# Proportion of diet made up of squirrel, by biomass.
camera.proportion.squirrel <- diet.items %>%
filter(method == 'camera') %>%
mutate(mass=as.numeric(mass)) %>%
group_by(nest) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), proportion.squirrel=amount.sq/total) %>%
select(nest, proportion.squirrel) %>% distinct()
# Proportion of diet made up of mammal, by biomass.
camera.proportion.mammal <- diet.items %>%
filter(method == 'camera') %>%
mutate(mass=as.numeric(mass)) %>%
group_by(nest) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.mm=sum(mass), proportion.mammal=amount.mm/total) %>%
select(nest, proportion.mammal) %>% distinct()
# Join them together.
camera.diet.variables <- full_join(camera.diet.diversity, camera.proportion.mammal, by=c('nest')) %>%
full_join(camera.proportion.squirrel, by=c('nest'))
# Bring in productivity data.
camera.sites.2019 <- read_csv('../data/raw/camera_nests_2019.csv')
# Add productivity to dataset.
camera.diet.variables <- camera.sites.2019 %>% select(nest, site, n_fledge) %>%
full_join(camera.diet.variables, by=c('nest'))
# Make a bunch of models.
# Diet diversity.
productivity.by.diet.diversity <-
lm(n_fledge ~ diet.diversity, data=camera.diet.variables) %>%
summary() %>%
glance() %>%
mutate(variable='diet diversity')
# Proportion mammal.
productivity.by.proportion.mammal <-
lm(n_fledge ~ proportion.mammal, data=camera.diet.variables) %>%
summary() %>%
glance() %>%
mutate(variable='proportion mammal')
# Proportion squirrel.
productivity.by.proportion.squirrel <-
lm(n_fledge ~ proportion.squirrel, data=camera.diet.variables) %>%
summary() %>%
glance() %>%
mutate(variable='proportion.squirrel')
bind_rows(productivity.by.diet.diversity, productivity.by.proportion.mammal,
productivity.by.proportion.squirrel) %>%
kable() %>% kable_styling()
ggplot(camera.diet.variables, aes(x=proportion.squirrel, y=n_fledge)) +
geom_point() +
geom_smooth(method='lm', col='black', formula='y ~ x', fill=unknown) +
labs(x='Proportion squirrel biomass', y='N. fledglings',
title='Reproductive success as function of squirrel biomass in diet',
caption='Adj. R2 = 0.64, shaded region represents 95% CI') +
theme_classic() +
theme(text=element_text(family="Lato Semibold"))
# Bring in occupancy data.
occupancy.landscape.metrics <- readRDS('../data/interim/occupancy_landscape_metrics.rds')
occupancy.diet.metrics <-
left_join(camera.diet.variables, occupancy.landscape.metrics, by=c('site'))
glm(proportion.occupied ~ diet.diversity, data=occupancy.diet.metrics,
family=binomial, weights=years.surveyed) %>% tidy()
glm(proportion.occupied ~ proportion.squirrel, data=occupancy.diet.metrics,
family=binomial, weights=years.surveyed) %>% tidy()
# Bring in zone data.
centroids <- read_csv('../data/interim/zone_centroid_sites.csv')
# Add to camera diet data.
camera.diet.variables <- centroids %>% select(site, zone) %>% right_join(camera.diet.variables, by=c('site'))
# Make a frequency table of groups for camera data.
freq.camera <- centroids %>%
select(site, zone) %>% right_join(diet.items, by=c('site')) %>%
filter(method == 'camera') %>%
group_by(zone, group) %>%
mutate(count=n()) %>%
select(zone, group, count) %>%
distinct() %>% ungroup() %>%
pivot_wider(names_from='group', values_from='count', values_fill=0) %>%
column_to_rownames(var='zone')
# Chi-square test for difference in counts by zones.
chi.camera <- chisq.test(freq.camera, correct=FALSE, simulate.p.value=TRUE)
chi.camera
freq.combined <- centroids %>%
select(site, zone) %>% right_join(diet.items, by=c('site')) %>%
filter(method == 'remains') %>%
group_by(zone, group) %>%
mutate(count=n()) %>%
select(zone, group, count) %>%
distinct() %>% ungroup() %>%
pivot_wider(names_from='group', values_from='count', values_fill=0) %>%
drop_na(zone) %>%
column_to_rownames(var='zone')
# Chi-square test for difference in counts by zones.
chisq.test(freq.combined, correct=FALSE, simulate.p.value=TRUE)
freq.pellets <- centroids %>%
select(site, zone) %>% right_join(diet.items, by=c('site')) %>%
filter(source == 'P') %>%
group_by(zone, group) %>%
mutate(count=n()) %>%
select(zone, group, count) %>%
distinct() %>% ungroup() %>%
pivot_wider(names_from='group', values_from='count', values_fill=0) %>%
drop_na(zone) %>%
column_to_rownames(var='zone')
# Chi-square test for difference in counts by zones.
chisq.test(freq.pellets, correct=FALSE, simulate.p.value=TRUE)
corrplot(chi.camera$residuals, is.cor=FALSE)
camera.diet.variables %>%
pivot_longer(!c(site, nest, zone), names_to='metric', values_to='value') %>%
filter(metric == 'proportion.squirrel') %>%
ggplot(aes(x=zone, y=value, fill=zone)) +
geom_boxplot() +
geom_jitter() +
scale_fill_manual(values=c('darkolivegreen3', 'chocolate3')) +
labs(x='zone', y='proportion squirrel', title='Proportion of biomass composed of squirrel, by zone') +
theme_classic()
# Area is in hectares.
landscape <- data.frame(
size=c('PFA', 'breeding area', 'home range', 'maximum range'),
area=c(60, 200, 3800, 32902.97)
)
# Convert area in hectares to radii in meters.
landscape <- landscape %>% mutate(radius=sqrt(area*10000/pi))
landscape
diet.diversity.statistics <- readRDS('../data/interim/diet_diversity_stats.rds')
diet.diversity.statistics <- diet.diversity.statistics %>% mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.05 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
))
diet.diversity.statistics %>% select(size, sig, variable) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(variable, PFA, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
proportion.squirrel.statistics <- readRDS('../data/interim/proportion_squirrel_stats.rds')
proportion.squirrel.statistics <- proportion.squirrel.statistics %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.05 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
))
proportion.squirrel.statistics %>% select(size, sig, variable) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(variable, PFA, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
lm(n_fledge ~ zone, data=camera.diet.variables) %>% glance()
productivity.landscape.statistics <- readRDS('../data/interim/productivity_landscape_stats.rds')
productivity.landscape.statistics <- productivity.landscape.statistics %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.05 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
))
productivity.landscape.statistics %>% select(size, sig, variable) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(variable, PFA, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
# Trim occupancy & landscape data down just to zone data.
occupancy.zone <- occupancy.landscape.metrics %>%
select(site, zone, years.surveyed, proportion.occupied)
glm(proportion.occupied ~ zone, data=occupancy.zone, family=binomial, weights=years.surveyed) %>% tidy()
# Load in occupancy model outputs.
occupancy.landscape.statistics <- readRDS('../data/interim/occupancy_landscape_stats.rds')
# Clean up.
occupancy.landscape.statistics <- occupancy.landscape.statistics %>%
mutate(sig=round(p.value, digits=2)) %>%
mutate(sig=case_when(
p.value < 0.05 ~ paste(as.character(sig), '*'),
TRUE ~  paste(as.character(sig))
))
# Make a table.
occupancy.landscape.statistics %>%
filter(term != '(Intercept)') %>%
select(size, sig, variable) %>%
pivot_wider(names_from=size, values_from=sig) %>%
select(variable, PFA, everything()) %>%
kable() %>% kable_styling(bootstrap_options=c('striped'))
View(occupancy.diet.metrics)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(lubridate)
library(vegan)
library(ggplot2)
library(knitr)
library(kableExtra)
library(broom)
library(corrplot)
library(extrafont)
library(networkD3)
loadfonts(device='win', quiet=TRUE)
# Bring in data.
source('../src/prey_attributes_revised.R')
# Add grouping variable.
diet.items <- diet.items %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Let's name some colors.
aves <- '#89b0ae'
mammalia <- '#e9c46a'
unknown <- 'lightgrey'
bird <- '#114b5f' # Midnight green eagle
corvid <- '#7c9eb2' # Pewter blue
grouse <- '#c3e8bd' # Tea green
hare <- '#d1603d' # Copper red
mammal <- '#cdc392' # Sage
squirrel <- '#df9a57' # Persian orange
thrush <- '#553e4e' # Eggplant
occupancy.diet.metrics <-
left_join(camera.diet.variables, occupancy.landscape.metrics, by=c('site')) %>%
distinct(site, years.surveyed, proportion.occupied, diet.diversity)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(lubridate)
library(vegan)
library(ggplot2)
library(knitr)
library(kableExtra)
library(broom)
library(corrplot)
library(extrafont)
library(networkD3)
loadfonts(device='win', quiet=TRUE)
# Bring in data.
source('../src/prey_attributes_revised.R')
# Add grouping variable.
diet.items <- diet.items %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Let's name some colors.
aves <- '#89b0ae'
mammalia <- '#e9c46a'
unknown <- 'lightgrey'
bird <- '#114b5f' # Midnight green eagle
corvid <- '#7c9eb2' # Pewter blue
grouse <- '#c3e8bd' # Tea green
hare <- '#d1603d' # Copper red
mammal <- '#cdc392' # Sage
squirrel <- '#df9a57' # Persian orange
thrush <- '#553e4e' # Eggplant
glm(proportion.occupied ~ diet.diversity, data=occupancy.diet.metrics,
family=binomial, weights=years.surveyed) %>% tidy()
occupied.by.diet.diversity %>% tidy()
occupied.by.proportion.squirrel %>% tidy()
occupied.by.additive %>% tidy()
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(lubridate)
library(vegan)
library(ggplot2)
library(knitr)
library(kableExtra)
library(broom)
library(corrplot)
library(extrafont)
library(networkD3)
loadfonts(device='win', quiet=TRUE)
# Bring in data.
source('../src/prey_attributes_revised.R')
# Add grouping variable.
diet.items <- diet.items %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Let's name some colors.
aves <- '#89b0ae'
mammalia <- '#e9c46a'
unknown <- 'lightgrey'
bird <- '#114b5f' # Midnight green eagle
corvid <- '#7c9eb2' # Pewter blue
grouse <- '#c3e8bd' # Tea green
hare <- '#d1603d' # Copper red
mammal <- '#cdc392' # Sage
squirrel <- '#df9a57' # Persian orange
thrush <- '#553e4e' # Eggplant
glm(proportion.occupied ~ proportion.squirrel, data=occupancy.diet.metrics,
family=binomial, weights=years.surveyed) %>% tidy()
View(occupancy.diet.metrics)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(lubridate)
library(vegan)
library(ggplot2)
library(knitr)
library(kableExtra)
library(broom)
library(corrplot)
library(extrafont)
library(networkD3)
loadfonts(device='win', quiet=TRUE)
# Bring in data.
source('../src/prey_attributes_revised.R')
# Add grouping variable.
diet.items <- diet.items %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Let's name some colors.
aves <- '#89b0ae'
mammalia <- '#e9c46a'
unknown <- 'lightgrey'
bird <- '#114b5f' # Midnight green eagle
corvid <- '#7c9eb2' # Pewter blue
grouse <- '#c3e8bd' # Tea green
hare <- '#d1603d' # Copper red
mammal <- '#cdc392' # Sage
squirrel <- '#df9a57' # Persian orange
thrush <- '#553e4e' # Eggplant
occupancy.diet.metrics <-
left_join(camera.diet.variables, occupancy.landscape.metrics, by=c('site')) %>%
distinct(site, years.surveyed, proportion.occupied, diet.diversity, proportion.squirrel)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
options(tidyverse.quiet = TRUE)
options(dplyr.summarise.inform = FALSE)
library(tidyverse)
library(lubridate)
library(vegan)
library(ggplot2)
library(knitr)
library(kableExtra)
library(broom)
library(corrplot)
library(extrafont)
library(networkD3)
loadfonts(device='win', quiet=TRUE)
# Bring in data.
source('../src/prey_attributes_revised.R')
# Add grouping variable.
diet.items <- diet.items %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Let's name some colors.
aves <- '#89b0ae'
mammalia <- '#e9c46a'
unknown <- 'lightgrey'
bird <- '#114b5f' # Midnight green eagle
corvid <- '#7c9eb2' # Pewter blue
grouse <- '#c3e8bd' # Tea green
hare <- '#d1603d' # Copper red
mammal <- '#cdc392' # Sage
squirrel <- '#df9a57' # Persian orange
thrush <- '#553e4e' # Eggplant
glm(proportion.occupied ~ proportion.squirrel, data=occupancy.diet.metrics,
family=binomial, weights=years.surveyed) %>% tidy()
links <- diet.items %>% filter(binomial != 'Unidentified item') %>%
group_by(source) %>%
mutate(total.count=n()) %>%
group_by(common) %>%
mutate(sp.count=n(), p.count=sp.count/total.count) %>%
distinct(common, source, sp.count) %>%
rename(target=common, value=sp.count) %>%
mutate(source=case_when(
source == 'R' ~ 'remains',
source == 'P' ~ 'pellets',
source == 'C' ~ 'cameras'
)) %>%
data.frame()
nodes <- data.frame(
name=c(as.character(links$source),
as.character(links$target)) %>% unique())
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
links$IDsource <- match(links$source, nodes$name)-1
links$IDtarget <- match(links$target, nodes$name)-1
# Make the Network
sankeyNetwork(Links = links, Nodes = nodes,
Source = "IDsource", Target = "IDtarget",
Value = "value", NodeID = "name",
sinksRight=FALSE)
