filter(size == 'home range') %>%
select(term, p.value) %>%
pivot_wider(names_from=term, values_from=p.value)
sig.hr <-intersect(names(data), names(sig.hr))
data %>% select(all_of(sig.hr)) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5) +
labs(title='Home range')
# For the max range.
sig.max <- occupancy.models %>% map(tidy) %>%
bind_rows(.id='size') %>%
filter(p.value <= 0.05) %>%
filter(term != '(Intercept)') %>%
filter(size == 'maximum range') %>%
select(term, p.value) %>%
pivot_wider(names_from=term, values_from=p.value)
sig.max <-intersect(names(data), names(sig.max))
data %>% select(all_of(sig.max)) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5) +
labs(title='Maximum range')
data %>% filter(size == 'PFA') %>%
select(12:26) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5) +
labs(title='PFA')
data %>% filter(size == 'breeding area') %>%
select(12:26) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5) +
labs(title='Breeding area')
data %>% filter(size == 'home range') %>%
select(12:26) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5) +
labs(title='Home range')
data %>% filter(size == 'maximum range') %>%
select(12:26) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5) +
labs(title='Maximum range')
data %>% filter(size == 'home range') %>%
ggplot(aes(x=cover.richness, y=proportion.occupied, weight=years.surveyed)) +
geom_point() +
geom_smooth(formula='y ~ x', method='lm', se=TRUE, col='black', fill='lightgrey') +
labs(title='Territory quality at home range scale') +
ylab('Territory quality index') +
xlab('Richness of landcover types') +
theme_classic() +
theme(text=element_text(family="Lato Semibold"))
data %>% filter(size == 'home range') %>%
ggplot(aes(x=cover.diversity, y=proportion.occupied)) +
geom_point() +
theme_classic()
data %>% filter(size == 'home range') %>%
ggplot(aes(x=cover.evenness, y=proportion.occupied)) +
geom_point() +
theme_classic()
data %>% filter(size == 'home range') %>%
ggplot(aes(x=bec.diversity, y=proportion.occupied)) +
geom_point() +
theme_classic()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
#Load some libraries.
library(tidyverse)
library(vegan)
library(raster)
library(sf)
library(landscapemetrics)
library(broom)
library(knitr)
library(kableExtra)
library(GGally)
library(extrafont)
library(QuantPsyc)
# Area is in hectares.
landscape <- data.frame(
size=c('PFA', 'breeding area', 'home range', 'maximum range'),
area=c(60, 200, 3800, 15600)
)
# Convert area in hectares to radii in meters.
landscape <- landscape %>% mutate(radius=sqrt(area*10000/pi))
landscape
# Read in the data.
occupancy <- read_csv('../data/processed/occupancy_sc.csv')
# Calculate number of years NOGO detected out of number of years surveyed.
occupied <- occupancy %>% pivot_longer(-c(site, name), names_to='year', values_to='status') %>%
filter(status > 0) %>%
group_by(site, status) %>%
add_tally() %>%
distinct(site, status, .keep_all=TRUE) %>%
select(-year) %>%
pivot_wider(names_from=status, values_from=n, values_fill=0) %>%
ungroup() %>% rowwise(site, name) %>%
mutate(years.surveyed=sum(c(`3`, `2`, `1`)),
years.occupied=sum(c(`3`, `2`)),
years.empty=years.surveyed-years.occupied,
proportion.occupied=years.occupied/years.surveyed) %>%
select(site, name, years.surveyed, years.occupied, years.empty, proportion.occupied) %>%
filter(years.surveyed > 1)
# Look at it.
occupied
View(occupancy)
df <- read_csv('../data/raw/20201218_specimens.csv')
library(tidyverse)
df <- read_csv('../data/raw/20201218_specimens.csv')
df <- read_csv('/data/raw/20201218_specimens.csv')
df <- read_csv('data/raw/20201218_specimens.csv')
df %>% distinct(site)
df %>% distinct(site) %>% view()
df %>% distinct(class) %>% view()
df %>% distinct(order)
df %>% distinct(family)
df %>% distinct(genus)
df %>% distinct(genus) %>% view()
df %>% distinct(species) %>% view()
df %>% distinct(common) %>% view()
df %>% distinct(common, size) %>% view()
df %>% filter(common=='band-tailed pigeon')
df %>% filter(common=='band-tailed pigeon') %>% select(id, size)
df <- read_csv('data/raw/20201218_specimens.csv')
df %>% distinct(species)
df %>% distinct(species) %>% view()
df %>% distinct(common) %>% view()
df %>% filter(common=='band-tailed pigeon') %>% select(id, size)
df %>% filter(common=='vole')
df %>% distinct(class, order, family, genus, species) %>% view()
df %>% distinct(class, order, family, genus, species) %>%
arrange(class, order, family, genus, species) %>%
view()
df %>% filter(genus=='catharus')
df %>% filter(genus=='Catharus')
# Import camera data from 2019...
camera.data.2019 <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
## drop records with no prey items identified...
drop_na(class) %>%
## and select only relevant columns.
select(site, datetime, class, family, genus, species, common, size)
# Import camera data from 2019...
camera.data.2019 <- read_csv('data/interim/camera_corrected.csv', guess_max=7000) %>%
## drop records with no prey items identified...
drop_na(class) %>%
## and select only relevant columns.
select(site, datetime, class, family, genus, species, common, size)
dt <- camera.data.2019
dt %>% distinct(class, order, family, genus, species) %>%
arrange(class, order, family, genus, species) %>%
view()
View(dt)
dt %>% distinct(class, family, genus, species) %>%
arrange(class, order, family, genus, species) %>%
view()
dt %>% distinct(class, family, genus, species) %>%
arrange(class, family, genus, species) %>%
view()
citation(tidyverse)
citation()
citation("tidyverse")
citation('lme4')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
#Load some libraries.
library(tidyverse)
library(vegan)
library(landscapemetrics)
library(broom)
library(knitr)
library(kableExtra)
library(AICcmodavg)
# Bring in occupancy data.
occupancy <- read_csv('../data/processed/occupancy_sc.csv')
# Clean it up.
occupied <- occupancy %>% pivot_longer(-c(site, name), names_to='year', values_to='status') %>%
filter(status > 0) %>%
group_by(site, status) %>%
add_tally() %>%
distinct(site, status, .keep_all=TRUE) %>%
select(-year) %>%
pivot_wider(names_from=status, values_from=n, values_fill=0) %>%
ungroup() %>% rowwise(site, name) %>%
mutate(years.surveyed=sum(c(`3`, `2`, `1`)),
years.occupied=sum(c(`3`, `2`)),
proportion.occupied=years.occupied/years.surveyed) %>%
select(site, name, years.surveyed, years.occupied, proportion.occupied) %>%
arrange(desc(years.surveyed, years.occupied))
# Bring in diet data.
source('../src/prey_attributes_revised.R')
# Take only items identified to genus and twist to a wide format.
camera.diet.wide <- diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
group_by(nest, genus, species) %>%
mutate(count=n()) %>% ungroup() %>%
dplyr::select(nest, binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
# Calculate diet diversity.
camera.diet.diversity <- plyr::ddply(camera.diet.wide, ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Calculate proportion of squirrel by biomass and count for camera data.
proportion.squirrel.camera <- diet.items %>%
filter(method == 'camera') %>%
group_by(nest) %>%
mutate(total.mass=sum(mass), total.count=n()) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(mass.sq=sum(mass), count.sq=n(),
prop.sq.mass=mass.sq/total.mass, prop.sq.count=count.sq/total.count) %>%
select(site, nest, prop.sq.mass, prop.sq.count) %>% distinct()
# Bind together into one data frame.
camera.diet.variables <- full_join(proportion.squirrel.camera, camera.diet.diversity, by=c('nest'))
# Add occupancy data.
camera.diet.variables <- left_join(camera.diet.variables, occupied, by=c('site'))
occupied.by.diet.diversity <- glm(proportion.occupied ~ diet.diversity,
data=camera.diet.variables, family=binomial, weights=years.surveyed)
occupied.by.proportion.squirrel <- glm(proportion.occupied ~ prop.sq.mass,
data=camera.diet.variables, family=binomial, weights=years.surveyed)
occupied.by.diet.diversity %>% tidy()
occupied.by.proportion.squirrel %>% tidy()
camera.diet.variables
library(GGally)
camera.diet.variables %>% select(prop.sq.mass, diet.diversity) %>%
ggcorr(method=c('pairwise', 'pearson'), nbreaks=5, hjust=1, layout.exp=5)
cor(camera.diet.variables$prop.sq.mass, camera.diet.variables$diet.diversity)
citation()
getwd()
library(tidyverse)
nests <- read_csv('/data/processed/sc_nests.csv')
nests <- read_csv('data/processed/sc_nests.csv')
library(sf)
nests <- read_csv('data/processed/sc_nests.csv')
View(nests)
nests.sf <-sites %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
nests.sf <- nests %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
View(nests)
nests.sf <- nests %>% drop_na(lat)
nests.sf <- nests %>% drop_na(lat) %>%
st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
View(nests.sf)
unlisted <- nests.sf %>% mutate(xcoord = unlist(map(nests.sf$geometry,1)),
ycoord = unlist(map(nests.sf$geometry,2))) %>%
data.frame()
View(unlisted)
unlisted <- nests.sf %>% mutate(xcoord = unlist(map(nests.sf$geometry,1)),
ycoord = unlist(map(nests.sf$geometry,2))) %>%
select(!geometry) %>%
data.frame()
unlisted <- nests.sf %>% mutate(xcoord = unlist(map(nests.sf$geometry,1)),
ycoord = unlist(map(nests.sf$geometry,2))) %>%
select(-geometry) %>%
data.frame()
unlisted <- nests.sf %>% mutate(xcoord = unlist(map(nests.sf$geometry,1)),
ycoord = unlist(map(nests.sf$geometry,2))) %>%
data.frame()
unlisted %>% select(-geometry)
unlisted <- unlisted %>% select(-geometry)
View(nests)
nests <- read_csv('data/processed/sc_nests.csv')
nests.sf <- nests %>% drop_na(lat) %>%
st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
unlisted <- nests.sf %>% mutate(xcoord = unlist(map(nests.sf$geometry,1)),
ycoord = unlist(map(nests.sf$geometry,2))) %>%
data.frame()
unlisted <- unlisted %>% select(-geometry)
write_csv(unlisted, 'data/processed/sc_nests.csv')
# Import conflict settings.
source('../src/conflicted.R')
#Load some libraries.
library(tidyverse)
#Load some libraries.
library(tidyverse)
library(ggplot2)
# Bring in diet data.
source('../src/prey_attributes_revised.R')
# Import prey remains data from 2019 & 2020...
remains.data <- read_csv('../data/raw/20210129_specimens.csv', guess_max=7000) %>%
## filter only records with at least size assigned...
filter(size != 'U') %>%
## and rename a confusing column.
rename(name=site)
# Actually lets start by data checking
remains.data <- read_csv('../data/raw/20210129_specimens.csv', guess_max=7000)
View(remains.data)
remains.data %>% unique(site)
remains.data %>% distinct(site)
remains.data %>% distinct(site) %>% print()
remains.data %>% distinct(site) %>% view()
View(remains.data)
View(nest.list)
View(remains.data)
remains.data %>% distinct(class, order, family, genus, species, common, size) %>% view()
remains.data %>% distinct(class, order, family, genus, species, common, size) %>%
arrange(class, order, family, genus, species, common, size) %>%
view()
# Bring in diet data.
source('../src/prey_attributes_revised.R')
View(diet.items)
diet.items %>% filter(source %within% c('R', 'P'))
diet.items %>% filter(source %in% c('R', 'P'))
# Separate out just the physical specimens.
sc <- diet.items %>% filter(source %in% c('R', 'P'))
View(sc)
# Separate out just the physical specimens.
sc <- diet.items %>% filter(method == 'remains'
View(remains.data)
View(remains.data)
View(camera.data.2019)
# Import camera data from 2019...
camera.data.2019 <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
## drop records with no prey items identified...
drop_na(class) %>%
## and select only relevant columns.
select(site, datetime, class, family, genus, species, common, size) %>%
mutate(year=year(datetime))
setwd('C:/Users/gwync/sfuvault/productivity-occupancy/notebooks')
# Import camera data from 2019...
camera.data.2019 <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
## drop records with no prey items identified...
drop_na(class) %>%
## and select only relevant columns.
select(site, datetime, class, family, genus, species, common, size) %>%
mutate(year=year(datetime))
View(camera.data.2019)
# Import camera data from 2019...
camera.data.2019 <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
## drop records with no prey items identified...
drop_na(class) %>%
## and select only relevant columns.
select(site, datetime, class, family, genus, species, common, size) %>%
mutate(year=year(datetime), nest=paste(site, year, sep=''))
# Import prey remains data from 2019 & 2020...
remains.data <- read_csv('../data/raw/20210129_specimens.csv', guess_max=7000) %>%
## filter only records with at least size assigned...
filter(size != 'U') %>%
## and rename a confusing column.
rename(name=site)
# Join the site list to the remains data by site name.
remains.data <- left_join(remains.data, nest.list, by='name')
View(remains.data)
# Add a unique site/year identifier.
remains.data <- remains.data %>%
mutate(year=year(date), nest=paste(site, year, sep=''))
View(remains.data)
# Bring in diet data.
source('../src/prey_attributes_revised.R')
# Separate out just the physical specimens.
sc <- diet.items %>% filter(method == 'remains')
View(sc)
# Total number of items.
summarize(sc, n())
# Number of items per year.
sc %>% group_by(year) %>%
summarize(n())
# Total number of items.
summarize(sc, n())
# Number of items per year.
sc %>% group_by(year) %>%
summarize(n())
View(sc)
View(sc)
# Biomass per year.
sc %>% group_by(year) %>%
summarize(sum(mass))
# Total number of items.
summarize(sc, n())
# Number of items per year.
sc %>% group_by(year) %>%
summarize(n())
# Biomass per year.
sc %>% group_by(year) %>%
summarize(sum(mass))
# Weird. Mean biomass of items for each year?
sc %>% group_by(year) %>%
summarize(mean(mass))
sc %>% filter(year=='2019') %>% distinct (binomial)
# For 2019.
sc %>% filter(year=='2019') %>% distinct (binomial)
# For 2020.
sc %>% filter(year=='2020') %>% distinct (binomial)
# For 2020.
sc %>% filter(year=='2020') %>% distinct (binomial) %>% arrange()
# For 2019.
sc %>% filter(year=='2019') %>% distinct (binomial) %>% arrange()
# For 2020.
sc %>% filter(year=='2020') %>% distinct (binomial) %>% arrange()
# For 2019.
sp.2019 <- sc %>% filter(year=='2019') %>% distinct (binomial) %>% arrange()
sp.2019
# For 2020.
sp.2020 <- sc %>% filter(year=='2020') %>% distinct (binomial) %>% arrange()
sp.2020
# Unique to 2019.
anti_join(sp.2019, sp.2020)
# Unique to 2020.
anti_join(sp.2020, sp.2019)
# Add grouping variable.
diet.items <- diet.items %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Add grouping variable.
by.group <- sc %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Make a frequency table.
freq.by.year <- by.group %>% group_by(year, group) %>%
mutate(count=n()) %>%
select(year, group, count) %>%
distinct() %>% ungroup() %>%
pivot_wider(names_from='group', values_from='count', values_fill=0) %>%
column_to_rownames(var='year')
View(freq.by.year)
# Run a chi-squared test for differences between years (is this even the right way to do it??)
chi.year <- chisq.test(freq.by.year, correct=FALSE, simulate.p.value=TRUE)
chi.year
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
#Load some libraries.
library(tidyverse)
library(ggplot2)
# Bring in diet data.
source('../src/prey_attributes_revised.R')
# Separate out just the physical specimens.
sc <- diet.items %>% filter(method == 'remains')
# Total number of items.
summarize(sc, n())
# Number of items per year.
sc %>% group_by(year) %>%
summarize(n())
# Biomass per year.
sc %>% group_by(year) %>%
summarize(sum(mass))
# Weird. Mean biomass of items for each year?
sc %>% group_by(year) %>%
summarize(mean(mass))
# For 2019.
sp.2019 <- sc %>% filter(year=='2019') %>% distinct (binomial) %>% arrange()
sp.2019
# For 2020.
sp.2020 <- sc %>% filter(year=='2020') %>% distinct (binomial) %>% arrange()
sp.2020
# Unique to 2019.
anti_join(sp.2019, sp.2020, by='binomial')
# Unique to 2020.
anti_join(sp.2020, sp.2019, by='binomial')
# Add grouping variable.
by.group <- sc %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Make a frequency table.
freq.by.year <- by.group %>% group_by(year, group) %>%
mutate(count=n()) %>%
select(year, group, count) %>%
distinct() %>% ungroup() %>%
pivot_wider(names_from='group', values_from='count', values_fill=0) %>%
column_to_rownames(var='year')
# Run a chi-squared test for differences between years (is this even the right way to do it??)
chi.year <- chisq.test(freq.by.year, correct=FALSE, simulate.p.value=TRUE)
chi.year
sc %>% fiter(common == 'northern goshawk')
sc %>% filter(common == 'northern goshawk')
sc %>% filter(common == 'northern goshawk') %>% view()
remains.data
View(remains.data)
ph <- ymd(20200701)
ph
age <- ddays(28)
ph-age
age <- ddays(24)
ph <- ymd(20200629)
ph-age
ph <- ymd(20200605)
dd <- ymd(20200701)
difftime(ph, dd)
ph <- ymd(20200618)
age <- ddays(19)
ph-age
age <- ddays(18)
age <- ddays(17)
ph <- ymd(20200623)
ph-age
age <- ddays(16)
ph <- ymd(20200625)
ph-age
age <- ddays(34)
ph <- ymd(20200710)
ph-age
