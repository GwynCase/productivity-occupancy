# Add zone information to centroids.
centroids.sf <- centroids.sf %>% mutate(
zone=as.integer(st_intersects(geometry, tz.region)),
zone=case_when(
is.na(zone) ~ 'cs',
TRUE ~ 'tz'
)
)
# Bring in some base data.
n.america <- read_sf(dsn='../data/external/ne_10m_land.shp', layer='ne_10m_land')
rivers <- read_sf(dsn='../data/external/ne_10m_rivers_lake_centerlines.shp',
layer='ne_10m_rivers_lake_centerlines')
# Make a reference point for Vancouver.
vancouver <- data.frame(x=-123.113889, y=49.260833, name='Vancouver')
# Make the map.
ggplot() +
geom_sf(data=n.america, fill='white') +
geom_sf(data=sc.region, fill='lightgrey') +
geom_sf(data=tz.region, fill='darkgrey', color=NA) +
geom_sf(data=rivers) +
coord_sf(xlim=c(st_bbox(sc.region)[1] - 0.5, st_bbox(sc.region)[3] + 0.5),
ylim=c(st_bbox(sc.region)[2] - 0.25, st_bbox(sc.region)[4] + 0.25)) +
theme_void() +
theme(panel.background=element_rect(fill='black'),
panel.border=element_rect(color='black', fill=NA)) +
annotation_scale(location='br') +
annotation_north_arrow(location='br', which_north='true',
pad_y=unit(1, 'cm'), style=north_arrow_minimal) +
#geom_sf_text(data=rivers, aes(label=paste(name, featurecla)), nudge_y= -0.20)
geom_point(data=vancouver, aes(x=x, y=y)) +
geom_label(data=vancouver, aes(x=x, y=y, label=name), nudge_x=0.6, nudge_y=-0.1)
# Bring in specimen data.
remains.data <- read_csv('../data/processed/specimens_20210318.csv', guess_max=7000) %>%
## filter only records with at least size assigned...
filter(size != 'U')
# Bring in camera data.
photos <- read_csv('../data/interim/cameras_20210315.csv', guess_max=7000)
camera.data <- photos %>%
## filter only records with at least size assigned...
filter(size != 'U')
# Bring in a list of site abbreviations and site names.
nest.list <- read_csv('../data/processed/site_abbreviations.csv')
# Standardize the specimen data.
remains.data <- left_join(remains.data, nest.list, by=c('name', 'site')) %>%
select(site, date, class, order, family, genus, species, common, size, age, source)
# Standardize the camera data.
camera.data <- camera.data %>%
mutate(date=date(datetime), source='C') %>%
select(site, date, class, order, family, genus, species, common, size, age, source)
# Join them together.
diet.data <- bind_rows(remains.data, camera.data)
# Add a unique site/year identifier.
diet.data <- diet.data %>%
mutate(year=year(date), nest=paste(site, year, sep=''))
# Do some cleanup.
diet.data <- diet.data %>%
mutate(size=case_when(
size %in% c('S', 'Small') ~ 'small',
size %in% c('M', 'Medium') ~ 'medium',
size %in% c('L', 'Large') ~ 'large'
))
n.pr.sites <- diet.data %>% filter(source != 'C') %>% distinct(nest) %>%
summarize(n()) %>% as.numeric()
n.pr.sites.2019 <- diet.data %>% filter(source != 'C' & year(date) == 2019) %>%
distinct(nest) %>% summarize(n()) %>% as.numeric()
n.pr.sites.2020 <- diet.data %>% filter(source != 'C' & year(date) == 2020) %>%
distinct(nest) %>% summarize(n()) %>% as.numeric()
n.camera.sites.2019 <- diet.data %>% filter(source == 'C' & year(date) == 2019) %>%
distinct(nest) %>% summarize(n()) %>% as.numeric()
n.camera.sites.2020 <- diet.data %>% filter(source == 'C' & year(date) == 2020) %>%
distinct(nest) %>% summarize(n()) %>% as.numeric()
productivity <- read_csv('../data/raw/productivity.csv')
# Bring in a list of all known prey.
prey.list <- read_csv('../data/interim/prey_attributes.csv')
# Join the biomass data to the list of diet items.
diet.items <- prey.list %>% select(genus, species, binomial, common, category, mass) %>%
right_join(diet.data, by=c('genus', 'species', 'common'))
# For unidentified items, classify them by size and class.
diet.items <- diet.items %>% mutate(category=case_when(
is.na(category) & class == 'Mammalia' & size == 'small' ~ 'small mammal',
is.na(category) & class == 'Mammalia' & size == 'medium' ~ 'medium mammal',
is.na(category) & class == 'Mammalia' & size == 'large' ~ 'large mammal',
is.na(category) & class == 'Aves' & size == 'small' ~ 'small bird',
is.na(category) & class == 'Aves' & size == 'medium' ~ 'medium bird',
is.na(category) & class == 'Aves' & size == 'large' ~ 'large bird',
is.na(category) & class == 'Unknown' ~ paste(size, 'item'),
TRUE ~ category))
# For unidentified items, fill in the binomial column.
diet.items <- diet.items %>% replace_na(list(binomial = 'Unidentified item'))
# Calculate average masses for unidentified items, based of known species.
mean.mass <- diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(`large item` = mean(c(`large bird`, `large mammal`)),
`medium item` = mean(c(`medium bird`, `medium mammal`)),
`small item` = mean(c(`small bird`, `small mammal`))) %>%
## and reassembling it in a tidy format.
pivot_longer(everything(), names_to='category', values_to='average')
# Join average mass to diet items...
diet.items <- left_join(diet.items, mean.mass, by='category') %>%
## and fill in missing mass with average values
mutate(mass=coalesce(mass, average)) %>%
## then drop no longer needed average column and rearrange.
select(site, year, nest, class, order, family, genus, species, binomial, common,
category, size, mass, age, source)
# Change mass for juvenile items.
diet.items <- diet.items %>% mutate(mass=case_when(
age == 'J' ~ 0.5*mass,
TRUE ~ mass
))
# Add grouping categories.
diet.items <- diet.items %>% mutate(group=case_when(
class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
class == 'Aves' & family == 'Corvidae' ~ 'corvid',
class == 'Aves' & family == 'Turdidae' ~ 'thrush',
class == 'Aves' ~ 'bird',
class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
class == 'Mammalia' ~ 'mammal',
TRUE ~ 'unknown'
))
# Make a function to calculate class mass.
class.mass <- function(data) {
data %>% mutate(total.mass=sum(.data$mass)) %>%
filter(class %in% c('Mammalia', 'Aves')) %>%
group_by(class) %>%
mutate(class.mass=sum(.data$mass), per.class=class.mass/total.mass*100) %>%
distinct(class, per.class) %>%
rename(variable=class, percent=per.class)
}
# And a function to calculate squirrel mass.
squirrel.mass <- function(data) {
data %>% mutate(total.mass=sum(.data$mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(genus.mass=sum(.data$mass), per.genus=genus.mass/total.mass*100) %>%
distinct(genus, per.genus) %>%
rename(variable=genus, percent=per.genus)
}
# And a function to calculate mass of each group.
group.mass <- function(data) {
data %>% mutate(total.mass=sum(.data$mass)) %>%
group_by(group) %>%
mutate(group.mass=sum(.data$mass), per.group=group.mass/total.mass*100) %>%
distinct(group, per.group) %>%
rename(variable=group, percent=per.group)
}
# Calculate biomass for study area.
study.area.mass <- diet.items %>% group_by(source) %>% nest() %>%
mutate(class=map(data, class.mass),
genus=map(data, squirrel.mass),
group=map(data, group.mass)) %>%
pivot_longer(-c(source, data), names_to='var', values_to='per') %>%
unnest(per) %>%
select(source, variable, percent) %>%
pivot_wider(names_from=source, values_from=percent, values_fill=0) %>%
mutate(R.P=R + P)
# Calculate percent mass for each nest.
nest.mass <- diet.items %>% filter(source == 'C') %>%
group_by(nest) %>% nest() %>%
mutate(class=map(data, class.mass),
genus=map(data, squirrel.mass),
group=map(data, group.mass)) %>%
pivot_longer(-c(nest, data), names_to='var', values_to='per') %>%
unnest(per) %>%
select(nest, variable, percent) %>%
pivot_wider(id_cols=c(nest), names_from=variable, values_from=percent, values_fill=0)
# Calculate counts of items identified to genus for entire study area.
study.area.count <- diet.items %>% filter(source == 'C' & binomial != 'Unidentified item') %>%
group_by(binomial) %>%
mutate(count=n()) %>%
select(binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count, values_fill=list(count = 0))
# Calculate counts of items identified to genus for each nest.
nest.count <- diet.items %>% filter(source == 'C' & binomial != 'Unidentified item') %>%
group_by(nest, binomial) %>%
mutate(count=n()) %>%
select(nest, binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count, values_fill=list(count = 0))
# Total study area diversity.
study.area.diversity <- diversity(study.area.count, index='simpson')
# Diversity per nest.
nest.diversity <- plyr::ddply(nest.count, ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Calculate overlap between nests.
nest.overlap <- nest.count %>% column_to_rownames(var='nest') %>%
vegdist(., method='morisita') %>%
enframe()
# Calculate % biomass for each source and each zone.
zone.mass <- left_join(diet.items, centroids.sf, by=c('site')) %>%
group_by(zone, source) %>% nest() %>%
mutate(class=map(data, class.mass),
genus=map(data, squirrel.mass),
group=map(data, group.mass)) %>%
select(!data) %>%
pivot_longer(-c(source, zone), names_to='var', values_to='per') %>%
unnest(per) %>%
select(source, zone, variable, percent) %>%
pivot_wider(id_cols=c(zone, variable), names_from=source, values_from=percent, values_fill=0) %>%
mutate(R.P=R + P) %>%
arrange(zone)
# Calculate counts of items identified to genus for each zone.
zone.count <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(source == 'C' & binomial != 'Unidentified item') %>%
group_by(zone, binomial) %>%
mutate(count=n()) %>%
select(zone, binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count, values_fill=list(count = 0))
# Diversity per zone (pooled).
zone.diversity <- plyr::ddply(zone.count, ~zone, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Diversity per zone per nest.
zone.nest.diversity <- diet.items %>% distinct(site, nest) %>%
right_join(nest.diversity, by=c('nest')) %>%
left_join(centroids.sf, by=c('site')) %>%
select(site, nest, diet.diversity, zone)
# Mean diversity per nest for the transition zone.
mean.diversity.tz <- zone.nest.diversity %>% filter(zone == 'tz') %>%
summarize(mean(diet.diversity)) %>% peretty()
# Mean diversity per nest for the coastal zone.
mean.diversity.cs <- zone.nest.diversity %>% filter(zone == 'cs') %>%
summarize(mean(diet.diversity)) %>% peretty()
# Overlap between zones (pooled).
zone.overlap <- zone.count %>% column_to_rownames(var='zone') %>%
vegdist(., method='morisita') %>%
as.numeric()
# Difference between zone diversity (unpooled).
unpooled.zone.diversity.test <- t.test(diet.diversity ~ zone, data=zone.nest.diversity,
var.equal=TRUE) %>%
glance() %>% select(p.value) %>% peretty()
# Calculate counts per group per zone per source.
zone.counts <- left_join(diet.items, centroids.sf, by=c('site')) %>%
group_by(source) %>% nest() %>%
mutate(count=map(data, function(data) {
data %>% group_by(zone, group) %>%
mutate(count=n()) %>%
select(zone, group, count) %>%
distinct()
})) %>%
unnest(count) %>% select(!data)
# Run a chi-square test for each data source.
zone.chi <-zone.counts %>% pivot_wider(names_from=source, values_from=count) %>%
mutate(RP=R + P) %>%
pivot_longer(cols=c('R', 'C', 'P', 'RP'), names_to='source', values_to='count') %>%
filter(!is.na(count)) %>%
group_by(source) %>% nest() %>%
mutate(ch=map(data, function(data) {
data %>% pivot_wider(names_from=group, values_from=count, values_fill=0) %>%
column_to_rownames(var='zone') %>%
chisq.test(., correct=FALSE, simulate.p.value=TRUE)
}),
gl=map(ch, glance))
# Make a happy data set for the models to use.
model.data <- productivity %>% mutate(nest=paste(site, year, sep='')) %>%
left_join(nest.diversity, by=c('nest')) %>%
left_join(nest.mass, by=c('nest')) %>%
select(site, year, nest, n.fledge, diet.diversity, squirrel) %>%
filter_all(all_vars(!is.na(.)))
# Make the models.
diversity.model <- lm(n.fledge ~ diet.diversity, data=model.data)
squirrel.model <- lm(n.fledge ~ squirrel, data=model.data)
### Class = Aves
### Level = Study area
# Calculate percent avian biomass for camera data for the entire study area.
percent.avian.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(class == 'Aves') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(to.mass) %>% peretty(0)
# Calculate percent counts of avian items for camera data for the entire study area.
count.avian.items.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=n()) %>% filter(class == 'Aves') %>%
mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
### Class = Aves
### Level = Nest
# Calculate mean percent avian biomass per nest.
percent.avian.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Aves') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of avian biomass per nest.
sd.avian.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Aves') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
### Class = Unknown
### Level = Study area
# Calculate percent unidentified biomass for camera data for the entire study area.
percent.unknown.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(class == 'Unknown') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(to.mass) %>% peretty(0)
# Calculate percent counts of unidentified items for camera data for the entire study area.
count.unknown.items.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=n()) %>% filter(class == 'Unknown') %>%
mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
### Class = Unknown
### Level = Nest
# Calculate mean percent unknown biomass per nest.
percent.unknown.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Unknown') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of unknown biomass per nest.
sd.unknown.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Unknown') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
### Group = Squirrels
### Level = Study area
# Calculate percent squirrel biomass for camera data for the entire study area.
percent.squirrel.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(group == 'squirrel') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(to.mass) %>% peretty(0)
# Calculate percent counts of squirrels for camera data for the entire study area.
count.squirrel.items.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=n()) %>% filter(group == 'squirrel') %>%
mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
### Group = Squirrel
### Level = Nest
# Calculate mean percent squirrel biomass per nest.
percent.squirrel.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'squirrel') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of squirrel biomass per nest.
sd.squirrel.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'squirrel') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
### Group = Other mammals
### Level = Study area
# Calculate percent other mammal biomass for camera data for the entire study area.
percent.other.mammal.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(group == 'mammal') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(to.mass) %>% peretty(0)
# Calculate percent counts of other mammals for camera data for the entire study area.
count.other.mammal.items.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=n()) %>% filter(group == 'mammal') %>%
mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
### Group = Other mammal
### Level = Nest
# Calculate mean percent other mammal biomass per nest.
percent.other.mammal.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'mammal') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of other mammal biomass per nest.
sd.other.mammal.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'mammal') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
### Group = Unknown
### Level = Study area
# Calculate percent unknown biomass for camera data for the entire study area.
percent.unk.gr.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(group == 'unknown') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(to.mass) %>% peretty(0)
# Calculate percent counts of unknown for camera data for the entire study area.
count.unk.gr.items.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=n()) %>% filter(group == 'unknown') %>%
mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
### Group = Unknown
### Level = Nest
# Calculate mean percent unknown biomass per nest.
percent.unk.gr.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'unknown') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of unknown biomass per nest.
sd.unk.gr.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'unknown') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
### Group = Thrushes
### Level = Study area
# Calculate percent other thrush biomass for camera data for the entire study area.
percent.thrush.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(group == 'thrush') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(to.mass) %>% peretty(0)
# Calculate percent counts of other thrushes for camera data for the entire study area.
count.thrush.items.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=n()) %>% filter(group == 'thrush') %>%
mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
### Group = Thrush
### Level = Nest
# Calculate mean percent thrush biomass per nest.
percent.thrush.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'thrush') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of thrush biomass per nest.
sd.thrush.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'thrush') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
# Mean nest diversity.
mean.nest.diversity <- mean(nest.diversity$diet.diversity) %>% round(2)
# Standard deviation of nest diversity.
sd.nest.diversity <- sd(nest.diversity$diet.diversity) %>% round(2)
# Mean nest overlap.
mean.nest.overlap <- mean(nest.overlap$value) %>% round(2)
# Standard deviation of nest overlap.
sd.nest.overlap <- sd(nest.overlap$value) %>% round(2)
# Number of transition zone sites.
n.tz.cam.sites <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'tz' & source == 'C') %>% distinct(nest) %>%
summarize(n()) %>% as.numeric()
# Number of coastal zone sites.
n.cs.cam.sites <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'cs' & source == 'C') %>% distinct(nest) %>%
summarize(n()) %>% as.numeric()
### Comparison of mammals between zones.
# Mean proportion mammalian biomass in transition zone.
percent.mammal.biomass.tz <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'tz' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Mammalia') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# Mean proportion mammalian biomass in coastal zone.
percent.mammal.biomass.cs <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'cs' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Mammalia') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# Percent mammalian biomass per nest, by zone.
percent.mammal.biomass.zone.nest <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Mammalia') %>%
mutate(mmass=sum(mass), cmass=mmass/total) %>%
distinct(zone, nest, cmass)
# P-value for unpaired two-sample t-test for mammal biomass between zones.
p.value.mammal.biomass.zone <- t.test(cmass ~ zone,
data=percent.mammal.biomass.zone.nest, var.equal=TRUE) %>%
glance() %>% select(p.value) %>% peretty()
### Comparison of squirrels between zones.
# Mean proportion squirrel biomass in transition zone.
percent.squirrel.biomass.tz <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'tz' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# Mean proportion squirrel biomass in coastal zone.
percent.squirrel.biomass.cs <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'cs' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# Percent squirrel biomass per nest, by zone.
percent.squirrel.biomass.zone.nest <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total) %>%
distinct(zone, nest, cmass)
# P-value for unpaired two-sample t-test for squirrel biomass between zones.
p.value.squirrel.biomass.zone <- t.test(cmass ~ zone,
data=percent.squirrel.biomass.zone.nest, var.equal=TRUE) %>%
glance() %>% select(p.value) %>% peretty()
# Test statistic for pellet data chi-squared test.
x.stat.pellet <- zone.chi %>% filter(source == 'P') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for pellet data chi-squared test.
p.value.pellet <- zone.chi %>% filter(source == 'P') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty()
# Test statistic for combined pellets-and-remains data chi-squared test.
x.stat.rp <- zone.chi %>% filter(source == 'RP') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for combined pellet-and-remains data chi-squared test.
p.value.rp <- zone.chi %>% filter(source == 'RP') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty()
# Test statistic for camera data chi-squared test.
x.stat.camera <- zone.chi %>% filter(source == 'C') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for camera data chi-squared test.
p.value.camera <- zone.chi %>% filter(source == 'C') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty()
# Calculate productivity for each nest by zone.
productivity.zone <- left_join(productivity, centroids.sf, by=c('site', 'name')) %>%
select(site, year, n.fledge, zone) %>%
mutate(nest=paste0(site, year))
p.value.productivity.zone <- t.test(n.fledge ~ zone, data=temp) %>% glance() %>%
select(p.value) %>% peretty()
p.value.productivity.zone <- t.test(n.fledge ~ zone, data=productivity.zone) %>% glance() %>%
select(p.value) %>% peretty()
# Calculate productivity for each nest by zone.
productivity.zone <- left_join(productivity, centroids.sf, by=c('site', 'name')) %>%
select(site, year, n.fledge, zone) %>%
mutate(nest=paste0(site, year))
p.value.productivity.zone <- t.test(n.fledge ~ zone, data=productivity.zone) %>% glance() %>%
select(p.value) %>% peretty()
nest.mass
# Make a happy data set for the models to use.
fake.data <- productivity %>% mutate(nest=paste(site, year, sep='')) %>%
left_join(nest.diversity, by=c('nest')) %>%
left_join(nest.mass, by=c('nest')) %>%
select(site, year, nest, n.fledge, diet.diversity, grouse) %>%
filter_all(all_vars(!is.na(.)))
fake.model <- lm(n.fledge ~ grouse, data=fake.data)
summary(fake.model)
# Make a happy data set for the models to use.
fake.data <- productivity %>% mutate(nest=paste(site, year, sep='')) %>%
left_join(nest.diversity, by=c('nest')) %>%
left_join(nest.mass, by=c('nest')) %>%
select(site, year, nest, n.fledge, diet.diversity, Aves) %>%
filter_all(all_vars(!is.na(.)))
fake.model <- lm(n.fledge ~ Aves, data=fake.data)
summary(fake.model)
