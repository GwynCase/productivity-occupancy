hsi.class.wide <- hsi.class.amount %>% select(value, class.name, site) %>%
pivot_wider(names_from=class.name, values_from=value,
values_fill=list(count = 0), by=site)
vri.class.wide <- vri.class.amount %>% select(value, category, site) %>%
pivot_wider(names_from=category, values_from=value,
values_fill=list(count = 0)) %>%
rename(across(2:7))
vri.class.wide <- vri.class.amount %>% select(value, category, site) %>%
pivot_wider(names_from=category, values_from=value,
values_fill=list(count = 0)) %>%
dplyr::rename(across(2:7))
vri.class.wide <- vri.class.amount %>% select(value, category, site) %>%
pivot_wider(names_from=category, values_from=value,
values_fill=list(count = 0)) %>%
rename(dplyr::across(2:7))
vri.class.wide <- vri.class.amount %>% select(value, category, site) %>%
pivot_wider(names_from=category, values_from=value,
values_fill=list(count = 0)) %>%
dpyr::rename(dplyr::across(2:7))
vri.class.wide <- vri.class.amount %>% select(value, category, site) %>%
pivot_wider(names_from=category, values_from=value,
values_fill=list(count = 0)) %>%
dplyr::rename(dplyr::across(2:7))
right_join(vri.class.wide, hsi.class.wide) %>% mutate_all(funs(replace_na(., 0)))
right_join(vri.class.wide, hsi.class.wide) %>% mutate_all(list(replace_na(., 0)))
right_join(vri.class.wide, hsi.class.wide) %>% coalesce(., 0)
test <- right_join(vri.class.wide, hsi.class.wide)
class(test$water)
coalesce(test, 0)
replace_na(test, 0)
replace_na(list(test = 0))
replace_na(list(test$land = 0))
test %>% replace_na(list(land = 0))
test %>% replace_na(list(2:5 = 0))
test %>% replace_na(list(. = 0))
test %>% replace_na(list(land, 0))
test %>% replace_na(list(land = 0))
test %>% mutate_all(replace_na(list(. = 0)))
test %>% mutate(across(everything(), ~replane_na(.x, 0)))
test %>% mutate(across(everything(), ~replace_na(.x, 0)))
install.packages("GGally")
library(GGally)
ggcor(test, method=c('everything', 'pearson'))
ggcorr(test, method=c('everything', 'pearson'))
ggpairs(test)
test %>% select(-site) %>% ggpairs()
View(test)
test <- right_join(vri.class.wide, hsi.class.wide) %>%
mutate(across(everything(), ~replace_na(.x, 0)))
test %>% select(-site) %>% ggpairs()
ggcorr(test, method=c('everything', 'pearson'))
right_join(vri.class.wide, hsi.class.wide) %>%
mutate(across(everything(), ~replace_na(.x, 0))) %>%
select(-site) %>% ggpairs()
right_join(vri.class.wide, hsi.class.wide) %>%
mutate(across(everything(), ~replace_na(.x, 0))) %>%
select(-site) %>% ggcor()
right_join(vri.class.wide, hsi.class.wide) %>%
mutate(across(everything(), ~replace_na(.x, 0))) %>%
select(-site) %>% ggcorr()
bec.type.amount
bec.type.wide <- bec.type.amount %>%
pivot_wider(names_from=map_label, values_from=total,
values_fill=list(count = 0))
right_join(bec.type.wide, hsi.class.wide) %>%
mutate(across(everything(), ~replace_na(.x, 0))) %>%
select(-site) %>% ggcor()
right_join(bec.type.wide, hsi.class.wide) %>%
mutate(across(everything(), ~replace_na(.x, 0))) %>%
select(-site) %>% ggcorr()
right_join(bec.type.wide, hsi.class.wide)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load libraries.
library(tidyverse)
library(ggplot2)
library(sf)
library(raster)
library(landscapemetrics)
library(vegan)
library(ggbiplot)
library(GGally)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
source('../src/prey_attributes.R')
# Fix that pesky squirrel... twice.
items <- items %>% mutate(common=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'Douglas squirrel',
TRUE ~ common
))
items <- items %>% mutate(species=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'douglasii',
TRUE ~ species
))
items[sample(1:nrow(items), 10, replace=FALSE),]
# Twist camera data wide.
cam.genus.wide <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
dplyr::select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count,
values_fill=list(count = 0))
# Calculate Simpson's diversity index.
cam.simpson <- plyr::ddply(cam.genus.wide, ~site, function(x) {
data.frame(simpson=diversity(x[-1], index='simpson'))
})
ggplot(cam.simpson, aes(x=site, y=simpson)) +
geom_bar(stat='identity') +
labs(title='Diet diversity', y='Simpson Index', x='Site') +
coord_flip() +
theme_classic()
# Calculate proportion of mammal biomass per site.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Mammalia') %>%
mutate(amount.ml=sum(mass), prop.ml=amount.ml/total) %>%
dplyr::select(site, prop.ml) %>% distinct()
# Calculate proportion of avian biomass per site.
avian.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(class == 'Aves') %>%
mutate(amount.av=sum(mass), prop.av=amount.av/total) %>%
dplyr::select(site, prop.av) %>% distinct()
# Join them together.
biomass.ratio <- right_join(mammal.mass, avian.mass) %>% mutate(ratio=prop.ml/prop.av) %>%
rename(mammalian=prop.ml, avian=prop.av) %>%
pivot_longer(cols=2:3, names_to='group', values_to='proportion')
# Graph it.
ggplot(biomass.ratio, aes(x=site, y=proportion, fill=group)) +
geom_bar(position='stack', stat='identity') +
labs(title='Proportion biomass by class', x='Site', y='Proportion biomass', fill='Class') +
coord_flip() +
theme_classic()
# Calculate proportion of squirrel biomass per site.
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), prop.sq=amount.sq/total) %>%
select(site, prop.sq) %>% distinct()
ggplot(squirrel.mass, aes(x=site, y=prop.sq)) +
geom_bar(stat='identity') +
labs(title='Squirrel dominance in diet', y='Proportion squirrel biomass', x='Site') +
coord_flip() +
theme_classic()
# Make rownames for prcomp.
genus.wide.rn <- cam.genus.wide %>% column_to_rownames(var='site')
# Make the PCA.
diet.pca <- prcomp(genus.wide.rn, center=TRUE, scale=TRUE)
# Check it out.
ggbiplot(diet.pca, labels=rownames(genus.wide.rn)) +
xlim(-2, 2) +
ylim(-2, 2) +
theme_classic()
# Import the BEC raster.
r.bec <- raster('../data/interim/bec_raster_SC.tif')
# Import the original shapefile.
shp.bec <- st_read('../data/processed/BEC_annual-homerange_clipped.shp')
# Get BEC levels.
bec.levels <- data.frame((shp.bec[["MAP_LABEL"]])) %>%
rownames_to_column() %>%
rename(ID=1, map_label=2) %>%
mutate(ID=as.numeric(ID))
# Add levels to raster.
levels(r.bec) <- bec.levels
# Import nests and calculate centroids.
cam.sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>%
group_by(name) %>%
mutate_at(c('lat', 'lon'), mean) %>%
mutate_at(vars(starts_with('status')), max) %>%
mutate_at(c('telemetry', 'cameras', 'remains'), max) %>%
dplyr::select(-nest, -NOTES) %>%
distinct() %>%
filter(cameras > 0)
# Drop TCR, ungroup.
cam.sites <- cam.sites %>% filter(site != 'TCR') %>%
ungroup() %>%
rownames_to_column(var='plot_id') %>%
mutate(plot_id=as.integer(plot_id))
# Make site table a spatial object and make it UTMs.
cam.sites.sf <- ungroup(cam.sites) %>% st_as_sf(coords=c('lon', 'lat')) %>%
st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")
# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)
# Calculate amount of each BEC type.
bec.class.amount <- sample_lsm(r.bec, y=cam.sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
inner_join(bec.levels, by=c('class'='ID')) %>%
inner_join(cam.sites)
# Regroup by forest type bc stupid reasons.
bec.type.amount <- bec.class.amount %>% group_by(site, map_label) %>%
summarize(total=sum(value))
# Graph it.
ggplot(bec.type.amount, aes(x='', y=total, fill=as.factor(map_label))) +
geom_bar(stat='identity', width=1, color='white') +
facet_wrap(~site) +
labs(fill='Forest type') +
coord_polar('y', start=0) +
theme_void()
# What type is dominant, and by how much?
bec.type.amount %>% ungroup() %>%
group_by(site) %>%
mutate(area=sum(total)) %>%
group_by(map_label) %>%
mutate(per=total/area) %>%
ungroup() %>% group_by(site) %>%
top_n(1, total) %>%
select(site=site, forest.type=map_label, amount=total, percent=per)
# Calculate Simpson's diversity index.
bec.shdi <- sample_lsm(r.bec, y=cam.sites.sf, size=r.hr.m, what='lsm_l_shdi',
shape='circle') %>%
inner_join(cam.sites)
bec.shdi %>% select(site, value) %>%
ggplot(aes(x=site, y=value)) +
geom_bar(stat='identity') +
labs(title='Landscape diversity', y='Simpson Index', x='Site') +
coord_flip() +
theme_classic()
# Import the VRI raster.
r.vri <- raster('../data/interim/vri_camera-sites_2019.tif')
# Calculate area per class per site.
vri.class.amount <- sample_lsm(r.vri, y=cam.sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with habitat class name.
left_join(data.frame(levels(r.vri)), by=c('class'='ID')) %>%
inner_join(cam.sites)
# Graph it.
ggplot(vri.class.amount, aes(x='', y=value, fill=as.factor(category))) +
geom_bar(stat='identity', width=1, color='white') +
facet_wrap(~site) +
labs(fill='Landcover') +
coord_polar('y', start=0) +
theme_void()
# Import the raster.
r.f.hsi <- raster('../data/processed/foraging_sc.tif')
# Define levels for the raster.
f.hsi.levels <- data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3),
class.name=c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'))
# Add the levels to the raster.
levels(r.f.hsi) <- f.hsi.levels
# Calculate area per class per site.
hsi.class.amount <- sample_lsm(r.f.hsi, y=cam.sites.sf, size=r.hr.m, what='lsm_c_ca',
shape='circle') %>%
# Amend class number with habitat class name.
left_join(data.frame(levels(r.f.hsi)), by=c('class'='ID')) %>%
inner_join(cam.sites)
# Graph it.
ggplot(hsi.class.amount, aes(x='', y=value, fill=as.factor(class))) +
geom_bar(stat='identity', width=1, color='white') +
facet_wrap(~site) +
labs(fill='Suitability') +
coord_polar('y', start=0) +
theme_void()
hsi.contagion <- sample_lsm(r.f.hsi, y=cam.sites.sf, size=r.hr.m, what='lsm_l_contag',
shape='circle')%>%
inner_join(cam.sites)
hsi.contagion %>% select(site, value) %>%
ggplot(aes(x=site, y=value)) +
geom_bar(stat='identity') +
labs(title='Landscape contagion', y='Contagion', x='Site') +
coord_flip() +
theme_classic()
install.packages("plotly")
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
library(plotly)
fig <- plot_ly(
labels = c("Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c("", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c(10, 14, 12, 10, 2, 6, 6, 4, 4),
type = 'sunburst'
)
fig
devtools::install_github('sunburstR')
devtools::install_github('sunburstR')
devtools::install_github('timelyportfolio/sunburstR')
library(sunburstR)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
source('../src/prey_attributes.R')
# Fix that pesky squirrel... twice.
items <- items %>% mutate(common=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'Douglas squirrel',
TRUE ~ common
))
items <- items %>% mutate(species=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'douglasii',
TRUE ~ species
))
head(items)
things.only <- items %>% select(-site, -mass)
install.packages("d3r")
library(d3r)
tree <- d3_nest(things.only, value_cols='species')
tree
sb <- sunburst(
tree,
legend = FALSE,
width = "100%",
height = 400
)
sb
sb
fig <- plot_ly(things.only, type='sunburst')
fig
fig
data.frame(
labels = c("Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c("", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c(10, 14, 12, 10, 2, 6, 6, 4, 4)
)
data.frame(
labels = c("Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c("", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c(10, 14, 12, 10, 2, 6, 6, 4, 4))
items %>% mutate(total.biomass=sum(mass))
items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum())
items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass))
items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(species, genus, family, class, total.mass) %>%
distinct()
rf <- items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(species, genus, family, class, total.mass) %>%
distinct()
bib <-data.frame(
labels = c("Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c("", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c(10, 14, 12, 10, 2, 6, 6, 4, 4))
bib
plot_ly(bib, type='sunburst')
cf <- read.csv('https://raw.githubusercontent.com/plotly/datasets/718417069ead87650b90472464c7565dc8c2cb1c/coffee-flavors.csv')
View(cf)
coffig <- plot_ly()
test.df <- data.fram(
family=c('S', 'S', 'S', 'T', 'T', 'T'),
genus=c('T', 'T', 'G', 'T', 'I', 'C'),
size=c(100, 20, 5, 6, 3, 5),
stringsAsFactors = FALSE
)
test.df <- data.frame(
family=c('S', 'S', 'S', 'T', 'T', 'T'),
genus=c('T', 'T', 'G', 'T', 'I', 'C'),
size=c(100, 20, 5, 6, 3, 5),
stringsAsFactors = FALSE
)
test.df
test.df <- data.frame(
family=c('S', 'S', 'S', 'Td', 'Th', 'T'),
genus=c('T', 'T', 'G', 'T', 'I', 'C'),
size=c(100, 20, 5, 6, 3, 5),
stringsAsFactors = FALSE
)
test.df
test.df <- data.frame(
family=c('S', 'S', 'S', 'T', 'T', 'T'),
genus=c('Td', 'Th', 'G', 'T', 'I', 'C'),
size=c(100, 20, 5, 6, 3, 5),
stringsAsFactors = FALSE
)
test.df
test.tree <- d3_nest(dat, value_cols = "size")
test.tree <- d3_nest(test.df, value_cols = "size")
sb1 <- sunburst(test.tree, width="100%", height=400)
sb1
test.df <- data.frame(
family=c('S', 'S', 'S', 'T', 'T', 'T'),
genus=c('Td', 'Th', 'G', 'T', 'I', 'C'),
size=c(100, 20, 5, 6, 3, 5),
stringsAsFactors = FALSE
)
test.df
test.tree <- d3_nest(test.df, value_cols = "size")
sb1 <- sunburst(test.tree, width="100%", height=400)
sb1
head(rf)
rf <- items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(family, class, genus, species total.mass) %>%
rf <- items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(family, class, genus, species, total.mass) %>%
distinct()
head(rf)
test.df
rf <- items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(class, family, genus, species, total.mass) %>%
distinct()
rf.tree <- d3_nest(rf, value_cols = "total.mass")
sb2 <- sunburst(rf.tree, width="100%", height=400)
sb2
rf <- items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(class, family, genus, species, total.mass) %>%
distinct()
rf.tree <- d3_nest(rf, value_cols = "total.mass")
sb2 <- sunburst(rf.tree, width="100%", height=400)
sb2
rf.small
rf.small <- rf %>% select(class, family, total.mass)
rf.small
rf.small <- rf %>% select(class, family, total.mass)
rf.small
head(rf)
rf.small <- rf %>% select(-genus, -species)
rf.small
rf.small <- rf %>% dplyr::select(-genus, -species)
rf.small
rf %>% dplyr::select(-genus, -species)
rf
rf %>% select(class)
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load libraries.
library(tidyverse)
library(sunburstR)
library(d3r)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
source('../src/prey_attributes.R')
# Fix that pesky squirrel... twice.
items <- items %>% mutate(common=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'Douglas squirrel',
TRUE ~ common
))
items <- items %>% mutate(species=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'douglasii',
TRUE ~ species
))
# Remove extra bits.
things.only <- items %>% select(-site, -mass)
tree <- d3_nest(things.only, value_cols='species')
sb <- sunburst(
tree,
legend = FALSE,
width = "100%",
height = 400
)
sb
fig <- plot_ly(things.only, type='sunburst')
library(plotly)
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
source('../src/prey_attributes.R')
# Fix that pesky squirrel... twice.
items <- items %>% mutate(common=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'Douglas squirrel',
TRUE ~ common
))
items <- items %>% mutate(species=case_when(
genus == 'Tamiasciurus' & species == 'sp' ~ 'douglasii',
TRUE ~ species
))
# Remove extra bits.
things.only <- items %>% select(-site, -mass)
tree <- d3_nest(things.only, value_cols='species')
sb <- sunburst(
tree,
legend = FALSE,
width = "100%",
height = 400
)
sb
fig <- plot_ly(things.only, type='sunburst')
fig
fig
bib <-data.frame(
labels = c("Eve", "Cain", "Seth", "Enos", "Noam", "Abel", "Awan", "Enoch", "Azura"),
parents = c("", "Eve", "Eve", "Seth", "Seth", "Eve", "Eve", "Awan", "Eve"),
values = c(10, 14, 12, 10, 2, 6, 6, 4, 4))
bib
rf <- items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(class, family, genus, species, total.mass) %>%
distinct()
plot_ly(bib, type='sunburst')
test.df <- data.frame(
family=c('S', 'S', 'S', 'T', 'T', 'T'),
genus=c('Td', 'Th', 'G', 'T', 'I', 'C'),
size=c(100, 20, 5, 6, 3, 5),
stringsAsFactors = FALSE
)
test.df
test.tree <- d3_nest(test.df, value_cols = "size")
sb1 <- sunburst(test.tree, width="100%", height=400)
sb1
rf.tree <- d3_nest(rf, value_cols = "total.mass")
sb2 <- sunburst(rf.tree, width="100%", height=400)
sb2
rf.small <- rf %>% dplyr::select(-genus, -species)
rf.small
rf.small <- items %>% group_by(class, family, genus, species) %>%
mutate(total.mass=sum(mass)) %>%
select(class, family, total.mass) %>%
distinct()
rf.small
rf.small %>% dplyr::select(genus)
detach(plotly)
detach('plotly')
