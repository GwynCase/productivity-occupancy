nested
resids <- unnest(nested, resids)
resids
View(resids)
# Plot the residuals.
resids %>%
ggplot(aes(sidi, resid)) +
geom_line(alpha = 1 / 3) +
facet_wrap(~size)
# Plot the residuals.
resids %>%
ggplot(aes(sidi, resid)) +
geom_line(alpha = 1 / 3)
# Plot the residuals.
resids %>%
ggplot(aes(sidi, resid, group=size)) +
geom_line(alpha = 1 / 3)
library(broom)
# Apply broom.
nested %>%
mutate(glance=map(model, broom::glance)) %>%
unnest(glance)
# Apply broom.
nested %>%
mutate(glance=map(model, broom::glance)) %>%
unnest(glance, .drop=TRUE)
# Apply broom.
swept <- nested %>%
mutate(glance=map(model, broom::glance)) %>%
unnest(glance)
View(swept)
nested$model
nested$model[[1]]
summary(nested$model[[1]])
library(AICcmodavg)
# Can I put them in an AIC?
modlist <- list(nested$model[[1]], nested$model[[2]], nested$model[[3]], nested$model[[4]])
modnames <- c('PFA', 'breeding area', 'breeding home range', 'max')
aictab(modlist, modnames=modnames)
# And join on it on to the landscape data for each sample size, and nest it.
bec.and.diet <- right_join(bec.ls.metrics, diet.data, by=c('plot_id'='site')) %>%
right_join(ls, by=c('ls.size'='radius')) %>%
group_by(size) %>%
nest()
View(bec.and.diet)
View(bec.and.diet[[2]][[1]])
# The diversity of the diet is determined by the diversity of forest types in which birds can hunt.
# H: Each forest type supports a different set of prey species, so more of more forest types means more kinds prey species. Assumes (I think) that birds hunt in proportion to forest type availability.
diversity.by.diversity <- function(df){
lm(simpson ~ sidi, data=data)
}
View(bec.and.diet[[2]][[1]])
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
richness.by.richness <- function(df){
lm(n.sp ~ pr, data=data)
}
# Add multiple models to the nested data frame.
bec.and.date %>%
mutate(div.x.div=map(data, diversity.by.diversity))
# Add multiple models to the nested data frame.
bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity))
diversity model
diversity.model
diversity.by.diversity
# The diversity of the diet is determined by the diversity of forest types in which birds can hunt.
# H: Each forest type supports a different set of prey species, so more of more forest types means more kinds prey species. Assumes (I think) that birds hunt in proportion to forest type availability.
diversity.by.diversity <- function(df){
lm(simpson ~ sidi, data=df)
}
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
richness.by.richness <- function(df){
lm(n.sp ~ pr, data=df)
}
# Add multiple models to the nested data frame.
bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity))
# Add multiple models to the nested data frame.
bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity)
rich.x.rich=map(data, richness.by.richness))
# Add multiple models to the nested data frame.
bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity),
rich.x.rich=map(data, richness.by.richness))
aictab(modlist)
# Add multiple models to the nested data frame.
multmod <- bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity),
rich.x.rich=map(data, richness.by.richness))
aictab(multmod$div.x.div)
aictab(multmod$div.x.div, modnames=multmod$size)
# Multiple columns?
aictab(c(multmod$div.x.div, multmod$rich.x.rich))
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
diversity.by.richness <- function(df){
lm(simspon ~ pr, data=df)
}
# Multiple columns?
aictab(c(multmod$div.x.div, multmod$div.x.rich))
# Add multiple models to the nested data frame.
multmod <- bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity),
rich.x.rich=map(data, diversity.by.richness))
# One column at a time.
aictab(multmod$div.x.div, modnames=multmod$size)
# Add multiple models to the nested data frame.
multmod <- bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity),
div.x.rich=map(data, diversity.by.richness))
# Multiple columns?
aictab(c(multmod$div.x.div, multmod$div.x.rich))
# Add multiple models to the nested data frame.
multmod <- bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity),
div.x.rich=map(data, diversity.by.richness))
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
diversity.by.richness <- function(df){
lm(simspon ~ pr, data=df)
}
# Add multiple models to the nested data frame.
multmod <- bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity),
div.x.rich=map(data, diversity.by.richness))
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
diversity.by.richness <- function(df){
lm(simpson ~ pr, data=df)
}
# Add multiple models to the nested data frame.
multmod <- bec.and.diet %>%
mutate(div.x.div=map(data, diversity.by.diversity),
div.x.rich=map(data, diversity.by.richness))
# Multiple columns?
aictab(c(multmod$div.x.div, multmod$div.x.rich))
View(multmod)
# Can I print column names?
mutlmod[[1]]
# Can I print column names?
multmod[[1]]
# Can I print column names?
multmod[[i]][[2]]
# Let's see how broom does.
glimpse(nested$model[[1]])
library(broom)
# Let's see how broom does.
glimpse(nested$model[[1]])
# Let's see how broom does.
glimpse(nested)
# Let's see how broom does.
broom::glimpse(nested)
# Let's see how broom does.
glance(nested$model[[1]])
glance(nested)
glance(multmod)
glance(multmod$div.x.div)
multmod$div.x.div
# Let's see how broom does.
swept2 <- multmod %>%
mutate(glance=map(div.x.div, broom::glance)) %>%
unnest(glance)
View(swept2)
# Add multiple models to the nested data frame.
multmod <- bec.and.diet %>%
mutate(m_div.x.div=map(data, diversity.by.diversity),
m_div.x.rich=map(data, diversity.by.richness))
# Let's see how broom does.
multmod %>%
mutate(glance=map(div.x.div, broom::glance)) %>%
unnest(glance)
# Let's see how broom does.
multmod %>%
mutate(glance=map(m_div.x.div, broom::glance)) %>%
unnest(glance)
# Let's see how broom does.
multmod %>%
mutate(glance=map(m_div.x.div, broom::glance)) %>%
unnest(glance) %>%
select(!starts_with('m_'))
# Let's see how broom does.
multmod %>%
mutate(glance=map(m_div.x.div, broom::glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# The diversity of the diet is determined by the diversity of forest types in which birds can hunt.
# H: Each forest type supports a different set of prey species, so more of more forest types means more kinds prey species. Assumes (I think) that birds hunt in proportion to forest type availability.
diversity.by.diversity <- function(df){
lm(simpson ~ sidi, data=df)
}
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
richness.by.richness <- function(df){
lm(n.sp ~ pr, data=df)
}
## The next two assume I use the PCA approach.
# The diet signature is determined by the dominant forest type.
# H: Birds forage in forest types according to their availability, with different each forest type providing a different set of prey species.
pc1.x.forest <- function(df){
lm(PC1 ~ category, data=df)
}
# Same as above, but the degree of forest dominance influences the strength of the diet signal.
pc1.x.forest <- function(df){
lm(PC1 ~ category + sidi, data=df)
}
# The ratio of mammal:bird biomass is determined by the dominant forest type.
# H: Mammals are higher quality prey than birds, and mammals are more common in certain forest types.
mammal.x.forest <- function(df){
lm(prop.ml ~ category, data=df)
}
# The proportion of squirrel biomass is determined by the dominant forest type.
# H: Same as above, just with squirrels as a major component of the diet.
mammal.x.forest <- function(df){
lm(prop.sq ~ category, data=df)
}
# The diversity of the diet is determined by the diversity of forest types in which birds can hunt.
# H: Each forest type supports a different set of prey species, so more of more forest types means more kinds prey species. Assumes (I think) that birds hunt in proportion to forest type availability.
diversity.by.diversity <- function(df){
lm(simpson ~ sidi, data=df)
}
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
richness.by.richness <- function(df){
lm(n.sp ~ pr, data=df)
}
## The next two assume I use the PCA approach.
# The diet signature is determined by the dominant forest type.
# H: Birds forage in forest types according to their availability, with different each forest type providing a different set of prey species.
pc1.x.forest <- function(df){
lm(PC1 ~ category, data=df)
}
# Same as above, but the degree of forest dominance influences the strength of the diet signal.
pc1.x.dominance <- function(df){
lm(PC1 ~ category + sidi, data=df)
}
# The ratio of mammal:bird biomass is determined by the dominant forest type.
# H: Mammals are higher quality prey than birds, and mammals are more common in certain forest types.
mammal.x.forest <- function(df){
lm(prop.ml ~ category, data=df)
}
# The proportion of squirrel biomass is determined by the dominant forest type.
# H: Same as above, just with squirrels as a major component of the diet.
mammal.x.forest <- function(df){
lm(prop.sq ~ category, data=df)
}
# The diversity of the diet is determined by the diversity of forest types in which birds can hunt.
# H: Each forest type supports a different set of prey species, so more of more forest types means more kinds prey species. Assumes (I think) that birds hunt in proportion to forest type availability.
diversity.by.diversity <- function(df){
lm(simpson ~ sidi, data=df)
}
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
richness.by.richness <- function(df){
lm(n.sp ~ pr, data=df)
}
## The next two assume I use the PCA approach.
# The diet signature is determined by the dominant forest type.
# H: Birds forage in forest types according to their availability, with different each forest type providing a different set of prey species.
pc1.by.forest <- function(df){
lm(PC1 ~ category, data=df)
}
# Same as above, but the degree of forest dominance influences the strength of the diet signal.
pc1.by.dominance <- function(df){
lm(PC1 ~ category + sidi, data=df)
}
# The ratio of mammal:bird biomass is determined by the dominant forest type.
# H: Mammals are higher quality prey than birds, and mammals are more common in certain forest types.
mammal.by.forest <- function(df){
lm(prop.ml ~ category, data=df)
}
# The proportion of squirrel biomass is determined by the dominant forest type.
# H: Same as above, just with squirrels as a major component of the diet.
mammal.by.forest <- function(df){
lm(prop.sq ~ category, data=df)
}
# The diversity of the diet is determined by the diversity of forest types in which birds can hunt.
# H: Each forest type supports a different set of prey species, so more of more forest types means more kinds prey species. Assumes (I think) that birds hunt in proportion to forest type availability.
diversity.by.diversity <- function(df){
lm(simpson ~ sidi, data=df)
}
# The richness of the diet is determined by the richness of forest types in which birds can hunt.
# H: Basically same as above, just a slightly simpler way of calculating things.
richness.by.richness <- function(df){
lm(n.sp ~ pr, data=df)
}
## The next two assume I use the PCA approach.
# The diet signature is determined by the dominant forest type.
# H: Birds forage in forest types according to their availability, with different each forest type providing a different set of prey species.
pc1.by.forest <- function(df){
lm(PC1 ~ category, data=df)
}
# Same as above, but the degree of forest dominance influences the strength of the diet signal.
pc1.by.dominance <- function(df){
lm(PC1 ~ category + sidi, data=df)
}
# The ratio of mammal:bird biomass is determined by the dominant forest type.
# H: Mammals are higher quality prey than birds, and mammals are more common in certain forest types.
mammal.by.forest <- function(df){
lm(prop.ml ~ category, data=df)
}
# The proportion of squirrel biomass is determined by the dominant forest type.
# H: Same as above, just with squirrels as a major component of the diet.
squirrel.by.forest <- function(df){
lm(prop.sq ~ category, data=df)
}
bec.models <- bec.and.diet %>%
mutate(m_div.x.div=map(data, diversity.by.diversity),
m_rich.x.rich=map(data, diversity.by.richness),
m_pc1.x.for=map(data, pc1.by.forest),
m_pc1.x.dom=map(data, pc1.by.dominance),
m_mm.x.for=map(data, mammal.by.forest),
m_sq.x.for=map(data, squirrel.by.forest)
)
View(bec.models)
# Diet diversity ~ forest type diversity.
bec.models %>%
mutate(glance=map(m_div.x.div, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_ml.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_mm.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion squirrel ~ forest type.
bec.models %>%
mutate(glance=map(m_sq.x.fot, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_mm.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion squirrel ~ forest type.
bec.models %>%
mutate(glance=map(m_sq.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
bec.models %>%
mutate(glance=map(m_pc1.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
bec.models %>%
mutate(glance=map(m_pc1.x.dom, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
aictab(c(multmod$m_pc1.x.for, multmod$m_pc1.x.dom))
aictab(c(bec.models$m_pc1.x.for, bec.models$m_pc1.x.dom))
bec.models %>%
mutate(glance=map(m_pc1.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
bec.models %>%
mutate(glance=map(m_pc1.x.dom, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
aictab(c(bec.models$m_pc1.x.for, bec.models$m_pc1.x.dom))
bec.models <- bec.and.diet %>%
mutate(m_div.x.div=map(data, diversity.by.diversity),
m_rich.x.rich=map(data, richness.by.richness),
m_pc1.x.for=map(data, pc1.by.forest),
m_pc1.x.dom=map(data, pc1.by.dominance),
m_mm.x.for=map(data, mammal.by.forest),
m_sq.x.for=map(data, squirrel.by.forest)
)
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_mm.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion squirrel ~ forest type.
bec.models %>%
mutate(glance=map(m_sq.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
bec.models <- bec.and.diet %>%
mutate(m_div.x.div=map(data, diversity.by.diversity),
m_rich.x.rich=map(data, diversity.by.richness),
m_pc1.x.for=map(data, pc1.by.forest),
m_pc1.x.dom=map(data, pc1.by.dominance),
m_mm.x.for=map(data, mammal.by.forest),
m_sq.x.for=map(data, squirrel.by.forest)
)
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_mm.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion squirrel ~ forest type.
bec.models %>%
mutate(glance=map(m_sq.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
bec.models <- bec.and.diet %>%
mutate(m_div.x.div=map(data, diversity.by.diversity),
m_rich.x.rich=map(data, richness.by.richness),
m_pc1.x.for=map(data, pc1.by.forest),
m_pc1.x.dom=map(data, pc1.by.dominance),
m_mm.x.for=map(data, mammal.by.forest),
m_sq.x.for=map(data, squirrel.by.forest)
)
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_mm.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion squirrel ~ forest type.
bec.models %>%
mutate(glance=map(m_sq.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
bec.models <- bec.and.diet %>%
mutate(m_div.x.div=map(data, diversity.by.diversity),
m_rich.x.rich=map(data, diversity.by.richness),
m_pc1.x.for=map(data, pc1.by.forest),
m_pc1.x.dom=map(data, pc1.by.dominance),
m_mm.x.for=map(data, mammal.by.forest),
m_sq.x.for=map(data, squirrel.by.forest)
)
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_mm.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion squirrel ~ forest type.
bec.models %>%
mutate(glance=map(m_sq.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
diversity.by.richness
diversity.by.richness <- function(df){
lm(simpson ~ pr, data=df)
}
bec.models <- bec.and.diet %>%
mutate(m_div.x.div=map(data, diversity.by.diversity),
m_rich.x.rich=map(data, richness.by.richness),
m_div.x.rich=map(data, diversity.by.richness),
m_pc1.x.for=map(data, pc1.by.forest),
m_pc1.x.dom=map(data, pc1.by.dominance),
m_mm.x.for=map(data, mammal.by.forest),
m_sq.x.for=map(data, squirrel.by.forest)
)
# Diet richness ~ forest type richness.
bec.models %>%
mutate(glance=map(m_rich.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Diet diversity ~ forest type richness.
bec.models %>%
mutate(glance=map(m_div.x.rich, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion mammal ~ forest type.
bec.models %>%
mutate(glance=map(m_mm.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Proportion squirrel ~ forest type.
bec.models %>%
mutate(glance=map(m_sq.x.for, glance)) %>%
unnest(glance) %>%
select(!c(starts_with('m_'), data))
# Diet diversity ~ forest type diversity.
bec.models %>%
mutate(summary=map(m_div.x.div, glance)) %>%
unnest(summary) %>%
select(!c(starts_with('m_'), data))
library(broom)
