cell_spec(x, bold = T,
color = spec_color(x, start=0, end=0.9))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, begin=0, end=0.9))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
cell_spec(x, bold = T,
color = spec_color(x, begin=0, end=0.9, scale_from(c(0,0.9))))
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, begin=0, end=0.9, scale_from(c(0,0.9))))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, scale_from=range(0, 90)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
range(unlist(top.table)
)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, scale_from=range(0, 50)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 50)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=1, scale_from=range(0, 50)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(digits=2) %>%
kable_styling(full_width = F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
test <- data.frame(text = "hello", number1 = 1.135, number2 = 2.135)
kable(test, digits = 2)
kable(test, digits = 2)
top2 <- top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
})
kable(top2, digits = 2, escape=F)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
detatch('package:formattable', unload=TRUE)
detach('package:formattable', unload=TRUE)
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(digits=2, escape=F) %>%
kable_styling(full_width = F)
site.mass <- items %>%
mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(s.mass=sum(mass)) %>%
ungroup() %>%
group_by(site, common) %>%
mutate(biomass=sum(mass), p.biomass=(biomass/s.mass*100)) %>%
mutate(p.biomass=round(p.biomass, digits=2)) %>%
ungroup()
# Redo the biomass calculation on a per-site basis.
site.mass <- items %>%
mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(s.mass=sum(mass)) %>%
ungroup() %>%
group_by(site, common) %>%
mutate(biomass=sum(mass), p.biomass=(biomass/s.mass*100)) %>%
ungroup()
items %>%
mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(s.mass=sum(mass)) %>%
ungroup() %>%
group_by(site, common) %>%
mutate(biomass=sum(mass), p.biomass=(biomass/s.mass*100)) %>%
mutate(p.biomass=round(p.biomass, digits=2)) %>%
ungroup()
site2 <- items %>%
mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(s.mass=sum(mass)) %>%
ungroup() %>%
group_by(site, common) %>%
mutate(biomass=sum(mass), p.biomass=(biomass/s.mass*100)) %>%
mutate(p.biomass=round(p.biomass, digits=2)) %>%
ungroup()
View(site2)
# Redo the biomass calculation on a per-site basis.
site.mass <- items %>%
mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(s.mass=sum(mass)) %>%
ungroup() %>%
group_by(site, common) %>%
mutate(biomass=sum(mass), p.biomass=(biomass/s.mass*100)) %>%
mutate(p.biomass=round(p.biomass, digits=2)) %>%
ungroup()
# What are the most common prey items, identified to species, by biomass?
top.prey <- prey.table %>%
ungroup() %>%
filter(name != ' ') %>%
top_n(10, p.biomass)
top.prey
# Redo the biomass calculation on a per-site basis.
site.mass <- items %>%
mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(s.mass=sum(mass)) %>%
ungroup() %>%
group_by(site, common) %>%
mutate(biomass=sum(mass), p.biomass=(biomass/s.mass*100)) %>%
mutate(p.biomass=round(p.biomass, digits=2)) %>%
ungroup()
# Pull out prey all prey items which match these criteria.
top.items <- semi_join(site.mass, top.prey, by='common') %>%
unite(name, 4:5, sep=' ', remove=FALSE) %>%
mutate(name=case_when(
name == 'Unknown unknown' ~ ' ',
TRUE ~ name
)) %>%
dplyr::select(site, common, p.biomass) %>%
distinct()
# Reorganize the data.
top.table <- top.items %>% spread(common, p.biomass) %>%
replace(is.na(.), 0) %>%
mutate(total = rowSums(.[2:11]))
# And make a pretty table.
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(escape=F) %>%
kable_styling(full_width = F)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load up some libraries.
library('tidyverse')
library('lubridate')
library('ggplot2')
library('knitr')
library('kableExtra')
# Import the data.
df <- read.csv('../data/interim/camera_corrected.csv', stringsAsFactors=FALSE)
# Do the datetime thing.
df <- df %>% mutate(datetime=parse_date_time(datetime,
orders=c('%Y-%m-%d %H:%M:%S', '%Y/%m/%d %H:%M:%S')))
source('../src/prey_attributes.R')
head(items)
# Do the calculations
mass.table <- items %>% mutate(mass=as.numeric(mass)) %>%
# Calculate totall biomass & total count.
mutate(t.biomass=sum(mass), t.n=n()) %>%
group_by(common) %>%
# Calcuate biomass and count by group.
# Calculate percent biomass and count by group.
mutate(n=n(), biomass=sum(mass), p.biomass=(biomass/t.biomass*100),
p.n=(n/t.n*100))
# Make a pretty table.
prey.table <- mass.table %>% arrange(class, group, genus) %>%
unite(name, 4:5, sep=' ', remove=FALSE) %>%
mutate(name=case_when(
name == 'Unknown unknown' ~ ' ',
TRUE ~ name
)) %>%
dplyr::select(common, name, n, p.n, p.biomass) %>%
distinct()
# Print it out.
prey.table %>%
kable(col.names=(c('Prey species', '', 'Count', '% count', '% biomass')),
digits=2) %>%
kable_styling(full_width=TRUE) %>%
pack_rows('Large birds (> 150 g)', 1, 3) %>%
pack_rows('Medium birds (60-150 g)', 4, 8) %>%
pack_rows('Small birds (< 40 g)', 9, 10) %>%
pack_rows('Large mammals (> 600 g)', 11, 12) %>%
pack_rows('Medium mammals (200-600 g)', 13, 18) %>%
pack_rows('Small mammals (< 200 g)', 19, 22) %>%
pack_rows('Unidentified items', 23, 24)
# What are the most common prey items, identified to species, by biomass?
top.prey <- prey.table %>%
ungroup() %>%
filter(name != ' ') %>%
top_n(10, p.biomass)
top.prey
# Redo the biomass calculation on a per-site basis.
site.mass <- items %>%
mutate(mass=as.numeric(mass)) %>%
group_by(site) %>%
mutate(s.mass=sum(mass)) %>%
ungroup() %>%
group_by(site, common) %>%
mutate(biomass=sum(mass), p.biomass=(biomass/s.mass*100)) %>%
mutate(p.biomass=round(p.biomass, digits=2)) %>%
ungroup()
# Pull out prey all prey items which match these criteria.
top.items <- semi_join(site.mass, top.prey, by='common') %>%
unite(name, 4:5, sep=' ', remove=FALSE) %>%
mutate(name=case_when(
name == 'Unknown unknown' ~ ' ',
TRUE ~ name
)) %>%
dplyr::select(site, common, p.biomass) %>%
distinct()
# Reorganize the data.
top.table <- top.items %>% spread(common, p.biomass) %>%
replace(is.na(.), 0) %>%
mutate(total = rowSums(.[2:11]))
# And make a pretty table.
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(escape=F) %>%
kable_styling(full_width = F)
# And make a pretty table.
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x, bold = T,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(escape=F) %>%
kable_styling(full_width = T)
# And make a pretty table.
top.table %>%
mutate_if(is.numeric, function(x) {
cell_spec(x,
color = spec_color(x, end=0.9, direction=-1, scale_from=range(0, 55)))
}) %>%
kable(escape=F) %>%
kable_styling(full_width = T)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load up some libraries.
library('tidyverse')
library('lubridate')
library('vegan')
library('ggplot2')
library('knitr')
library('kableExtra')
# Import the data.
df <- read.csv('../data/interim/camera_corrected.csv', stringsAsFactors=FALSE)
# Do the datetime thing.
df <- df %>% mutate(datetime=parse_date_time(datetime,
orders=c('%Y-%m-%d %H:%M:%S', '%Y/%m/%d %H:%M:%S')))
source('../src/prey_attributes.R')
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
dplyr::select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count,
values_fill=list(count = 0))
to.genus
# Remove the oddity.
to.genus <- to.genus %>% dplyr::select(-`Tamiasciurus sp`)
# And run Simpson's index of diversity.
simpson <- plyr::ddply(to.genus, ~site, function(x) {
data.frame(simpson=diversity(x[-1], index='simpson'))
})
simpson
simpson %>% add_column(rating=c(5, 3, 1, 2, 4, 6)) %>%
ggplot(aes(x=rating, y=simpson, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
dist <- vegdist(to.genus[-1 ], method='morisita')
as.matrix(dist)
dist <- vegdist(to.genus[-1 ], method='morisita') %>%
as.matrix()
vegdist(to.genus[-1 ], method='morisita')
dist <- vegdist(to.genus[-1 ], method='morisita')
colnames(dist) <- c('a', 'b', 'c', 'd')
dimnames(dist)
dims(dist)
as.matrix(dist)
m.dist <- as.matrix(dist)
colnames(m.dist) <- c('a', 'b', 'c', 'd')
colnames(m.dist) <- c('a', 'b', 'c', 'd', 'e', 'f')
colnames(dist) <- c('a', 'b', 'c', 'd', 'e', 'f')
dimnames(dist) <- c('a', 'b', 'c', 'd', 'e', 'f')
m.dist
morisita <- vegdist(to.genus[-1 ], method='morisita') %>%
as.matrix
morisita <- vegdist(to.genus[-1 ], method='morisita') %>%
as.matrix
colnames(morisita) <- c('MTC', 'MTF', 'RLK', 'TCR', 'TMC', 'UTZ')
morisita
rownames(morisita) <- c('MTC', 'MTF', 'RLK', 'TCR', 'TMC', 'UTZ')
morisita
to.genus %>% filter(site %in% c('MTC', 'TCR'))
items %>% filter(site %in% c('MTC', 'TCR')) %>%
distinct()
check <- to.genus %>% filter(site %in% c('MTC', 'TCR')) %>%
5
check <- to.genus %>% filter(site %in% c('MTC', 'TCR'))
View(check)
to.genus %>% filter(site %in% c('MTC', 'TCR'))
vegdist(to.genus, method='morisita')
to.genus <- arrange(desc(site))
to.genus <- to.genus %>% arrange(desc(site))
View(to.genus)
vegdist(to.genus, method='morisita')
vegdist(to.genus[-1 ], method='morisita')
to.genus$site
check <- to.genus %>% filter(site %in% c('MTC', 'TCR'))
View(check)
check <- to.genus %>% filter(site %in% c('MTC', 'TCR'))
View(check)
data(dune)
View(dune)
letters()
letters
letters[1:20]
names <- letters[1:20]
data(dune) %>% bind_rows(names)
sites <- c(site, letters[1:20])
sites <- c('site', letters[1:20])
data(dune) %>% bind_rows(sites)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Load up some libraries.
library('tidyverse')
library('lubridate')
library('vegan')
library('ggplot2')
library('knitr')
library('kableExtra')
# Import the data.
df <- read.csv('../data/interim/camera_corrected.csv', stringsAsFactors=FALSE)
# Do the datetime thing.
df <- df %>% mutate(datetime=parse_date_time(datetime,
orders=c('%Y-%m-%d %H:%M:%S', '%Y/%m/%d %H:%M:%S')))
source('../src/prey_attributes.R')
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
dplyr::select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count,
values_fill=list(count = 0))
to.genus
# Remove the oddity.
to.genus <- to.genus %>% dplyr::select(-`Tamiasciurus sp`)
# And run Simpson's index of diversity.
simpson <- plyr::ddply(to.genus, ~site, function(x) {
data.frame(simpson=diversity(x[-1], index='simpson'))
})
simpson
simpson %>% add_column(rating=c(5, 3, 1, 2, 4, 6)) %>%
ggplot(aes(x=rating, y=simpson, label=site)) +
geom_point() +
geom_text(hjust='inward', nudge_y = 0.5) +
theme_classic()
vegdist(to.genus[-1 ], method='morisita')
morisita <- vegdist(to.genus[-1 ], method='morisita') %>%
as.matrix
colnames(morisita) <- c('MTC', 'MTF', 'RLK', 'TCR', 'TMC', 'UTZ')
rownames(morisita) <- c('MTC', 'MTF', 'RLK', 'TCR', 'TMC', 'UTZ')
morisita
to.genus %>% filter(site %in% c('MTC', 'TCR'))
rownames(to.genus) <- to.genus[ , 1]
rownames(to.genus) <- to.genus[,1]
to.genus[,1]
data <- to.genus
rownames(data) <- data[,1]
data <- data[,-1]
data
to.genus[,1]
View(to.genus)
data <- to.genus[-1 ]
data
View(data)
to.genus[,-1]
to.genus[-1,]
to.genus[,1]
rownames(to.genus)
rownames(to.genus) <- to.genus[,1]
has_rownames(to.genus)
data <- to.genus
column_to_rownames(data, var='site')
data <- column_to_rownames(data, var='site')
has_rownames(data)
rownames(data)
morisita <- vegdist(to.genus, method='morisita')
morisita <- vegdist(to.genus[-1 ], method='morisita')
morisita
data <- data[,-1]
View(data)
data
moar <- vegdist(data, method='morisita')
moar
rownames(to.genus) <- to.genus[,1]
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
dplyr::select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count,
values_fill=list(count = 0))
to.genus
# Remove the oddity.
to.genus <- to.genus %>% dplyr::select(-`Tamiasciurus sp`)
# And run Simpson's index of diversity.
simpson <- plyr::ddply(to.genus, ~site, function(x) {
data.frame(simpson=diversity(x[-1], index='simpson'))
})
simpson
to.genus <- column_to_rownames(to.genus, var='site')
to.genus <- to.genus[,-1]
vegdist(data, method='morisita')
check <- to.genus %>% filter(site %in% c('TLK', 'TCR'))
to.genus <- items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
dplyr::select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count,
values_fill=list(count = 0))
to.genus
# Remove the oddity.
to.genus <- to.genus %>% dplyr::select(-`Tamiasciurus sp`)
# And run Simpson's index of diversity.
simpson <- plyr::ddply(to.genus, ~site, function(x) {
data.frame(simpson=diversity(x[-1], index='simpson'))
})
simpson
mor <- column_to_rownames(to.genus, var='site')
mor <- more[,-1]
mor <- column_to_rownames(to.genus, var='site')
mor <- mor[,-1]
vegdist(mor, method='morisita')
check <- to.genus %>% filter(site %in% c('RLK', 'TCR'))
View(data)
View(check)
check2 <- to.genus %>% filter(site %in% c('UTZ', 'TMC'))
View(check2)
# High overlap
to.genus %>% filter(site %in% c('UTZ', 'TMC'))
# Low overlap
to.genus %>% filter(site %in% c('RLK', 'TCR'))
vegdist(mor, method='horn')
vegdist(mor, method='horn')
View(items)
d.mor <- vegdist(mor, method='morisita')
class(d.mor)
cluster <- hclust(d.more, method='complete')
cluster <- hclust(d.mor, method='complete')
plot(cluster)
cluster2 <- hclust(d.mor, method='ward.D2')
plot(cluster2)
plot(cluster, hhang=-1, cex=0.6)
plot(cluster, hang=-1, cex=0.6)
dend.mor <- as.dendrogram(cluster)
plot(dend.mor, type=rectangle, ylab='height')
plot(dend.mor, type=triangle, ylab='height')
plot(dend.mor, type='triangle', ylab='height')
plot(dend.mor, type='rectangle', ylab='height')
vegdist(mor, method='morisita') %>%
hclust(method='complete')
vegdist(mor, method='morisita') %>%
hclust(method='complete') %>%
plot(hang=-1, cex=0.6)
