map(glance) %>%
bind_rows(.id='size')
# Productivity is determined by proportion of squirrel.
n.fledglings.by.proportion.squirrel <- data %>%
drop_na(n.fledglings) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ proportion.squirrel, data=.x))
names(n.fledglings.by.proportion.squirrel) <- names(n.fledglings.by.proportion.squirrel) %>%
map_chr(~ paste('~ proportion squirrel:', .x))
data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ proportion.squirrel, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size')
# Productivity is determined by the amount of suitable habitat.
n.fledglings.by.amount.suitable <- data %>%
drop_na(n.fledglings) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ amount.suitable, data=.x))
names(n.fledglings.by.amount.suitable) <- names(n.fledglings.by.amount.suitable) %>%
map_chr(~ paste('~ amount suitable habitat:', .x))
data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ amount.suitable, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size')
# Productivity is determined by geographic position.
n.fledglings.by.lat <- data %>%
drop_na(n.fledglings) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ lat, data=.x))
names(n.fledglings.by.lat) <- names(n.fledglings.by.lat) %>%
map_chr(~ paste('~ lat:', .x))
data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ lat, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size')
n.fledglings.by.lon <- data %>%
drop_na(n.fledglings) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ lon, data=.x))
names(n.fledglings.by.lon) <- names(n.fledglings.by.lon) %>%
map_chr(~ paste('~ lon:', .x))
data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ lon, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size')
n.fledglings.by.lat.lon <- data %>%
drop_na(n.fledglings) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ lat * lon, data=.x))
names(n.fledglings.by.lat.lon) <- names(n.fledglings.by.lat.lon) %>%
map_chr(~ paste('~ lat & lon:', .x))
data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(n.fledglings ~ lat * lon, data=.x)) %>%
map(summary) %>%
map(glance) %>%
bind_rows(.id='size')
aictab(c(
n.fledglings.by.diet.diversity,
n.fledglings.by.proportion.squirrel,
n.fledglings.by.amount.suitable,
n.fledglings.by.lat,
n.fledglings.by.lon,
n.fledglings.by.lat.lon
)) %>%
data.frame()
metric.table <- read_csv('../data/processed/landscape_metrics.csv')
View(metric.table)
kable(metric.table)
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(''=2, 'Variable'=3))
kable(metric.table) %>%
kable_styling() #%>%
add_header_above(c(' '=2, 'Group'=3))
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=2, 'Group'=3))
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=2, 'Variable'=3))
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=2, 'Variable'=3)) %>%
pack_rows('Core area', 1, 3)
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=2, 'Variable'=3)) %>%
pack_rows('Core area', 1, 3) %>%
pack_rows('Area and edge', 4, 9) %>%
pack_rows('Aggregation', 10, 17)
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=2, 'Variable'=3)) %>%
pack_rows('Core area', 1, 3) %>%
pack_rows('Area and edge', 4, 9) %>%
pack_rows('Aggregation', 10, 17) %>%
pack_rows('Diversity', 18, 20)
options(knitr.kable.NA = '')
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=2, 'Variable'=3)) %>%
pack_rows('Core area', 1, 3) %>%
pack_rows('Area and edge', 4, 9) %>%
pack_rows('Aggregation', 10, 17) %>%
pack_rows('Diversity', 18, 20)
metric.table <- read_csv('../data/processed/landscape_metrics.csv') %>%
select(-Type)
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=2, 'Variable'=3)) %>%
pack_rows('Core area', 1, 3) %>%
pack_rows('Area and edge', 4, 9) %>%
pack_rows('Aggregation', 10, 17) %>%
pack_rows('Diversity', 18, 20)
kable(metric.table) %>%
kable_styling() %>%
add_header_above(c(' '=1, 'Variable'=3)) %>%
pack_rows('Core area', 1, 3) %>%
pack_rows('Area and edge', 4, 9) %>%
pack_rows('Aggregation', 10, 17) %>%
pack_rows('Diversity', 18, 20)
select(bec.landscape.metrics, nest, radius, dominant.bec) %>%
group_by(radius, dominant.bec) %>%
summarize(count=n())# %>%
select(bec.landscape.metrics, nest, size, dominant.bec) %>%
group_by(radius, dominant.bec) %>%
summarize(count=n())# %>%
select(bec.landscape.metrics, nest, size, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n())# %>%
select(bec.landscape.metrics, nest, size, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n()) %>%
mutate(size=factor(size, levels=c('PFA', 'Breeding area', 'Breeding home range', 'maxiumum range')))
select(bec.landscape.metrics, nest, size, radius, dominant.bec) %>%
mutate(size=fct_reorder(size, radius))
bec.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, radius, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n()) %>%
ggplot(aes(x=dominant.bec, y=count, fill=factor(radius))) +
geom_bar(stat='identity') +
facet_wrap(~radius) +
scale_fill_brewer(palette='Set2') +
theme_classic() +
theme(legend.position='none') +
coord_flip()
bec.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, radius, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n()) #%>%
bec.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, radius, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n()) %>%
ggplot(aes(x=dominant.bec, y=count, fill=size)) +
geom_bar(stat='identity') +
facet_wrap(~size) +
scale_fill_brewer(palette='Set2') +
theme_classic() +
theme(legend.position='none') +
coord_flip()
# Dominant forest type of territory.
bec.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, radius, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n()) %>%
ggplot(aes(x=dominant.bec, y=count, fill=size)) +
geom_bar(stat='identity') +
facet_wrap(~size) +
scale_fill_brewer(palette='Set2') +
theme_classic() +
theme(legend.position='none') +
coord_flip()
# Dominant forest type of territory.
bec.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, radius, dominant.bec) %>%
group_by(size, dominant.bec) %>%
summarize(count=n()) %>%
ggplot(aes(x=dominant.bec, y=count, fill=size)) +
geom_bar(stat='identity') +
facet_wrap(~size) +
scale_fill_brewer(palette='Set2') +
theme_classic() +
theme(legend.position='none') +
coord_flip()
# Make a list of metrics to calculate.
bec.metrics <- c('lsm_c_ca', 'lsm_l_contag', 'lsm_l_iji', 'lsm_l_prd', 'lsm_l_sidi', 'lsm_l_siei')
# Make a function to do the calculations and formatting.
calc.bec.metrics <- function(x) {
sample_lsm(r.bec, y=sites.sf, size=x, plot_id=nests, shape='circle', what=bec.metrics) %>%
left_join(bec.levels, by=c('class'='ID')) %>%
group_by(plot_id, metric) %>%
top_n(1, value) %>% ungroup() %>%
fill(category) %>%
filter(level == 'landscape') %>%
pivot_wider(names_from=metric, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
bec.landscape.metrics <- map_df(landscape$radius, calc.bec.metrics)
View(bec.landscape.metrics)
# Tidy things up.
bec.landscape.metrics <- bec.landscape.metrics %>%
select(nest=plot_id, dominant.bec=category,
bec.contagion=contag, bec.interspersion=iji,
bec.richness=prd, bec.diversity=sidi, bec.evenness=siei,
radius)
bec.landscape.metrics <- select(landscape, radius, size) %>% right_join(bec.landscape.metrics, by='radius')
# Richness of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.richness) %>%
ggplot(aes(x=factor(radius), y=bec.richness, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Intermixing of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.contagion) %>%
ggplot(aes(x=factor(radius), y=bec.contagion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Intermixing of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.contagion) %>%
ggplot(aes(x=factor(radius), y=bec.contagion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Richness of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.evenness) %>%
ggplot(aes(x=factor(radius), y=bec.evenness, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Make a list of metrics to calculate.
landcover.metrics <- c('lsm_l_core_mn', 'lsm_l_area_mn', 'lsm_c_pland', 'lsm_l_ed',
'lsm_l_enn_mn', 'lsm_l_pd', 'lsm_l_contag', 'lsm_l_iji',
'lsm_l_prd', 'lsm_l_sidi', 'lsm_l_siei')
# Make a function to do the calculations and formatting.
# For now stick to camera sites only.
calc.landcover.metrics <- function(x) {
sample_lsm(r.landcover, y=cameras.sf, size=x, plot_id=cam.nests, shape='circle', what=landcover.metrics) %>%
left_join(landcover.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
landcover.landscape.metrics <- map_df(landscape$radius, calc.landcover.metrics)
# Make a function to do the calculations and formatting.
# For now stick to camera sites only.
calc.landcover.metrics <- function(x) {
sample_lsm(r.landcover, y=sites.sf, size=x, plot_id=cam.nests, shape='circle', what=landcover.metrics) %>%
left_join(landcover.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
landcover.landscape.metrics <- map_df(landscape$radius, calc.landcover.metrics)
# Make a function to do the calculations and formatting.
# For now stick to camera sites only.
calc.landcover.metrics <- function(x) {
sample_lsm(r.landcover, y=cameras.sf, size=x, plot_id=cam.nests, shape='circle', what=landcover.metrics) %>%
left_join(landcover.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
landcover.landscape.metrics <- map_df(landscape$radius, calc.landcover.metrics)
View(landcover.landscape.metrics)
# Do some cleanup: fill NAs with zeros and rename columns, calculate mature forest.
landcover.landscape.metrics <- landcover.landscape.metrics %>% #replace(is.na(.), 0) %>%
select(nest=plot_id,
cover.core=core_mn, cover.size=area_mn, cover.edge.density=ed,
cover.n.neighbor=enn_mn, cover.patch.density=pd, cover.contagion=contag, cover.interspersion=iji,
cover.richness=prd, cover.diversity=sidi, cover.evenness=siei,
everything(),
-layer, -id, -percentage_inside) %>%
mutate(amount.cover.mature=mature + old)
landcover.landscape.metrics <- select(landscape, radius, size) %>% right_join(landcover.landscape.metrics)
landcover.landscape.metrics %>% select(nest, radius, undefined, rock, ocean, freshwater,
shrub, deciduous, regen,
young, mature, old) %>%
pivot_longer(-c(nest, radius), names_to='metric', values_to='values') %>%
ggplot(aes(x=metric, y=values, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
facet_wrap(~radius, scales='free') +
theme(legend.position='none') +
coord_flip()
landcover.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, undefined, rock, ocean, freshwater,
shrub, deciduous, regen,
young, mature, old) %>%
pivot_longer(-c(nest, size), names_to='metric', values_to='values') %>%
ggplot(aes(x=metric, y=values, fill=size)) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
facet_wrap(~size, scales='free') +
theme(legend.position='none') +
coord_flip()
# Bring in land cover data.
r.landcover <- raster('../data/processed/vri_sc_all-sites.tif')
levels(r.landcover)
# Define land cover levels.
landcover.levels <- data.frame(ID=0:11, class.name=
c('undefined', 'rock', 'ocean', 'freshwater',
'alpine', 'wetland',
'shrub', 'deciduous', 'regen',
'young', 'mature', 'old'))
# Add levels to raster.
levels(r.landcover) <- landcover.levels
# Assign CRS.
crs(r.landcover) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
check_landscape(r.landcover)
# Make a function to do the calculations and formatting.
# For now stick to camera sites only.
calc.landcover.metrics <- function(x) {
sample_lsm(r.landcover, y=sites.sf, size=x, plot_id=nests, shape='circle', what=landcover.metrics) %>%
left_join(landcover.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
landcover.landscape.metrics <- map_df(landscape$radius, calc.landcover.metrics)
landcover.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, undefined, rock, ocean, freshwater,
shrub, deciduous, regen,
young, mature, old) %>%
pivot_longer(-c(nest, size), names_to='metric', values_to='values') %>%
ggplot(aes(x=metric, y=values, fill=size)) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
facet_wrap(~size, scales='free') +
theme(legend.position='none') +
coord_flip()
# Do some cleanup: fill NAs with zeros and rename columns, calculate mature forest.
landcover.landscape.metrics <- landcover.landscape.metrics %>% #replace(is.na(.), 0) %>%
select(nest=plot_id,
cover.core=core_mn, cover.size=area_mn, cover.edge.density=ed,
cover.n.neighbor=enn_mn, cover.patch.density=pd, cover.contagion=contag, cover.interspersion=iji,
cover.richness=prd, cover.diversity=sidi, cover.evenness=siei,
everything(),
-layer, -id, -percentage_inside) %>%
mutate(amount.cover.mature=mature + old)
landcover.landscape.metrics <- select(landscape, radius, size) %>% right_join(landcover.landscape.metrics)
landcover.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, undefined, rock, ocean, freshwater,
shrub, deciduous, regen,
young, mature, old) %>%
pivot_longer(-c(nest, size), names_to='metric', values_to='values') %>%
ggplot(aes(x=metric, y=values, fill=size)) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
facet_wrap(~size, scales='free') +
theme(legend.position='none') +
coord_flip()
View(sites)
# Diversity of land cover types within territory.
select(landcover.landscape.metrics, nest, radius, cover.diversity) %>%
ggplot(aes(x=factor(radius), y=cover.diversity, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Edge density of land cover.
select(landcover.landscape.metrics, nest, radius, cover.edge.density) %>%
ggplot(aes(x=factor(radius), y=cover.edge.density, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Interspersion of land cover.
select(landcover.landscape.metrics, nest, radius, cover.interspersion) %>%
ggplot(aes(x=factor(radius), y=cover.interspersion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Amount of mature forest.
select(landcover.landscape.metrics, nest, radius, amount.cover.mature) %>%
ggplot(aes(x=factor(radius), y=amount.cover.mature, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Make a list of metrics to calculate.
hsi.metrics <- c('lsm_l_core_mn', 'lsm_l_area_mn', 'lsm_c_pland', 'lsm_l_ed',
'lsm_l_enn_mn', 'lsm_l_pd', 'lsm_l_contag', 'lsm_l_iji'
'lsm_l_prd', 'lsm_l_sidi', 'lsm_l_siei')
# Make a list of metrics to calculate.
hsi.metrics <- c('lsm_l_core_mn', 'lsm_l_area_mn', 'lsm_c_pland', 'lsm_l_ed',
'lsm_l_enn_mn', 'lsm_l_pd', 'lsm_l_contag', 'lsm_l_iji',
'lsm_l_prd', 'lsm_l_sidi', 'lsm_l_siei')
calc.hsi.metrics <- function(x) {
sample_lsm(r.hsi, y=sites.sf, size=x, plot_id=nests, shape='circle',
what=hsi.metrics) %>%
left_join(hsi.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
hsi.landscape.metrics <- map_df(landscape$radius, calc.hsi.metrics)
# Do some cleanup: fill NAs with zeros and rename columns, calculate mature forest.
hsi.landscape.metrics <- hsi.landscape.metrics %>% #replace(is.na(.), 0) %>%
select(nest=plot_id,
hsi.core=core_mn, hsi.size=area_mn, hsi.edge.density=ed,
hsi.n.neighbor=enn_mn, hsi.patch.density=pd, hsi.contagion=contag, hsi.interspersion=iji,
hsi.richness=prd, hsi.diversity=sidi, hsi.evenness=siei,
hsi.freshwater=freshwater, hsi.ocean=ocean, hsi.river=river, everything(),
-layer, -id, -percentage_inside) %>%
mutate(amount.suitable = moderate + high)
hsi.landscape.metrics <- select(landscape, radius, size) %>% right_join(hsi.landscape.metrics)
# Amount of high or moderate habitat under the HSI.
select(hsi.landscape.metrics, nest, radius, amount.suitable) %>%
ggplot(aes(x=factor(radius), y=amount.suitable, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Edge density of HSI.
select(hsi.landscape.metrics, nest, radius, hsi.edge.density) %>%
ggplot(aes(x=factor(radius), y=hsi.edge.density, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Interspersion of HSI.
select(hsi.landscape.metrics, nest, radius, hsi.interspersion) %>%
ggplot(aes(x=factor(radius), y=hsi.interspersion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
landcover.landscape.metrics %>%
mutate(size=fct_reorder(size, radius)) %>%
select(nest, size, undefined, rock, ocean, freshwater,
shrub, deciduous, regen,
young, mature, old) %>%
pivot_longer(-c(nest, size), names_to='metric', values_to='values') %>%
ggplot(aes(x=metric, y=values, fill=size)) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
facet_wrap(~size) +
theme(legend.position='none') +
coord_flip()
