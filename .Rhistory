TRUE ~ genus
))
# Bring in a list of site abbreviations and site names.
nest.list <- read_csv('../data/processed/site_abbreviations.csv')
# Standardize the specimen data.
remains.data <- left_join(remains.data, nest.list, by='name') %>%
filter(id != 1120) %>%
filter(id != 1171) %>%
filter(site != 'COM') %>%
select(site, date, class, order, family, genus, species, common, size, age, source)
# Standardize the camera data.
camera.data <- camera.data %>%
mutate(date=date(datetime), source='C') %>%
select(site, date, class, order, family, genus, species, common, size, age, source)
# Join them together.
diet.data <- bind_rows(remains.data, camera.data)
# Add a unique site/year identifier.
diet.data <- diet.data %>%
mutate(year=year(date), nest=paste(site, year, sep=''))
# Do some cleanup.
diet.data <- diet.data %>%
mutate(size=case_when(
size %in% c('S', 'Small') ~ 'small',
size %in% c('M', 'Medium') ~ 'medium',
size %in% c('L', 'Large') ~ 'large'
)) %>%
## and replace all the "U"s with "Unknown"...
mutate_at(c('class', 'order', 'family', 'genus'), funs(case_when(
. == 'U' ~ 'Unknown',
TRUE ~ .
))) %>%
## in species as well...
mutate(species=case_when(
species == 'U' ~ 'unknown',
TRUE ~ species
))
grab.some(diet.data)
View(st.diet.items)
st.diet.items %>% group_by(source, year) %>% summarize(n=n())
diet.data %>% group_by(source, year) %>% summarize(n=n())
old.data <- read_csv('../data/interim/camera_corrected.csv', , guess_max=7000)
old.data <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
old.data <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
filter(size != 'Unknown')
grab.some(old.data)
old.data <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
filter(size != 'Unknown')
grab.some(old.data)
nrow(camera.data)
nrow(old.data)
nrow(camera.data)
nrow(old.data)
camera.data %>% filter(year == 2019) %>% nrow()
camera.data %>% filter(year(datetime) == 2019) %>% nrow()
View(camera.data)
# Bring in camera data.
camera.data <- read_csv('../data/interim/cameras_20210315.csv', guess_max=7000) %>%
## filter only records with at least size assigned...
filter(size != 'U')
grab.some(camera.data)
nrow(camera.data)
nrow(old.data)
camera.data %>% filter(year(datetime) == 2019) %>% nrow()
nrow(camera.data)
nrow(old.data)
225-219
camera.data.2019 <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
drop_na(class) %>%
select(site, datetime, class, family, genus, species, common, size) %>%
mutate(year=year(datetime), nest=paste(site, year, sep=''))
camera.data.2019 <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
drop_na(class) %>%
select(site, datetime, class, family, genus, species, common, size) %>%
mutate(year=year(datetime), nest=paste(site, year, sep=''))
nrow(camera.data.2019)
# Filter only items that at least have a size assigned...
camera.data.2019 <- camera.data.2019 %>% filter(size != 'Unknown') %>%
select(site, year, nest, everything(), -datetime)
nrow(camera.data.2019)
camera.data.2019
new.data
# Bring in camera data.
new.data <- read_csv('../data/interim/cameras_20210315.csv', guess_max=7000) %>%
## filter only records with at least size assigned...
filter(size != 'U')
grab.some(new.data)
new.data
camera.data.2019
old.data
new.data
new.data.2019 <- filter(new.data, year(datetime) == 2019)
nrow(old.data)
nrow(new.data.2019)
grab.some(old.data)
grab.some(new.data.2019)
anti_join(old.data, new.data.2019, by=c(filename, serial, datetime))
anti_join(old.data, new.data.2019, by=c('filename', 'serial', 'datetime'))
anti_join(old.data, new.data.2019, by=c('filename', 'serial', 'datetime'))
# Bring in a list of all known prey.
prey.list <- read_csv('../data/interim/prey_attributes.csv')
# Fill in order based on family...
camera.data.2019 <- prey.list %>% select(order, family) %>%
right_join(camera.data.2019, by='family') %>%
## then reorder columns so everything is pretty...
select(site, nest, class, everything()) %>%
## and fill in NAs in Order column with "Unknown"...
replace_na(list(order = 'Unknown')) %>%
## and finally add a marker for method.
mutate(method='camera',
source='C')
nrow(camera.data.2019)
nrow(old.data)
nrow(camera.data.2019)
587-225
prey.list %>% select(order, family) %>%
right_join(camera.data.2019, by='family') %>% nrow()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(lubridate)
library(ggplot2)
library(vegan)
library(broom.mixed)
library(lme4)
library(purrr)
library(modelr)
# Make a little function for checking at random rows.
grab.some <- function(df, n=10) {
index <- sample(1:nrow(df), n)
df[index,]
}
# Bring in camera data.
new.data <- read_csv('../data/interim/cameras_20210315.csv', guess_max=7000) %>%
## filter only records with at least size assigned...
filter(size != 'U')
grab.some(new.data)
old.data <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
filter(size != 'Unknown')
grab.some(old.data)
nrow(new.data)
nrow(old.data)
new.data %>% filter(year(datetime) == 2019) %>% nrow()
camera.data.2019 <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000) %>%
drop_na(class) %>%
select(site, datetime, class, family, genus, species, common, size) %>%
mutate(year=year(datetime), nest=paste(site, year, sep=''))
nrow(camera.data.2019)
# Filter only items that at least have a size assigned...
camera.data.2019 <- camera.data.2019 %>% filter(size != 'Unknown') %>%
select(site, year, nest, everything(), -datetime)
nrow(camera.data.2019)
new.data.2019 <- filter(new.data, year(datetime) == 2019)
anti_join(old.data, new.data.2019, by=c('filename', 'serial', 'datetime'))
# Bring in a list of all known prey.
prey.list <- read_csv('../data/interim/prey_attributes.csv')
nrow(camera.data.2019)
prey.list %>% select(order, family) %>%
right_join(camera.data.2019, by='family') %>% nrow()
# To make sure the average sizes work, I also need to bring in the physical remains.
remains.data <- read_csv('../data/raw/20210118_specimens.csv', guess_max=7000) %>%
## filter only records with at least size assigned...
filter(size != 'U') %>%
## and rename a confusing column.
rename(name=site) %>%
## and fix a typo
mutate(genus=case_when(
genus == 'Picoides' ~ 'Dryobates',
TRUE ~ genus
))
# Bring in a list of site abbreviations and site names.
nest.list <- read_csv('../data/processed/site_abbreviations.csv')
# Standardize the specimen data.
remains.data <- left_join(remains.data, nest.list, by='name') %>%
filter(id != 1120) %>%
filter(id != 1171) %>%
filter(site != 'COM') %>%
select(site, date, class, order, family, genus, species, common, size, age, source)
# Standardize the camera data.
camera.data <- new.data %>%
mutate(date=date(datetime), source='C') %>%
select(site, date, class, order, family, genus, species, common, size, age, source)
# Join them together.
diet.data <- bind_rows(remains.data, camera.data)
# Add a unique site/year identifier.
diet.data <- diet.data %>%
mutate(year=year(date), nest=paste(site, year, sep=''))
# Do some cleanup.
diet.data <- diet.data %>%
mutate(size=case_when(
size %in% c('S', 'Small') ~ 'small',
size %in% c('M', 'Medium') ~ 'medium',
size %in% c('L', 'Large') ~ 'large'
)) %>%
## and replace all the "U"s with "Unknown"...
mutate_at(c('class', 'order', 'family', 'genus'), funs(case_when(
. == 'U' ~ 'Unknown',
TRUE ~ .
))) %>%
## in species as well...
mutate(species=case_when(
species == 'U' ~ 'unknown',
TRUE ~ species
))
grab.some(diet.data)
diet.data %>% group_by(year, source) %>% summarize(n=n())
diet.data %>% group_by(year, source) %>% summarize(n=n()) %>% arrange(source)
diet.data %>% distinct(class, order, family, genus, species, common) %>%
arrange(class, order, family, genus, species, common)
diet.data %>% group_by(class, order, family, genus, species, common) %>%
summarize(n=n())
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n())
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n())
library(kable)
library(kableExtra)
library(knitr)
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>% kable()
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>% kable() %>% kable_styling(bootstrap_options='striped')
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n())
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n)
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>% kable() %>% kable_styling(bootstrap_options='striped')
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
kable() %>% kable_styling(bootstrap_options='striped')
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
kable() %>% kable_styling(bootstrap_options='striped')
options(knitr.kable.NA = '')
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
kable() %>% kable_styling(bootstrap_options='striped')
options(knitr.kable.NA = '-')
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
kable() %>% kable_styling(bootstrap_options='striped')
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
arrange(class, order, family, genus, species, common)
diet.data %>% group_by(source, class, order, family, genus, species, common) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
arrange(class, order, family, genus, species, common) %>%
kable() %>% kable_styling(bootstrap_options='striped')
# Join the biomass data to the list of diet items.
diet.items <- prey.list %>% select(genus, species, binomial, common, category, mass) %>%
right_join(diet.data, by=c('genus', 'species', 'common'))
# For unidentified items, classify them by size and class.
diet.items <- diet.items %>% mutate(category=case_when(
is.na(category) & class == 'Mammalia' & size == 'small' ~ 'small mammal',
is.na(category) & class == 'Mammalia' & size == 'medium' ~ 'medium mammal',
is.na(category) & class == 'Mammalia' & size == 'large' ~ 'large mammal',
is.na(category) & class == 'Aves' & size == 'small' ~ 'small bird',
is.na(category) & class == 'Aves' & size == 'medium' ~ 'medium bird',
is.na(category) & class == 'Aves' & size == 'large' ~ 'large bird',
is.na(category) & class == 'Unknown' ~ paste(size, 'item'),
TRUE ~ category))
# For unidentified items, fill in the binomial column.
diet.items <- diet.items %>% replace_na(list(binomial = 'Unidentified item'))
# Calculate average masses for unidentified items, based of known species.
mean.mass <- diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(`large item` = mean(`large bird`, `large mammal`),
`medium item` = mean(`medium bird`, `medium mammal`),
`small item` = mean(`small bird`, `small mammal`)) %>%
## and reassembling it in a tidy format.
pivot_longer(everything(), names_to='category', values_to='average')
# Check the mean mass.
mean.mass
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) #%>%
53.8+32.2
86/2
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) #%>%
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(`large item` = mean(`large bird`, `large mammal`),
`medium item` = mean(`medium bird`, `medium mammal`),
`small item` = mean(`small bird`, `small mammal`)) %>% view()
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(new=`large bird`) %>% view()
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(new=`large bird` + `large mammal`) %>% view()
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(new=mean(`large bird` + `large mammal`)) %>% view()
1172.5+654
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(new=mean(`large bird`, `large mammal`)) %>% view()
mean(645, 1172)
mean(c(645, 1172))
diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(`large item` = mean(c(`large bird`, `large mammal`)),
`medium item` = mean(c(`medium bird`, `medium mammal`)),
`small item` = mean(c(`small bird`, `small mammal`))) %>%
## and reassembling it in a tidy format.
pivot_longer(everything(), names_to='category', values_to='average')
mean.mass <- diet.items %>% drop_na(mass) %>%
distinct(binomial, mass, category) %>%
group_by(category) %>%
## averaging the mass for each size & class category...
summarize(average=mean(mass)) %>%
pivot_wider(names_from=category, values_from=average) %>%
## calculating the average mass for complete unknowns...
mutate(`large item` = mean(c(`large bird`, `large mammal`)),
`medium item` = mean(c(`medium bird`, `medium mammal`)),
`small item` = mean(c(`small bird`, `small mammal`))) %>%
## and reassembling it in a tidy format.
pivot_longer(everything(), names_to='category', values_to='average')
mean.mass
# Join average mass to diet items...
diet.items <- left_join(diet.items, mean.mass, by='category') %>%
## and fill in missing mass with average values
mutate(mass=coalesce(mass, average)) %>%
## then drop no longer needed average column and rearrange.
select(site, year, nest, class, order, family, genus, species, binomial, common,
category, size, age, mass, source)
# Change mass for juvenile items.
diet.items <- diet.items %>% mutate(mass=case_when(
age == 'J' ~ 0.5*mass,
TRUE ~ mass
))
# Check.
diet.items %>% group_by(source, class, order, family, genus, species, common, mass) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
arrange(class, order, family, genus, species, common) %>%
kable() %>% kable_styling(bootstrap_options='striped')
# Also let's collapse age down.
diet.items<- diet.items %>% mutate(age=case_when(
age == 'J' ~ age,
TRUE ~ A
))
# Also let's collapse age down.
diet.items<- diet.items %>% mutate(age=case_when(
age == 'J' ~ age,
TRUE ~ 'A'
))
# Check.
diet.items %>% group_by(source, class, order, family, genus, species, common, age, mass) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
arrange(class, order, family, genus, species, common) %>%
kable() %>% kable_styling(bootstrap_options='striped')
# Check.
diet.items %>% group_by(source, class, order, family, genus, species, common, age, size, mass) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
arrange(class, order, family, genus, species, common) %>%
kable() %>% kable_styling(bootstrap_options='striped')
View(diet.items)
# Check.
diet.items %>% group_by(source, class, order, family, genus, species, common, age, category, mass) %>%
summarize(n=n()) %>%
pivot_wider(names_from=source, values_from=n) %>%
arrange(class, order, family, genus, species, common) %>%
kable() %>% kable_styling(bootstrap_options='striped')
new.data %>% filter(method == 'C')
colnames(new.data)
grab.some(new.data)
new.data %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), days=difftime(max, min), n=n())
new.data %>% group_by(site, year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime))#, days=difftime(max, min), n=n())
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime))#, days=difftime(max, min), n=n())
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=min(datetime), last=max(datetime), days=difftime(max, min))#, n=n())
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), days=difftime(max, min))#, n=n())
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)))#, days=difftime(max, min))#, n=n())
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime))) %>%
class(last)
temp <- new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)))
class(temp$last)
difftime(temp$last, temp$first)
temp <- new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), n=n())
temp
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), n=n()) %>%
mutate(days=difftime(last, first))
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), n=n()) %>%
mutate(days=difftime(last, first, units=days))
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), n=n()) %>%
mutate(days=difftime(last, first, units=c('days')))
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), n=n()) %>%
mutate(days=difftime(last, first, units=c('days'))) %>%
arrange(year, site)
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), n.items=n()) %>%
mutate(days=difftime(last, first, units=c('days'))) %>%
arrange(year, site)
new.data %>% group_by(site, year=year(datetime)) %>%
summarize(first=date(min(datetime)), last=date(max(datetime)), n.items=n()) %>%
mutate(days=difftime(last, first, units=c('days'))) %>%
arrange(year, site)
# Make a function to calculate class mass.
class.mass <- function(data) {
data %>% mutate(total.mass=sum(.data$mass)) %>%
filter(class %in% c('Mammalia', 'Aves')) %>%
group_by(class) %>%
mutate(class.mass=sum(.data$mass), per.class=class.mass/total.mass*100) %>%
distinct(class, per.class) %>%
rename(variable=class, percent=per.class)
}
# And a function to calculate squirrel mass.
squirrel.mass <- function(data) {
data %>% mutate(total.mass=sum(.data$mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(genus.mass=sum(.data$mass), per.genus=genus.mass/total.mass*100) %>%
distinct(genus, per.genus) %>%
rename(variable=genus, percent=per.genus)
}
# Calculate percent mass for each nest.
nest.mass <- diet.items %>% filter(source == 'C') %>%
group_by(nest) %>% nest() %>%
mutate(class=map(data, class.mass),
genus=map(data, squirrel.mass)) %>%
pivot_longer(-c(nest, data), names_to='var', values_to='per') %>%
unnest(per) %>%
select(nest, variable, percent) %>%
pivot_wider(id_cols=c(nest), names_from=variable, values_from=percent, values_fill=0)
# Calculate counts of items identified to genus for each nest.
nest.count <- diet.items %>% filter(source == 'C' & binomial != 'Unidentified item') %>%
group_by(nest, binomial) %>%
mutate(count=n()) %>%
select(nest, binomial, count) %>%
distinct() %>%
pivot_wider(names_from=binomial, values_from=count, values_fill=list(count = 0))
# Diversity per nest.
nest.diversity <- plyr::ddply(nest.count, ~nest, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Bring in productivity data.
productivity <- read_csv('../data/raw/productivity.csv')
# Make a happy data set for the models to use.
model.data <- productivity %>% mutate(nest=paste(site, year, sep='')) %>%
left_join(nest.diversity, by=c('nest')) %>%
left_join(nest.mass, by=c('nest')) %>%
select(site, year, nest, n.fledge, diet.diversity, Tamiasciurus) %>%
filter_all(all_vars(!is.na(.)))
model.data
# Try it with both.
mod3 <- model.data %>% lm(n.fledge ~ Tamiasciurus, data=.)
mod3 %>% summary()
