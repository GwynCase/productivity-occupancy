breeding.2019 <- interval(ymd(20190415), ymd(20190901))
# Which birds are males?
# Since males do the foraging, it makes sense to define maximum foraging area by male, not female, movement.
tagged.males <- c('HAR07', 'HAR09', 'HAR04', 'HAR05')
# Filter telemetry locations to those from males during the breeding season.
telemetry <- telemetry %>% filter(datetime %within% breeding.2018 | breeding.2019) %>%
filter(id %in% tagged.males) %>%
mutate(nest=paste(site, year(datetime), sep=''))
# Break the geometry column into separate x and y coordinates.
telemetry <- st_coordinates(telemetry) %>% data.frame() %>%
bind_cols(telemetry)
# Load the locations of the telemetry nests.
telemetry.sites <- read_csv('../data/raw/telemetry_sites.csv') %>%
select(nest, x_coord, y_coord)
# Join the data sets together and do some math.
telemetry <- left_join(telemetry, telemetry.sites, by='nest') %>%
mutate(distance=sqrt((x_coord-X)^2 + (y_coord-Y)^2)) %>%
group_by(nest) %>%
arrange(desc(distance)) %>% slice(1)
# Add the mean distance to the landscapes data frame.
landscape <- data.frame(size='maximum range', area=NA, radius=mean(telemetry$distance)) %>%
bind_rows(landscape) %>%
arrange(radius)
# Calculate area of maximum range.
landscape[4,2] <- (pi*landscape[4,3]^2)*0.0001
landscape %>% kable() %>% kable_styling()
# Load in diet data from cameras.
source('../src/prey_attributes_revised.R')
# Take only items identified to genus and twist to a wide format.
diet.wide <- diet.items %>% filter(genus != 'Unknown') %>%
group_by(site, genus, species) %>%
mutate(count=n()) %>%
dplyr::select(site, genus, species, count) %>%
unite(name, 2:3, sep=' ') %>%
distinct() %>%
pivot_wider(names_from=name, values_from=count,
values_fill=list(count = 0))
# Calculate diet diversity.
diet.diversity <- plyr::ddply(diet.wide, ~site, function(x) {
data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})
# Proportion of diet made up of squirrel, by biomass.
proportion.squirrel <-diet.items %>% mutate(mass=as.numeric(mass)) %>%
group_by(nest) %>%
mutate(total=sum(mass)) %>%
filter(genus == 'Tamiasciurus') %>%
mutate(amount.sq=sum(mass), proportion.squirrel=amount.sq/total) %>%
select(site, proportion.squirrel) %>% distinct()
# Join together.
diet.variables <- right_join(diet.diversity, proportion.squirrel)
diet.variables %>% pivot_longer(-c(site, nest), names_to='variable', values_to='value') %>%
ggplot(aes(x=variable, y=value, fill=variable)) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic()
# Number of fledglings.
n.fledglings <- camera.sites %>%
select(nest, n_fledge) %>% rename(n.fledglings=n_fledge)
n.fledglings %>% drop_na() %>%
ggplot(aes(x=nest, y=n.fledglings)) +
geom_bar(position='dodge', stat='identity') +
theme_classic()
# Number of years occupied/number of years surveyed.
years.occupied <- read_csv('../data/processed/occupancy_sc.csv')
years.occupied <- years.occupied %>% pivot_longer(-c(site, name), names_to='year', values_to='status') %>%
filter(status > 0) %>%
group_by(site, status) %>%
add_tally() %>%
distinct(site, status, .keep_all=TRUE) %>%
select(-year) %>%
pivot_wider(names_from=status, values_from=n, values_fill=0) %>%
ungroup() %>% rowwise(site, name) %>%
mutate(years.surveyed=sum(c(`3`, `2`, `1`)),
years.occupied=sum(c(`3`, `2`)),
proportion.occupied=years.occupied/years.surveyed) %>%
select(site, name, years.surveyed, years.occupied, proportion.occupied) %>%
arrange(desc(years.surveyed, years.occupied))
years.occupied$index <- 1:nrow(years.occupied)
years.occupied %>%
mutate(years.empty=years.surveyed-years.occupied) %>%
pivot_longer(-c(site, name, index), names_to='metric', values_to='value') %>%
filter(metric %in% c('years.occupied', 'years.empty')) %>%
ggplot(aes(x=index, y=value, fill=metric)) +
geom_bar(stat='identity', position='stack', color='white') +
theme_classic() +
coord_flip() +
labs(x='site', y='number of years surveyed') +
scale_fill_brewer(palette='Set2')
# Import raster data for BEC zones.
r.bec <- raster('../data/external/bec_raster_full.tif')
# Get BEC levels.
bec.levels <- levels(r.bec) %>% data.frame()
# Make a vector of the nest names.
nests <- sites.sf$nest
# Make a list of metrics to calculate.
bec.metrics <- c('lsm_c_ca', 'lsm_l_pr', 'lsm_l_sidi')
# Make a function to do the calculations and formatting.
calc.bec.metrics <- function(x) {
sample_lsm(r.bec, y=sites.sf, size=x, plot_id=nests, shape='circle', what=bec.metrics) %>%
left_join(bec.levels, by=c('class'='ID')) %>%
group_by(plot_id, metric) %>%
top_n(1, value) %>% ungroup() %>%
fill(category) %>%
filter(level == 'landscape') %>%
pivot_wider(names_from=metric, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
bec.landscape.metrics <- map_df(landscape$radius, calc.bec.metrics)
# Tidy things up.
bec.landscape.metrics <- bec.landscape.metrics %>%
select(nest=plot_id, dominant.bec=category, bec.richness=pr, bec.diversity=sidi, radius)
bec.landscape.metrics <- select(landscape, radius, size) %>% right_join(bec.landscape.metrics)
# Diversity of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.diversity) %>%
ggplot(aes(x=factor(radius), y=bec.diversity, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Richness of forest types within territory.
select(bec.landscape.metrics, nest, radius, bec.richness) %>%
ggplot(aes(x=factor(radius), y=bec.richness, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Dominant forest type of territory.
select(bec.landscape.metrics, nest, radius, dominant.bec) %>%
group_by(radius, dominant.bec) %>%
summarize(count=n()) %>%
ggplot(aes(x=dominant.bec, y=count, fill=factor(radius))) +
geom_bar(stat='identity') +
facet_wrap(~radius) +
scale_fill_brewer(palette='Set2') +
theme_classic() +
theme(legend.position='none') +
coord_flip()
# Diversity of land cover.
# Bring in land cover data.
r.landcover <- raster('../data/processed/vri_land-cover_camera-sites_2020.tif')
# Define land cover levels.
landcover.levels <- data.frame(ID=0:11, class.name=
c('undefined', 'rock', 'ocean', 'freshwater',
'alpine', 'wetland',
'shrub', 'deciduous', 'regen',
'young', 'mature', 'old'))
# Add levels to raster.
levels(r.landcover) <- landcover.levels
# Assign CRS.
crs(r.landcover) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# For now, make a vector of camera nest names.
cam.nests <- cameras.sf$nest
# Make a list of metrics to calculate.
landcover.metrics <- c('lsm_l_sidi', 'lsm_l_ed', 'lsm_l_iji', 'lsm_c_ca')
# Make a function to do the calculations and formatting.
# For now stick to camera sites only.
calc.landcover.metrics <- function(x) {
sample_lsm(r.landcover, y=cameras.sf, size=x, plot_id=cam.nests, shape='circle', what=landcover.metrics) %>%
left_join(landcover.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
landcover.landscape.metrics <- map_df(landscape$radius, calc.landcover.metrics)
# Do some cleanup: fill NAs with zeros and rename columns, calculate mature forest.
landcover.landscape.metrics <- landcover.landscape.metrics %>% replace(is.na(.), 0) %>%
select(nest=plot_id, cover.diversity=sidi,
cover.edge.density=ed, cover.interspersion=iji, everything(),
-layer, -id, -percentage_inside) %>%
mutate(amount.cover.mature=mature + old)
landcover.landscape.metrics <- select(landscape, radius, size) %>% right_join(landcover.landscape.metrics)
# Diversity of land cover types within territory.
select(landcover.landscape.metrics, nest, radius, cover.diversity) %>%
ggplot(aes(x=factor(radius), y=cover.diversity, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Edge density of land cover.
select(landcover.landscape.metrics, nest, radius, cover.edge.density) %>%
ggplot(aes(x=factor(radius), y=cover.edge.density, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Interspersion of land cover.
select(landcover.landscape.metrics, nest, radius, cover.interspersion) %>%
ggplot(aes(x=factor(radius), y=cover.interspersion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Amount of mature forest.
select(landcover.landscape.metrics, nest, radius, amount.cover.mature) %>%
ggplot(aes(x=factor(radius), y=amount.cover.mature, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Amount of forest with great than x% canopy cover.
# canopy.cover <-
# Bring in HSI data.
r.hsi <- raster('../data/processed/foraging_sc.tif')
# Define levels for HSI raster.
hsi.levels <- data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3),
class.name=c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'))
# Add to raster.
levels(r.hsi) <- hsi.levels
# Assign CRS.
crs(r.hsi) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# Make a list of metrics to calculate.
hsi.metrics <- c('lsm_c_ca', 'lsm_l_ed', 'lsm_l_iji')
# Make a function to do the calculations and formatting.
# For now stick to camera sites only.
calc.hsi.metrics <- function(x) {
sample_lsm(r.hsi, y=cameras.sf, size=x, plot_id=cam.nests, shape='circle',
what=hsi.metrics) %>%
left_join(hsi.levels, by=c('class'='ID')) %>%
mutate(class.name=ifelse(is.na(class.name), metric, class.name)) %>%
select(-class, -metric, -level) %>%
pivot_wider(names_from=class.name, values_from=value) %>%
mutate(radius=x)
}
# Run the function for each sample size.
hsi.landscape.metrics <- map_df(landscape$radius, calc.hsi.metrics)
# Do some cleanup: fill NAs with zeros and rename columns, calculate mature forest.
hsi.landscape.metrics <- hsi.landscape.metrics %>% replace(is.na(.), 0) %>%
select(nest=plot_id, hsi.edge.density=ed, hsi.interspersion=iji,
hsi.freshwater=freshwater, hsi.ocean=ocean, hsi.river=river, everything(),
-layer, -id, -percentage_inside) %>%
mutate(amount.suitable = moderate + high)
hsi.landscape.metrics <- select(landscape, radius, size) %>% right_join(hsi.landscape.metrics)
# Amount of high or moderate habitat under the HSI.
select(hsi.landscape.metrics, nest, radius, amount.suitable) %>%
ggplot(aes(x=factor(radius), y=amount.suitable, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Edge density of HSI.
select(hsi.landscape.metrics, nest, radius, hsi.edge.density) %>%
ggplot(aes(x=factor(radius), y=hsi.edge.density, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Interspersion of HSI.
select(hsi.landscape.metrics, nest, radius, hsi.interspersion) %>%
ggplot(aes(x=factor(radius), y=hsi.interspersion, fill=factor(radius))) +
geom_boxplot() +
geom_jitter() +
scale_fill_brewer(palette='Set2') +
theme_classic() +
scale_x_discrete(labels=c('PFA', 'Breeding area', 'Breeding home range', 'maximum range')) +
theme(axis.title.x=element_blank(), legend.position='none')
# Latitude & longitude of nest.
sites %>% select(nest, lat, lon) %>%
# pivot_longer(-nest, names_to='coord', values_to='value') %>%
ggplot(aes(x=lon, y=lat)) +
geom_point() +
theme_classic()
# Year nest was active.
sites %>% select(nest, year)
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by='site') %>% # Fix this later to be by nest.
left_join(n.fledglings, by='nest') %>%
right_join(landscape, by='radius')
View(n.fledglings)
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by='site') %>% # Fix this later to be by nest.
left_join(n.fledglings, by='nest') %>%
right_join(landscape, by='radius')
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) #%>%
View(data)
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius'))# %>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius')) #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(diet.diversity, by='site') #%>% # Fix this later to be by nest.
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by='site') #%>% # Fix this later to be by nest.
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(diet.diversity, by='site')# %>% # Fix this later to be by nest.
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius')) #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius')) #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest')# %>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='site')# %>% # Fix this later to be by nest.
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by='site') %>% # Fix this later to be by nest.
left_join(n.fledglings, by='nest') #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by='site') #%>% # Fix this later to be by nest.
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by=c('site', 'nest')) #%>% # Fix this later to be by nest.
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by=c('site', 'nest')) %>% # Fix this later to be by nest.
left_join(n.fledglings, by='nest') #%>%
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by=c('site', 'nest')) %>% # Fix this later to be by nest.
left_join(n.fledglings, by='nest') %>%
right_join(landscape, by='radius')
# Finally, join everything together.
data <- sites %>% select(site, nest, year, lat, lon) %>%
right_join(bec.landscape.metrics, by='nest') %>%
left_join(landcover.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(hsi.landscape.metrics, by=c('nest', 'radius', 'size')) %>%
left_join(diet.diversity, by='site') %>% # Fix this later to be by nest.
left_join(proportion.squirrel, by=c('site', 'nest')) %>% # Fix this later to be by nest.
left_join(n.fledglings, by='nest') %>%
right_join(landscape, by=c('radius', 'size'))
# The diversity of the diet is determined by the diversity of forest types in which birds can hunt.
# H1: Each forest type supports a different set of prey species, so more of more forest types means more kinds prey species. Assumes (I think) that birds hunt in proportion to forest type availability.
diet.diversity.by.bec.diversity <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ bec.diversity, data=.x))
names(diet.diversity.by.bec.diversity) <- names(diet.diversity.by.bec.diversity) %>%
map_chr(~ paste('~ forest type diversity', .x))
diet.diversity.by.bec.diversity %>%
map(summary) %>%
map(glance)
# The diversity of the diet is determined by the richness of forest types in which birds can hunt.
# H2: Basically the same as H1. This does not assume birds hunt in proportion to forest type availability.
diet.diversity.by.bec.richness <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ bec.richness, data=.x))
names(diet.diversity.by.bec.richness) <- names(diet.diversity.by.bec.richness) %>%
map_chr(~ paste('~ forest type richness:', .x))
diet.diversity.by.bec.richness %>%
map(summary) %>%
map(glance)
# THIS IS BROKEN
# HELP! PLS FIX ME!!
# The diversity of the diet is determined by the main forest type of the territory.
# H3: Some forest types support a more diverse prey base than others.
diet.diversity.by.dominant.bec <- data %>% drop_na(diet.diversity) %>%
split(.$size) %>%
map(~aov(diet.diversity ~ dominant.bec, data=.x))
diet.diversity.by.dominant.bec %>% map(glance)
# The diversity of the diet is determined by land cover diversity.
# H4: Each land cover type (wetland, shrub, forest) supports different prey species. A greater diversity of forest leads to a greater diversity of prey.
diet.diversity.by.cover.diversity <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ cover.diversity, data=.x))
names(diet.diversity.by.cover.diversity) <- names(diet.diversity.by.cover.diversity) %>%
map_chr(~ paste('~ land cover diversity:', .x))
diet.diversity.by.cover.diversity %>%
map(summary) %>%
map(glance)
# The diversity of the diet is determined by land cover edge density.
# H5: Edges support large numbers of diverse species, so more edge may increase prey diversity even if goshawks do not necessarily hunt in edges.
diet.diversity.by.cover.edge.density <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ cover.edge.density, data=.x))
names(diet.diversity.by.cover.edge.density) <- names(diet.diversity.by.cover.edge.density) %>%
map_chr(~ paste('~ landcover edge density:', .x))
diet.diversity.by.cover.edge.density %>%
map(summary) %>%
map(glance)
# The diversity of the diet is determined by land cover interspersion.
# H6: Diverse land cover types support a diverse prey, but this only equates to diet diversity if prey are able to disperse into cover types where goshawks prefer to hunt.
diet.diversity.by.cover.interspersion <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ cover.interspersion, data=.x))
names(diet.diversity.by.cover.interspersion) <- names(diet.diversity.by.cover.interspersion) %>%
map_chr(~ paste('~ landcover interspersion:', .x))
diet.diversity.by.cover.interspersion %>%
map(summary) %>%
map(glance)
# The diversity of the diet is determined by the density of edges between HSI ratings.
diet.diversity.by.hsi.edge.density <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ hsi.edge.density, data=.x))
names(diet.diversity.by.hsi.edge.density) <- names(diet.diversity.by.hsi.edge.density) %>%
map_chr(~ paste('~ HSI edge density:', .x))
diet.diversity.by.hsi.edge.density %>%
map(summary) %>%
map(glance)
# The diversity of the diet is determined by the interspersion of HSI ratings.
diet.diversity.by.hsi.interspersion <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ hsi.interspersion, data=.x))
names(diet.diversity.by.hsi.interspersion) <- names(diet.diversity.by.hsi.interspersion) %>%
map_chr(~ paste('~ HSI interspersion:', .x))
diet.diversity.by.hsi.interspersion %>%
map(summary) %>%
map(glance)
# The diversity of the diet is determined by year only (null model).
diet.diversity.by.year <- data %>%
drop_na(diet.diversity) %>%
split(.$size) %>%
map(~lm(diet.diversity ~ year, data=.x))
names(diet.diversity.by.year) <- names(diet.diversity.by.year) %>%
map_chr(~ paste('~ year:', .x))
diet.diversity.by.year %>%
map(summary) %>%
map(glance)
# Diet diversity models.
aictab(c(diet.diversity.by.bec.diversity,
diet.diversity.by.bec.richness,
diet.diversity.by.cover.diversity,
diet.diversity.by.cover.edge.density,
diet.diversity.by.cover.interspersion,
diet.diversity.by.hsi.edge.density,
diet.diversity.by.hsi.interspersion))
