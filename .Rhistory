5+6
fgj
setwd('C:/Users/gwync/sfuvault/productivity-occupancy/notebooks')
library(tidyverse)
library(sf)
library(raster)
# The first step is to bring the VRI shapefile and prepare the raster.
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
gap.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'gap'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(gap.cover=case_when(
# Shrub
BCLCS_LV_1 == 'V' & BCLCS_LV_2 == 'N' ~ 1,
# Burns
BCLCS_LV_1 == 'N' & BCLCS_LV_5 == 'BU' ~ 1,
# Very young forest
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 < 5 ~ 1,
TRUE ~ 0
))
# The first step is to bring the VRI shapefile and prepare the raster.
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 10,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 11,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 10,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 11,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_lower-mainland.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 10,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 11,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_lower-mainland_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_lower-mainland.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_pemberton.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 10,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 11,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_lower-mainland_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_pemberton_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_lower-mainland.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_pemberton.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_sunshine-coast.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 10,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 11,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_lower-mainland_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_pemberton_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_sunshine-coast_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 1,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 1,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 1,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 1,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_lower-mainland.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 1,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 1,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_lower-mainland_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_lower-mainland.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_pemberton.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 1,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 1,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_lower-mainland_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_pemberton_100.tif', format='GTiff')
# The first step is to bring the VRI shapefile and prepare the raster.
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_chilliwack.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_harrison.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_lower-mainland.shp')
# shp.vri <- st_read('../data/external/VRI_sc_all/VRI_pemberton.shp')
shp.vri <- st_read('../data/external/VRI_sc_all/VRI_sunshine-coast.shp')
# Set raster extent based on VRI shapefile.
ext <- extent(shp.vri)
# Make an empty raster to populate with values.
r <- raster(ext, res=c(100, 100))
# Define class levels.
older.levels <- data.frame(ID=0:1, class.name=
c('undefined', 'older'))
# Add to VRI.
shp.vri <- shp.vri %>% mutate(older.cover=case_when(
# Coniferous trees
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 70 & PROJ_AGE_1 < 250 ~ 1,
BCLCS_LV_4 == 'TC' & PROJ_AGE_1 >= 250 ~ 1,
TRUE ~ 0
))
# Populate VRI polygon data onto empty raster grid.
r.vri <- rasterize(shp.vri, r, 'older.cover')
# Add levels to raster.
levels(r.vri) <- older.levels
# Assign CRS.
crs(r.vri) <- CRS('+proj=utm +zone=10 +datum=NAD83 +units=m +no_defs')
# And save.
# writeRaster(r.vri, '../data/processed/older_chilliwack_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_harrison_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_lower-mainland_100.tif', format='GTiff')
# writeRaster(r.vri, '../data/processed/older_pemberton_100.tif', format='GTiff')
writeRaster(r.vri, '../data/processed/older_sunshine-coast_100.tif', format='GTiff')
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(lubridate)
library(vegan)
# Bring in data.
source('../src/prey_attributes_revised.R')
fakecamera <- diet.items %>% filter(binomial != 'Unidentified item') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
cameraaccum <- specaccum(test[, -1], method="random", permutations=100)
fakecamera <- diet.items %>% filter(binomial != 'Unidentified item') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
cameraaccum <- specaccum(fakecamera[, -1], method="random", permutations=100)
plot(cameraaccum$sites, cameraaccum$richness,
xlab="Number of Items",
ylab="Species Richness",
main="Camera data")
test <- diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
View(test)
diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0)) %>%
split(.$site)
diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0)) %>%
group_by(site)
diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0)) %>%
group_by(site) %>%
group_map(~mean(`Patagoienas fasciata`))
diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0)) %>%
group_by(site) %>%
group_map(~mean(.x$index))
diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0)) %>%
ncol(.)
test
test[, -2]
test[, -1:2]
test[, 2:ncol(.)]
test[, 2:4]
test[, 2:ncol(test)]
test[, 3:ncol(test)]
calc.accum <- function(x) {
specaccum(x[, 3:ncol(x)], method="random", permutations=100)
}
test %>% group_by(site) %>%
split(.$site)
test %>% group_by(site) %>%
split(.$site) %>%
map(~calc.accum)
test %>% group_by(site) %>%
group_map(specaccum())
test %>% group_by(site) %>%
group_map(specaccum(.x[3:5]))
test %>% group_by(site) %>%
group_map(specaccum(x[3:5]))
test %>% group_by(site) %>%
group_map(specaccum(.[3:5]))
test %>% group_by(site) %>%
group_map(~specaccum(.x[3:5]))
test %>% group_by(site) %>%
group_map(~specaccum(.x[3:ncol(.x)]))
ncol(test)
test %>% group_by(site) %>%
group_map(~specaccum(.x[3:18]))
test %>% group_by(site) %>%
group_map(~specaccum(.x[3:17]))
test %>% group_by(site) %>%
group_map(~specaccum(.x[3:17], method="random", permutations=100))
temp <- test %>% group_by(site) %>%
group_map(~specaccum(.x[3:17], method="random", permutations=100))
str(temp)
View(temp)
temp <- test %>% group_by(site) %>%
group_modify(~specaccum(.x[3:17], method="random", permutations=100))
temp <- test %>% group_by(site) %>%
group_map(~specaccum(.x[3:17], method="random", permutations=100)) %>%
bind_rows(.id='site')
temp %>% flatten_df()
temp <- test %>% group_by(site) %>%
group_map(~specaccum(.x[3:17], method="random", permutations=100))
temp %>% flatten_df()
temp %>% flatten_df(.id='var')
temp
temp %>% flatten_df(.id='var')
temp %>% map(~plot(.$sites, .$richness,
xlab="Number of Items",
ylab="Species Richness",
main="Camera data"))
library(ggplot2)
fakecamera.sites <- diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
fake.sites <- fakecamera.sites %>% group_by(site) %>%
group_map(~specaccum(.x[3:17], method="random", permutations=100))
fake.sites %>% map(~plot(.$sites, .$richness,
xlab="Number of Items",
ylab="Species Richness",
main="Camera data"))
View(diet.items)
fakecamera <- diet.items %>% filter(binomial != 'Unidentified item') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
cameraaccum <- specaccum(fakecamera[, -1], method="random", permutations=100)
plot(cameraaccum$sites, cameraaccum$richness,
xlab="Number of Items",
ylab="Species Richness",
main="Camera and physical data")
View(diet.items)
fakeremains.sites <- diet.items %>% filter(binomial != 'Unidentified item' & method == 'remains') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
fakeremains.sites %>% ncol()
20-3
remainsac.sites <- fakeremains.sites %>% group_by(site) %>%
group_map(~specaccum(.x[3:20], method="random", permutations=100))
fakeremains.sites <- diet.items %>% filter(binomial != 'Unidentified item' & method == 'remains') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
remainsac.sites <- fakeremains.sites %>% group_by(site) %>%
group_map(~specaccum(.x[3:19], method="random", permutations=100))
View(fakeremains.sites)
fakeremains.sites %>% group_by(site)
fakeremains.sites %>% group_by(site) %>%
summarize(n())
diet.items %>% filter(binomial != 'Unidentified item' & method == 'remains') %>%
group_by(site) %>%
summarize(n())
diet.items %>% filter(binomial != 'Unidentified item' & method == 'remains') %>%
group_by(site) %>%
summarize(n.items=n())
View(diet.items)
diet.items %>% filter(class != 'U' & method == 'remains') %>%
group_by(site) %>%
summarize(n.items=n())
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
# Import conflict settings.
source('../src/conflicted.R')
# Load some libraries.
library(tidyverse)
library(lubridate)
library(vegan)
# Bring in data.
source('../src/prey_attributes_revised.R')
fakecamera <- diet.items %>% filter(binomial != 'Unidentified item') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
cameraaccum <- specaccum(fakecamera[, -1], method="random", permutations=100)
plot(cameraaccum$sites, cameraaccum$richness,
xlab="Number of Items",
ylab="Species Richness",
main="Camera and physical data")
fakecamera.sites <- diet.items %>% filter(binomial != 'Unidentified item' & method == 'camera') %>%
mutate(count=1, index=1:nrow(.)) %>%
dplyr::select(site, index, binomial, count) %>%
pivot_wider(names_from=binomial, values_from=count,
values_fill=list(count = 0))
fake.sites <- fakecamera.sites %>% group_by(site) %>%
group_map(~specaccum(.x[3:17], method="random", permutations=100))
fake.sites %>% map(~plot(.$sites, .$richness,
xlab="Number of Items",
ylab="Species Richness",
main="Camera data"))
diet.items %>% filter(binomial != 'Unidentified item' & method == 'remains') %>%
group_by(site) %>%
summarize(n.items=n())
diet.items %>% filter(class != 'U' & method == 'remains') %>%
group_by(site) %>%
summarize(n.items=n())
