# Calculate standard deviation of grouse biomass per nest.
sd.grouse.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'grouse') %>%
mutate(gmass=sum(mass), to.mass=gmass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
### Group = Corvids
### Level = Study area
# Calculate percent corvid biomass for camera data for the entire study area.
percent.corvid.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(group == 'corvid') %>%
mutate(gmass=sum(mass), to.mass=gmass/total*100) %>% distinct(to.mass) %>% peretty(0)
### Group = Corvids
### Level = Nest
# Calculate mean percent corvid biomass per nest.
percent.corvid.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'corvid') %>%
mutate(gmass=sum(mass), to.mass=gmass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of corvid biomass per nest.
sd.corvid.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'corvid') %>%
mutate(gmass=sum(mass), to.mass=gmass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
### Group = Thrushes
### Level = Study area
# Calculate percent other thrush biomass for camera data for the entire study area.
percent.thrush.biomass.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=sum(mass)) %>% filter(group == 'thrush') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(to.mass) %>% peretty(0)
# Calculate percent counts of other thrushes for camera data for the entire study area.
count.thrush.items.study.area <- filter(diet.items, source == 'C') %>%
mutate(total=n()) %>% filter(group == 'thrush') %>%
mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
### Group = Thrush
### Level = Nest
# Calculate mean percent thrush biomass per nest.
percent.thrush.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'thrush') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(mean(to.mass)) %>% peretty(0)
# Calculate standard deviation of thrush biomass per nest.
sd.thrush.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'thrush') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(sd(to.mass)) %>% peretty(0)
# Mean nest diversity.
mean.nest.diversity <- mean(nest.diversity$diet.diversity) %>% round(2)
# Standard deviation of nest diversity.
sd.nest.diversity <- sd(nest.diversity$diet.diversity) %>% round(2)
# Min nest diversity.
min.nest.diversity <- min(nest.diversity$diet.diversity)
# Max nest diversity.
max.nest.diversity <- max(nest.diversity$diet.diversity) %>% round(2)
# Mean nest overlap.
mean.nest.overlap <- mean(nest.overlap$value) %>% round(2)
# Standard deviation of nest overlap.
sd.nest.overlap <- sd(nest.overlap$value) %>% round(2)
### Cameras
# Percent count mammal from cameras.
#filter(diet.items, source == 'C') %>% mutate(total=n()) %>% filter(class != 'Mammalia') %>% mutate(count=n(), to.count=count/total*100) %>% distinct(to.count) %>% peretty(0)
# Test statistic for pellet data chi-squared test.
x.stat.pellet <- zone.chi %>% filter(source == 'P') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for pellet data chi-squared test.
p.value.pellet <- zone.chi %>% filter(source == 'P') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty()
# Test statistic for combined pellets-and-remains data chi-squared test.
x.stat.rp <- zone.chi %>% filter(source == 'RP') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for combined pellet-and-remains data chi-squared test.
p.value.rp <- zone.chi %>% filter(source == 'RP') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty(4)
# Test statistic for camera data chi-squared test.
x.stat.camera <- zone.chi %>% filter(source == 'C') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for camera data chi-squared test.
p.value.camera <- zone.chi %>% filter(source == 'C') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty(3)
# Number of transition zone sites.
n.tz.cam.sites <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'tz' & source == 'C') %>% distinct(nest) %>%
summarize(n()) %>% as.numeric()
# Number of coastal zone sites.
n.cs.cam.sites <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'cs' & source == 'C') %>% distinct(nest) %>%
summarize(n()) %>% as.numeric()
### Comparison of mammals between zones.
# Mean proportion mammalian biomass in transition zone.
percent.mammal.biomass.tz <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'tz' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Mammalia') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# Mean proportion mammalian biomass in coastal zone.
percent.mammal.biomass.cs <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'cs' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Mammalia') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# Percent mammalian biomass per nest, by zone.
percent.mammal.biomass.zone.nest <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(class == 'Mammalia') %>%
mutate(mmass=sum(mass), cmass=mmass/total) %>%
distinct(zone, nest, cmass)
# P-value for unpaired two-sample t-test for mammal biomass between zones.
p.value.mammal.biomass.zone <- t.test(cmass ~ zone,
data=percent.mammal.biomass.zone.nest, var.equal=TRUE) %>%
glance() %>% select(p.value) %>% peretty()
### Comparison of squirrels between zones.
# Mean proportion squirrel biomass in transition zone.
percent.squirrel.biomass.tz <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'tz' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# SD proportion squirrel biomass in transition zone.
sd.squirrel.biomass.tz <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'tz' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(sd(cmass)) %>% peretty(0)
# Mean proportion squirrel biomass in coastal zone.
percent.squirrel.biomass.cs <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'cs' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(mean(cmass)) %>% peretty(0)
# SD proportion squirrel biomass in coastal zone.
sd.squirrel.biomass.cs <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(zone == 'cs' & source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total*100) %>%
distinct(nest, cmass) %>% ungroup() %>% summarize(sd(cmass)) %>% peretty(0)
# Percent squirrel biomass per nest, by zone.
percent.squirrel.biomass.zone.nest <- left_join(diet.items, centroids.sf, by=c('site')) %>%
filter(source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(genus == 'Tamiasciurus') %>%
mutate(mmass=sum(mass), cmass=mmass/total) %>%
distinct(zone, nest, cmass)
### t-test for squirrel biomass.
# Unpaired two-sample t-test for squirrel biomass between zones.
squirrel.test.zone.nest <- t.test(cmass ~ zone,
data=percent.squirrel.biomass.zone.nest)
# p-value for unpaired two-sample t-test for squirrel biomass between zones.
p.value.squirrel.biomass.zone <- squirrel.test.zone.nest %>%
glance() %>% select(p.value) %>% peretty()
# df for t-test of squirrel by zone.
df.nest.squirrel.test <- squirrel.test.zone.nest %>% tidy() %>% select(parameter) %>% peretty()
# t-statistic for t-test of nest diversity by zone.
stat.nest.squirrel.test <- squirrel.test.zone.nest %>% tidy() %>% select(statistic) %>% peretty()
### Nest diversity.
# Difference between zone diversity (unpooled).
diversity.test.zone.nest <- t.test(diet.diversity ~ zone, data=zone.nest.diversity)
# Mean nest diversity for tz.
mean.nest.diversity.tz <- filter(zone.nest.diversity, zone == 'tz') %>%
summarize(mean(diet.diversity)) %>% peretty()
# Mean nest diversity for cs.
mean.nest.diversity.cs <- filter(zone.nest.diversity, zone == 'cs') %>%
summarize(mean(diet.diversity)) %>% peretty()
# P-value for t-test of nest diversity by zone.
p.value.nest.diversity.test <- diversity.test.zone.nest %>% tidy() %>%
select(p.value) %>% peretty()
# Standard deviation of nest diversity for tz.
sd.nest.diversity.tz <- filter(zone.nest.diversity, zone == 'tz') %>%
summarize(sd(diet.diversity)) %>% peretty()
# Standard deviation of nest diversity for cs.
sd.nest.diversity.cs <- filter(zone.nest.diversity, zone == 'cs') %>%
summarize(sd(diet.diversity)) %>% peretty()
# df for t-test of nest diversity by zone.
df.nest.diversity.test <- diversity.test.zone.nest %>% tidy() %>% select(parameter) %>% peretty()
# t-statistic for t-test of nest diversity by zone.
stat.nest.diversity.test <- diversity.test.zone.nest %>% tidy() %>% select(statistic) %>% peretty()
# Number of nests that successfully fledge chicks.
n.successful.nests <- filter(productivity, n.fledge > 0) %>% nrow()
# Mean number of chicks fledged from all nests.
mean.fledge.active <- drop_na(productivity) %>% summarize(mean(n.fledge)) %>% peretty()
# Standard deviation of chicks fledged from all nests.
sd.fledge.active <- drop_na(productivity) %>% summarize(sd(n.fledge)) %>% peretty()
# Mean number of chicks fledge from successful nests.
mean.fledge.successful <- filter(productivity, n.fledge > 0) %>%
summarize(mean(n.fledge)) %>% peretty()
# Standard deviation of chicks fledge from successful nests.
sd.fledge.successful <- filter(productivity, n.fledge > 0) %>%
summarize(sd(n.fledge)) %>% peretty()
# Stats from chi-square test for difference in diet between years.
# Test statistic for pellet data chi-squared test.
x.stat.year.pellet <- year.chi %>% filter(source == 'P') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for pellet data chi-squared test.
p.value.year.pellet <- year.chi %>% filter(source == 'P') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty()
# Test statistic for combined pellets-and-remains data chi-squared test.
x.stat.year.rp <- year.chi %>% filter(source == 'RP') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for combined pellet-and-remains data chi-squared test.
p.value.year.rp <- year.chi %>% filter(source == 'RP') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty()
# Test statistic for camera data chi-squared test.
x.stat.year.camera <- year.chi %>% filter(source == 'C') %>% unnest(gl) %>% ungroup() %>%
select(statistic) %>% peretty()
# P value for camera data chi-squared test.
p.value.year.camera <- year.chi %>% filter(source == 'C') %>% unnest(gl) %>% ungroup() %>%
select(p.value) %>% peretty()
# Calculate productivity for each nest by zone.
productivity.zone <- left_join(productivity, centroids.sf, by=c('site', 'name')) %>%
select(site, year, n.fledge, zone) %>%
mutate(nest=paste0(site, year))
productivity.zone.test <- t.test(n.fledge ~ zone, data=productivity.zone)
# df for t-test of productivity by zone.
df.productivity.zone.test <- productivity.zone.test %>% tidy() %>% select(parameter) %>% peretty()
# t-statistic for t-test of productivity by zone.
stat.productivity.zone.test <- productivity.zone.test %>% tidy() %>% select(statistic) %>% peretty()
p.value.productivity.zone <- productivity.zone.test %>% glance() %>%
select(p.value) %>% peretty()
### Squirrel biomass model.
# F-statistic for squirrel model.
stat.squirrel.model <- glance(squirrel.model) %>% select(statistic) %>% peretty()
# P value for squirrel mode.
p.value.squirrel.model <- glance(squirrel.model) %>% select(p.value) %>% peretty()
### Diet diversity model.
# F-statistic for diet diversity model
stat.diversity.model <- glance(diversity.model) %>% select(statistic) %>% peretty()
# Total number of prey species recorded from all methods.
n.total.species <- diet.items %>% filter(binomial != 'Unidentified item') %>%
distinct(binomial) %>% nrow() %>% as.numeric()
# Calculate min percent squirrel biomass of any nest.
min.squirrel.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'squirrel') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(min(to.mass)) %>% peretty(0)
# Calculate max squirrel biomass per nest.
max.squirrel.biomass.nest <- filter(diet.items, source == 'C') %>% group_by(nest) %>%
mutate(total=sum(mass)) %>% filter(group == 'squirrel') %>%
mutate(mass=sum(mass), to.mass=mass/total*100) %>% distinct(nest, to.mass) %>%
ungroup() %>% summarize(max(to.mass)) %>% peretty(0)
# Make the map.
ggplot() +
geom_sf(data=n.america, fill='lightgrey') +
geom_sf(data=sc.region, aes(fill='darkgrey')) +
geom_sf(data=tz.region, aes(fill='dimgrey'), color=NA) +
geom_sf(data=rivers) +
coord_sf(xlim=c(st_bbox(sc.region)[1] - 0.5, st_bbox(sc.region)[3] + 0.5),
ylim=c(st_bbox(sc.region)[2] - 0.25, st_bbox(sc.region)[4] + 0.25)) +
theme_void() +
theme(panel.border=element_rect(color='black', fill=NA),
legend.position='bottom') +
annotation_scale(location='br') +
annotation_north_arrow(location='br', which_north='true',
pad_y=unit(1, 'cm'), style=north_arrow_minimal) +
geom_point(data=vancouver, aes(x=x, y=y)) +
geom_label(data=vancouver, aes(x=x, y=y, label=name), nudge_x=0.6, nudge_y=-0.1) +
scale_fill_identity(name='Ecological zones', guide='legend', labels=c('Coastal', 'Transition'))
#panel.background=element_rect(fill='black'),
# Make half the data frame for the graph.
chi.graph <- left_join(diet.items, centroids.sf, by=c('site')) %>%
group_by(source, zone) %>%
mutate(total.count=n()) %>%
distinct(source, zone, total.count) %>%
pivot_wider(names_from=source, values_from=total.count) %>%
mutate(RP=R + P) %>%
pivot_longer(!zone, names_to='source', values_to='total.count')
# Make the other half of the data frame, then join.
chi.graph <- left_join(diet.items, centroids.sf, by=c('site')) %>%
group_by(source, zone, group) %>%
mutate(group.count=n()) %>%
distinct(source, zone, group, group.count) %>%
pivot_wider(names_from=source, values_from=group.count, values_fill=0) %>%
mutate(RP=R + P) %>%
pivot_longer(-c(group, zone), names_to='source', values_to='group.count') %>%
right_join(chi.graph, by=c('zone', 'source')) %>%
filter(source != 'R') %>%
mutate(prop=group.count/total.count)
# Source names for facet labels.
source_names <- list(
'C'='Cameras',
'P'='Pellets',
'RP'='Pooled'
)
# Labeller function.
labeller <- function(variable, value) {
return(source_names[value])
}
# Graph it.
chi.graph %>%
ggplot(aes(x=group, y=prop, fill=zone)) +
geom_bar(stat='identity', position='dodge') +
theme_classic() +
facet_grid(source ~., labeller=labeller) +
theme(legend.position='bottom',
legend.title=element_blank()) +
scale_fill_manual(labels=c('Coastal', 'Transition'), values=c('darkgrey', 'dimgrey')) +
xlab('Prey category') +
ylab('Proportion of items')
# Graph for squirrel model
squirrel.model %>% augment() %>%
ggplot(aes(x=squirrel, y=n.fledge)) +
geom_point() +
#geom_line(aes(x=squirrel, y=.fitted)) +
#geom_ribbon(aes(ymin=.fitted-1.96*.se.fit, ymax=.fitted+1.96*.se.fit),
#            fill=NA, color='black', linetype='dashed') +
labs(x='Percent squirrel biomass', y='N. chicks fledged') +
theme_classic()
# Graph for diversity model.
diversity.model %>% augment() %>%
ggplot(aes(x=diet.diversity, y=n.fledge)) +
geom_point() +
#geom_line(aes(x=diet.diversity, y=.fitted)) +
#geom_ribbon(aes(ymin=.fitted-1.96*.se.fit, ymax=.fitted+1.96*.se.fit),
#            fill=NA, color='black', linetype='dashed') +
labs(x='Diet diversity', y='N. chicks fledged') +
theme_classic()
# Make the initial data frame.
biomass.table <- diet.items %>% group_by(class, binomial) %>% mutate(count=n()) %>% ungroup() %>%
group_by(source) %>% mutate(total.source.count=n(),
total.source.mass=sum(mass)) %>% ungroup() %>%
group_by(source, class, binomial) %>% mutate(source.count=n(),
source.mass=sum(mass),
per.source.count=source.count/total.source.count*100,
per.source.mass=source.mass/total.source.mass*100) %>%
distinct(source, class, binomial, count, per.source.count, per.source.mass) %>%
mutate(source2=paste0(source, '2')) %>%
pivot_wider(names_from=source, values_from=per.source.count) %>%
pivot_wider(names_from=source2, values_from=per.source.mass) %>% ungroup() %>%
group_by(class, binomial) %>%
fill(everything(), .direction='downup') %>%
distinct() %>% left_join(prey.list, by=c('class', 'binomial')) %>%
select(class, common, binomial, count, C, C2, P, P2, R, R2) %>%
mutate(common=replace_na(common, 'unknown'),
binomial=str_replace(binomial, 'Unidentified item', ' '),
common=str_to_sentence(common, locale='en')) %>%
arrange(class, binomial) %>%
rownames_to_column(var='order') %>% mutate(order=as.numeric(order)) %>%
mutate(order=case_when(
class == 'Mammalia' ~ order + 1,
class == 'Unknown' ~ order + 2,
TRUE ~ order
))
# Find where total rows should be inserted.
table.breaks <- biomass.table %>% group_by(class) %>%
summarize(max=max(order), .groups='drop') %>% ungroup() %>%
select(max) %>% as.vector()
# Calculate total avian items.
avian.sums <- biomass.table %>% filter(class == 'Aves') %>%
ungroup() %>%
replace(is.na(.), 0) %>%
summarise(., across(where(is.numeric), sum)) %>%
mutate(order=table.breaks$max[1] + 1, class='Aves', common='TOTAL', binomial=' ') %>%
select(order, class, common, binomial, everything())
# Calculate total mammalian items.
mammal.sums <- biomass.table %>% filter(class == 'Mammalia') %>%
ungroup() %>%
replace(is.na(.), 0) %>%
summarise(., across(where(is.numeric), sum)) %>%
mutate(order=table.breaks$max[2] + 1, class='Mammalia', common='TOTAL', binomial=' ') %>%
select(order, class, common, binomial, everything())
# Calculate total items.
all.sums <- biomass.table %>% ungroup() %>%
replace(is.na(.), 0) %>%
summarise(., across(where(is.numeric), sum)) %>%
mutate(order=table.breaks$max[3] + 1, class=' ', common='TOTAL', binomial=' ') %>%
select(order, class, common, binomial, everything())
# Make the table (flextable style)
bind_rows(biomass.table, avian.sums, mammal.sums, all.sums) %>% arrange(order) %>%
mutate(across(C:R2, round, digits=2)) %>%
column_to_rownames(var='order') %>%
flextable() %>%
add_header_row(values=c(' ', 'Camera', 'Pellets', 'Remains'), colwidths=c(4, 2, 2, 2)) %>%
colformat_num(na_str='-', digits=0) %>%
set_header_labels(class='Class', common='Common name', binomial='binomial', count='N',
C='% items', C2='% biomass',
P='% items', P2='% biomass',
R='% items', R2='% biomass') %>%
bg(i=table.breaks$max[1]+1, bg='lightgrey', part='body') %>%
bg(i=table.breaks$max[2]+1, bg='lightgrey', part='body') %>%
bg(i=table.breaks$max[3]+1, bg='lightgrey', part='body')
productivity
mean(productivity, na.rm=TRUE)
mean(productivity$n.fledge, na.rm=TRUE)
sd(productivity$n.fledge, na.rm=TRUE)
zone.chi
zone.chi %>% filter(source == 'C')
zone.chi %>% filter(source == 'C') %>%
unnest(gl)
zone.chi %>% filter(source == 'C') %>% unnest(ch)
View(zone.chi)
View(zone.chi[[3]][[2]])
zone.chi[[3][2]]
zone.chi[[3]][[2]]
zone.chi[[3]][[2]]$residuals
zone.chi[[3]][[2]]$stdres
install.packages('fifer')
library(fifer)
library(devtools)
install_github("dustinfife/fifer")
install.packages('chisq.posthoc.test')
library(chisq.posthoc.test)
# Data for chisquare.
zone.counts
# Just camera.
zone.counts %>% filter(source == 'C')
# Just camera.
zone.counts %>% filter(source == 'C') %>% ungroup() %>%
pivot_wider(-group, names_from=zone, values_from=count)
test.df <- as.table(cbind(c(30,40,60,120), c(50,70,60,80)))
test.df
# Just camera.
zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(-zone, names_from=group, values_from=count)
# Just camera.
zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=group, values_from=count)
# Just camera.
zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count)
# Just camera.
zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0)
# Just camera.
hoc <-zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0)
# Just camera.
hoc <-zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0) %>% select(-group)
hoc
# Just camera.
hoc <-zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0) %>% column_to_rownames(var=group)
# Just camera.
hoc <-zone.counts %>% filter(source == 'C') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0) %>% column_to_rownames(var='group')
hoc
# Test?
chisq.posthoc.test(hoc)
# Test?
chisq.posthoc.test(hoc, method='bonferroni')
# Test?
test <- chisq.posthoc.test(hoc, method='bonferroni')
# p.values
test %>% filter(Value == 'p values')
# Just pellets
hocp <-zone.counts %>% filter(source == 'P') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0) %>% column_to_rownames(var='group')
hocp
# Test?
testp <- chisq.posthoc.test(hocp, method='bonferroni')
# p.values
testp %>% filter(Value == 'p values')
# Just remains + pellets
hocrp <-zone.counts %>% filter(source == 'RP') %>% ungroup() %>% select(-source) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0) %>% column_to_rownames(var='group')
hocrp
# Data for chisquare.
zone.counts
View(zone.count)
View(zone.counts)
# p.values
test %>% filter(Value == 'p values')
# resids
test
# resids
test %>% filter(Value == 'Residuals')
zone.count
# Just remains + pellets
zone.counts
# Just remains + pellets
zone.counts %>% filter(source != 'C')
# Just remains + pellets
zone.counts %>% filter(source != 'C') %>% group_by(source, zone, group) %>%
mutate(c.count=sum(count))
# Just remains + pellets
zone.counts %>% filter(source != 'C') %>% group_by(zone, group) %>%
mutate(c.count=sum(count))
# Just remains + pellets
zone.counts %>% filter(source != 'C') %>% group_by(zone, group) %>%
mutate(c.count=sum(count)) %>% view()
# Just remains + pellets
zone.counts %>% filter(source != 'C') %>% group_by(zone, group) %>%
mutate(c.count=sum(count)) %>% distinct(zone, group, c.count)
# Just remains + pellets
zone.counts %>% filter(source != 'C') %>% group_by(zone, group) %>%
mutate(c.count=sum(count)) %>% distinct(zone, group, c.count) %>%
pivot_wider(names_from=zone, values_from=count, values_fill=0)
# Just remains + pellets
zone.counts %>% filter(source != 'C') %>% group_by(zone, group) %>%
mutate(c.count=sum(count)) %>% distinct(zone, group, c.count) %>%
pivot_wider(names_from=zone, values_from=c.count, values_fill=0)
hocp
# Test?
testp <- chisq.posthoc.test(hocp, method='bonferroni')
# p.values
testp %>% filter(Value == 'p values')
# Just remains + pellets
zone.counts %>% filter(source != 'C') %>% group_by(zone, group) %>%
mutate(c.count=sum(count)) %>% distinct(zone, group, c.count) %>%
pivot_wider(names_from=zone, values_from=c.count, values_fill=0) %>%
column_to_rownames(var='group')
# Just remains + pellets
hocrp <- zone.counts %>% filter(source != 'C') %>% group_by(zone, group) %>%
mutate(c.count=sum(count)) %>% distinct(zone, group, c.count) %>%
pivot_wider(names_from=zone, values_from=c.count, values_fill=0) %>%
column_to_rownames(var='group')
hocrp
# Test?
testrp <- chisq.posthoc.test(hocrp, method='bonferroni')
# p.values
testp %>% filter(Value == 'p values')
chisq.test(hocrp)
# Standardized residuals for camera data.
zone.chi[[3]][[2]]$stdres
zone.chi[[3]][[1]]$stdres
zone.chi[[3]][[3]]$stdres
