---
title: "A PLN"
output: html_notebook
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
```

I've been running around willy-nilly trying to get a feel for my landscape data and the methods I can use to analyze it, but it's time to actually get a plan.

```{r message=FALSE}
# Import conflict settings.
source('../src/conflicted.R')

# Load libraries.
library(tidyverse)
library(ggplot2)
library(sf)
library(raster)
library(landscapemetrics)
library(vegan)
library(ggbiplot)
library(GGally)
```

The main goal here is to see which landscape characteristics (if any) are correlated with variation in diet. Step one therefore seems to be to quantify variation in diet.

```{r}
# Bring in diet data.
df <- read_csv('../data/interim/camera_corrected.csv', guess_max=7000)
source('../src/prey_attributes.R')

# Fix that pesky squirrel... twice.
items <- items %>% mutate(common=case_when(
  genus == 'Tamiasciurus' & species == 'sp' ~ 'Douglas squirrel',
  TRUE ~ common
))

items <- items %>% mutate(species=case_when(
  genus == 'Tamiasciurus' & species == 'sp' ~ 'douglasii',
  TRUE ~ species
))

items[sample(1:nrow(items), 10, replace=FALSE),]
```

Basic ideas are diet diversity (though richness and evenness could be considered separately),

```{r}
# Twist camera data wide.
cam.genus.wide <- items %>% filter(genus != 'Unknown') %>% 
  group_by(site, genus, species) %>% 
  mutate(count=n()) %>% 
  dplyr::select(site, genus, species, count) %>% 
  unite(name, 2:3, sep=' ') %>% 
  distinct() %>% 
  pivot_wider(names_from=name, values_from=count,
                         values_fill=list(count = 0))

# Calculate Simpson's diversity index.
cam.simpson <- plyr::ddply(cam.genus.wide, ~site, function(x) {
           data.frame(simpson=diversity(x[-1], index='simpson'))
   })

ggplot(cam.simpson, aes(x=site, y=simpson)) +
  geom_bar(stat='identity') +
  labs(title='Diet diversity', y='Simpson Index', x='Site') +
  coord_flip() +
  theme_classic()
```

ratio of avian:mammalian biomass,

```{r message=FALSE, warning=FALSE}
# Calculate proportion of mammal biomass per site.
mammal.mass <- items %>% mutate(mass=as.numeric(mass)) %>% 
  group_by(site) %>% 
  mutate(total=sum(mass)) %>% 
  filter(class == 'Mammalia') %>% 
  mutate(amount.ml=sum(mass), prop.ml=amount.ml/total) %>% 
  dplyr::select(site, prop.ml) %>% distinct()

# Calculate proportion of avian biomass per site.
avian.mass <- items %>% mutate(mass=as.numeric(mass)) %>% 
  group_by(site) %>% 
  mutate(total=sum(mass)) %>% 
  filter(class == 'Aves') %>% 
  mutate(amount.av=sum(mass), prop.av=amount.av/total) %>% 
  dplyr::select(site, prop.av) %>% distinct()

# Join them together.
biomass.ratio <- right_join(mammal.mass, avian.mass) %>% mutate(ratio=prop.ml/prop.av) %>% 
  rename(mammalian=prop.ml, avian=prop.av) %>% 
  pivot_longer(cols=2:3, names_to='group', values_to='proportion')

# Graph it.
ggplot(biomass.ratio, aes(x=site, y=proportion, fill=group)) +
  geom_bar(position='stack', stat='identity') +
  labs(title='Proportion biomass by class', x='Site', y='Proportion biomass', fill='Class') +
  coord_flip() +
  theme_classic()
```

or proportion of a single major genus, *Tamiasciurus* (which possibly works out to be same as dominance/evenness).

```{r}
# Calculate proportion of squirrel biomass per site.
squirrel.mass <- items %>% mutate(mass=as.numeric(mass)) %>% 
  group_by(site) %>% 
  mutate(total=sum(mass)) %>% 
  filter(genus == 'Tamiasciurus') %>% 
  mutate(amount.sq=sum(mass), prop.sq=amount.sq/total) %>% 
  select(site, prop.sq) %>% distinct()

ggplot(squirrel.mass, aes(x=site, y=prop.sq)) +
  geom_bar(stat='identity') +
  labs(title='Squirrel dominance in diet', y='Proportion squirrel biomass', x='Site') +
  coord_flip() +
  theme_classic()
```

One final, left-field option is a diet PCA.

```{r}
# Make rownames for prcomp.
genus.wide.rn <- cam.genus.wide %>% column_to_rownames(var='site')

# Make the PCA.
diet.pca <- prcomp(genus.wide.rn, center=TRUE, scale=TRUE)

# Check it out.
ggbiplot(diet.pca, labels=rownames(genus.wide.rn)) +
  xlim(-2, 2) +
  ylim(-2, 2) +
  theme_classic()
```

The next part is to quantify landscape characteristics. There are three layers of landscape data: forest type (BEC), forest structure (VRI), and habitat suitability (nesting & foraging HSI).

For BEC data, it makes sense to keep things very, very simple: dominant forest type and either straight richness or diversity.

```{r message=FALSE}
# Import the BEC raster.
r.bec <- raster('../data/interim/bec_raster_SC.tif')

# Import the original shapefile.
shp.bec <- st_read('../data/processed/BEC_annual-homerange_clipped.shp')

# Get BEC levels.
bec.levels <- data.frame((shp.bec[["MAP_LABEL"]])) %>% 
  rownames_to_column() %>% 
  rename(ID=1, map_label=2) %>% 
  mutate(ID=as.numeric(ID))

# Add levels to raster.
levels(r.bec) <- bec.levels

# Import nests and calculate centroids.
cam.sites <- read_csv('../data/processed/the_big_list_of_nests.csv') %>% 
  group_by(name) %>% 
  mutate_at(c('lat', 'lon'), mean) %>% 
  mutate_at(vars(starts_with('status')), max) %>% 
  mutate_at(c('telemetry', 'cameras', 'remains'), max) %>% 
  dplyr::select(-nest, -NOTES) %>% 
  distinct() %>% 
  filter(cameras > 0)

# Drop TCR, ungroup.
cam.sites <- cam.sites %>% filter(site != 'TCR') %>% 
  ungroup() %>% 
  rownames_to_column(var='plot_id') %>% 
  mutate(plot_id=as.integer(plot_id))

# Make site table a spatial object and make it UTMs.
cam.sites.sf <- ungroup(cam.sites) %>% st_as_sf(coords=c('lon', 'lat')) %>%
  st_set_crs('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs') %>%
  st_transform("+proj=utm +zone=10 +datum=WGS84 +units=m +no_defs")

# Convert approximate homerange area in ha to radius in m
a.hr.ha <- 3700
r.hr.m <- sqrt(a.hr.ha*10000/pi)

# Calculate amount of each BEC type.
bec.class.amount <- sample_lsm(r.bec, y=cam.sites.sf, size=r.hr.m, what='lsm_c_ca', 
                         shape='circle') %>% 
  inner_join(bec.levels, by=c('class'='ID')) %>% 
  inner_join(cam.sites)

# Regroup by forest type bc stupid reasons.
bec.type.amount <- bec.class.amount %>% group_by(site, map_label) %>% 
  summarize(total=sum(value))

# Graph it.
ggplot(bec.type.amount, aes(x='', y=total, fill=as.factor(map_label))) +
  geom_bar(stat='identity', width=1, color='white') +
  facet_wrap(~site) +
  labs(fill='Forest type') +
  coord_polar('y', start=0) +
  theme_void()
```

```{r}
# What type is dominant, and by how much?
bec.type.amount %>% ungroup() %>% 
  group_by(site) %>% 
  mutate(area=sum(total)) %>% 
  group_by(map_label) %>% 
  mutate(per=total/area) %>% 
  ungroup() %>% group_by(site) %>% 
  top_n(1, total) %>% 
  select(site=site, forest.type=map_label, amount=total, percent=per)
```

```{r message=FALSE}
# Calculate Simpson's diversity index.
bec.shdi <- sample_lsm(r.bec, y=cam.sites.sf, size=r.hr.m, what='lsm_l_shdi', 
                         shape='circle') %>% 
  inner_join(cam.sites)

bec.shdi %>% select(site, value) %>% 
  ggplot(aes(x=site, y=value)) +
  geom_bar(stat='identity') +
  labs(title='Landscape diversity', y='Simpson Index', x='Site') +
  coord_flip() +
  theme_classic()
```

The VRI data is more complicated because there's more encoded in it. In theory, a lot of that data should already be captured by the BEC data and the HSI data. For example, dominant tree species is probably highly correlated with BEC zone, and both age and height should be highly correlated with HSI score.

What won't be captured by BEC or HSI is the presence of other land cover types, like talus slopes and lakes, that goshawks don't give a fig about but may be great for prey. Previously, I used:

* Water (1)
* Land (unvegetated) (2)
* Vegetated (not forest) (3)
* Deciduous (4)
* Coniferous (regen, young, medium, and old) (5, 6, 7, 8)

But it could be worthwhile to lump the older forest classes together and invest more space in non-forest classes, like urban, wetland, etc.

```{r, message=FAlSE}
# Import the VRI raster.
r.vri <- raster('../data/interim/vri_camera-sites_2019.tif')

# Calculate area per class per site.
vri.class.amount <- sample_lsm(r.vri, y=cam.sites.sf, size=r.hr.m, what='lsm_c_ca', 
           shape='circle') %>% 
  # Amend class number with habitat class name.
  left_join(data.frame(levels(r.vri)), by=c('class'='ID')) %>% 
  inner_join(cam.sites)

# Graph it.
ggplot(vri.class.amount, aes(x='', y=value, fill=as.factor(category))) +
  geom_bar(stat='identity', width=1, color='white') +
  facet_wrap(~site) +
  labs(fill='Landcover') +
  coord_polar('y', start=0) +
  theme_void()
```

There actually doesn't seem much point in calculating class area. But something in the **diversity/richness/evenness/dominance** line seems key, and so does something to do with **edge/fragmentation**. **Contagion also seems** like a fun one to try.

The final bit of landscape data is the HSI. I'm not sure if there's good reason to use the nesting HSI, since it includes a ton of variables that shouldn't matter to foraging goshawks. But the foraging HSI should definitely be used. Here **total area** does make sense, and so does **edge**, and also something to do with **interspersion** (maybe contagion again?), though I suppose that will start to get quite correlated.

```{r, message=FALSE}
# Import the raster.
r.f.hsi <- raster('../data/processed/foraging_sc.tif')

# Define levels for the raster.
f.hsi.levels <- data.frame(ID=c(-10, -2, -1, 0, 1, 2, 3), 
                           class.name=c('ocean', 'freshwater', 'river', 'nil', 'low', 'moderate', 'high'))

# Add the levels to the raster.
levels(r.f.hsi) <- f.hsi.levels

# Calculate area per class per site.
hsi.class.amount <- sample_lsm(r.f.hsi, y=cam.sites.sf, size=r.hr.m, what='lsm_c_ca', 
           shape='circle') %>% 
  # Amend class number with habitat class name.
  left_join(data.frame(levels(r.f.hsi)), by=c('class'='ID')) %>%
  inner_join(cam.sites)

# Graph it.
ggplot(hsi.class.amount, aes(x='', y=value, fill=as.factor(class))) +
  geom_bar(stat='identity', width=1, color='white') +
  facet_wrap(~site) +
  labs(fill='Suitability') +
  coord_polar('y', start=0) +
  theme_void()
```

```{r, message=FALSE}
hsi.contagion <- sample_lsm(r.f.hsi, y=cam.sites.sf, size=r.hr.m, what='lsm_l_contag', 
           shape='circle')%>%
  inner_join(cam.sites)

hsi.contagion %>% select(site, value) %>% 
  ggplot(aes(x=site, y=value)) +
  geom_bar(stat='identity') +
  labs(title='Landscape contagion', y='Contagion', x='Site') +
  coord_flip() +
  theme_classic()
```

And then finally stuff all of it into various models and let Aikake decide which wins. I've been using `lm` so far because I have one data point per site. It might get more complicated with the final data set because some sites will be repeated. In which case I may need to include "site" as a random factor. Or possible "year" would do the trick.