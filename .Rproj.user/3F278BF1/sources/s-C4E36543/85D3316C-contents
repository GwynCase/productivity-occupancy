---
title: "R Notebook"
output: html_notebook
---

```{r options, include=FALSE}
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE)
```

Before we get too invested in things, let's take a quick look at correlation, since that may come up.

```{r}
# Import conflict settings.
source('../src/conflicted.R')

# Load some libraries.
library(tidyverse)
library(lubridate)
library(vegan)
library(broom)
library(GGally)
```

Then bring in the diet data and get it ready.

```{r}
# Bring in specimen data.
remains.data <- read_csv('../data/processed/specimens_20210318.csv', guess_max=7000) %>% 
  ## filter only records with at least size assigned...
  filter(size != 'U')

# Bring in camera data.
photos <- read_csv('../data/interim/cameras_20210623.csv', guess_max=7000)
camera.data <- photos %>% 
  ## filter only records with at least size assigned...
  filter(size != 'U')

# Bring in a list of site abbreviations and site names.
nest.list <- read_csv('../data/processed/site_abbreviations.csv')

# Standardize the specimen data.
remains.data <- left_join(remains.data, nest.list, by=c('name', 'site')) %>% 
  select(site, date, class, order, family, genus, species, common, size, age, source)

# Standardize the camera data.
camera.data <- camera.data %>% 
  mutate(date=date(datetime), source='C') %>% 
  select(site, date, class, order, family, genus, species, common, size, age, source)

# Join them together.
diet.data <- bind_rows(remains.data, camera.data)

# Add a unique site/year identifier.
diet.data <- diet.data %>% 
  mutate(year=year(date), nest=paste(site, year, sep=''))

# Do some cleanup.
diet.data <- diet.data %>% 
  mutate(size=case_when(
    size %in% c('S', 'Small') ~ 'small',
    size %in% c('M', 'Medium') ~ 'medium',
    size %in% c('L', 'Large') ~ 'large'
  ))

# Fix the gray jay.
diet.data <- diet.data %>% mutate(common=case_when(
  common == 'gray jay' ~ 'canada jay',
  TRUE ~ common
))

# Also bring in productivity.
productivity <- read_csv('../data/raw/productivity.csv')
```

Then do the biomass thing.

```{r}
# Bring in a list of all known prey.
prey.list <- read_csv('../data/interim/prey_attributes.csv')

# Fix the gray jay.
prey.list <- prey.list %>% mutate(common=case_when(
  common == 'gray jay' ~ 'canada jay',
  TRUE ~ common
))

# Join the biomass data to the list of diet items.
diet.items <- prey.list %>% select(genus, species, binomial, common, category, mass) %>% 
  right_join(diet.data, by=c('genus', 'species', 'common'))

# For unidentified items, classify them by size and class.
diet.items <- diet.items %>% mutate(category=case_when(
  is.na(category) & class == 'Mammalia' & size == 'small' ~ 'small mammal',
  is.na(category) & class == 'Mammalia' & size == 'medium' ~ 'medium mammal',
  is.na(category) & class == 'Mammalia' & size == 'large' ~ 'large mammal',
  is.na(category) & class == 'Aves' & size == 'small' ~ 'small bird',
  is.na(category) & class == 'Aves' & size == 'medium' ~ 'medium bird',
  is.na(category) & class == 'Aves' & size == 'large' ~ 'large bird',
  is.na(category) & class == 'Unknown' ~ paste(size, 'item'),
  TRUE ~ category))

# For unidentified items, fill in the binomial column.
diet.items <- diet.items %>% replace_na(list(binomial = 'Unidentified item'))

# Calculate average masses for unidentified items, based of known species.
mean.mass <- diet.items %>% drop_na(mass) %>% 
  distinct(binomial, mass, category) %>% 
  group_by(category) %>% 
  ## averaging the mass for each size & class category...
  summarize(average=mean(mass)) %>% 
  pivot_wider(names_from=category, values_from=average) %>% 
  ## calculating the average mass for complete unknowns...
  mutate(`large item` = mean(c(`large bird`, `large mammal`)),
         `medium item` = mean(c(`medium bird`, `medium mammal`)),
         `small item` = mean(c(`small bird`, `small mammal`))) %>% 
  ## and reassembling it in a tidy format.
  pivot_longer(everything(), names_to='category', values_to='average')

# Join average mass to diet items...
diet.items <- left_join(diet.items, mean.mass, by='category') %>% 
  ## and fill in missing mass with average values
  mutate(mass=coalesce(mass, average)) %>% 
  ## then drop no longer needed average column and rearrange.
  select(site, year, nest, class, order, family, genus, species, binomial, common, 
         category, size, mass, age, source)

# Change mass for juvenile items.
diet.items <- diet.items %>% mutate(mass=case_when(
  age == 'J' ~ 0.5*mass,
  TRUE ~ mass
))

# Add grouping categories.
diet.items <- diet.items %>% mutate(group=case_when(
  class == 'Aves' & family == 'Phasianidae' ~ 'grouse',
  class == 'Aves' & family == 'Corvidae' ~ 'corvid',
  class == 'Aves' & family == 'Turdidae' ~ 'thrush',
  class == 'Aves' ~ 'bird',
  class == 'Mammalia' & genus == 'Tamiasciurus' ~ 'squirrel',
  class == 'Mammalia' & genus == 'Lepus' ~ 'hare',
  class == 'Mammalia' ~ 'mammal',
  TRUE ~ 'unknown'
))
```

I need some functions to make this work.

```{r}
# Make a function to calculate class mass.
class.mass <- function(data) {
    data %>% mutate(total.mass=sum(.data$mass)) %>%
    filter(class %in% c('Mammalia', 'Aves')) %>%
    group_by(class) %>% 
    mutate(class.mass=sum(.data$mass), per.class=class.mass/total.mass*100) %>% 
    distinct(class, per.class) %>% 
    rename(variable=class, percent=per.class)
}

# And a function to calculate squirrel mass.
squirrel.mass <- function(data) {
    data %>% mutate(total.mass=sum(.data$mass)) %>%
    filter(genus == 'Tamiasciurus') %>%
    mutate(genus.mass=sum(.data$mass), per.genus=genus.mass/total.mass*100) %>% 
    distinct(genus, per.genus) %>% 
    rename(variable=genus, percent=per.genus)
}

# And a function to calculate mass of each group.
group.mass <- function(data) {
  data %>% mutate(total.mass=sum(.data$mass)) %>%
    group_by(group) %>% 
    mutate(group.mass=sum(.data$mass), per.group=group.mass/total.mass*100) %>% 
    distinct(group, per.group) %>% 
    rename(variable=group, percent=per.group)
}
```

Do the calculations for the model.

```{r}
# Calculate counts of items identified to genus for each nest.
nest.count <- diet.items %>% filter(source == 'C' & binomial != 'Unidentified item') %>% 
  group_by(nest, binomial) %>% 
  mutate(count=n()) %>% 
  select(nest, binomial, count) %>% 
  distinct() %>% 
  pivot_wider(names_from=binomial, values_from=count, values_fill=list(count = 0))

# Diversity per nest.
nest.diversity <- plyr::ddply(nest.count, ~nest, function(x) {
  data.frame(diet.diversity=diversity(x[-1], index='simpson'))
})

# Calculate percent mass for each nest.
nest.mass <- diet.items %>% filter(source == 'C') %>% 
  group_by(nest) %>% nest() %>% 
  mutate(class=map(data, class.mass), 
         genus=map(data, squirrel.mass), 
         group=map(data, group.mass)) %>% 
  pivot_longer(-c(nest, data), names_to='var', values_to='per') %>% 
  unnest(per) %>% 
  select(nest, variable, percent) %>% 
  pivot_wider(id_cols=c(nest), names_from=variable, values_from=percent, values_fill=0)

# Make a happy data set for the models to use.
model.data <- productivity %>% mutate(nest=paste(site, year, sep='')) %>% 
  left_join(nest.diversity, by=c('nest')) %>% 
  left_join(nest.mass, by=c('nest')) %>%
  select(site, year, nest, n.fledge, diet.diversity, squirrel) %>% 
  filter_all(all_vars(!is.na(.)))
```

Ok, everything should be in place for some correlation matrices.

```{r}
select(model.data, squirrel, diet.diversity) %>% cor()
```

So a slight negative correlation (-0.2) but nothing major.



