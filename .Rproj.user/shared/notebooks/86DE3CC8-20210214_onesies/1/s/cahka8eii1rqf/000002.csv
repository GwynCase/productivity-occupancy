"0","# Separate out the data."
"0","ba.data <- df %>% filter(size == 'breeding area')"
"0",""
"0","# Re-write the top model on its own."
"0","ba.top.model <- glm(cbind(years.detect, years.no.detect) ~ proportion.cover.mature + "
"0","                   gap.edge.density, data=ba.data, family=binomial(logit))"
"0",""
"0","# Create a grid and add predictions."
"0","ba.predicted <- data_grid(ba.data, gap.edge.density, .model=ba.top.model) %>% "
"0","  mutate(pred=predict(ba.top.model, newdata=., type='response'))"
"0",""
"0","# Grab the inverse link function from the model."
"0","ba.inv <- family(ba.top.model)$linkinv"
"0",""
"0","# Add fit and SE data."
"0","ba.predicted <- bind_cols(ba.predicted, setNames(as_tibble(predict(ba.top.model, ba.predicted, "
"0","                                                                     se.fit = TRUE)[1:2]),"
"0","                           c('fit.link','se.link')))"
"0",""
"0","# Create confidence interval."
"0","ba.predicted <- ba.predicted %>% mutate(fit.resp  = ba.inv(fit.link),"
"0","                  right.upr = ba.inv(fit.link + (2 * se.link)),"
"0","                  right.lwr = ba.inv(fit.link - (2 * se.link)))"
"0",""
"0","# Plot them?"
"0","ggplot(ba.predicted, aes(x=gap.edge.density, y=pred)) +"
"0","  geom_line() +"
"0","  geom_ribbon(aes(ymin=right.lwr, ymax=right.upr), alpha=0.1) +"
"0","  geom_point(data=ba.data, aes(x=gap.edge.density, y=quality.index)) +"
"0","  theme_classic()"
